Функция ЗаполнитьОшибки(КодОшибки, ОписаниеОшибки, Знач Errors=Неопределено)
	Если Errors=Неопределено Тогда
		Errors = СоздатьПустойТипIDM("ListOfErrors");
	КонецЕсли;
	Error = СоздатьПустойТипIDM("Error");
	Error.Code = КодОшибки;
	Error.Description = ОписаниеОшибки;
	Errors.Error.Добавить(Error);
	Возврат Errors; 
КонецФункции  


Функция CreateAccount(Account, Errors=Неопределено)
	Справочник = Справочники.NSI_УЗIDM.СоздатьЭлемент();
	Справочник.Фамилия = Account.Family;
	Справочник.Имя = Account.Name;
	Справочник.Отчество = Account.Otchestvo;
	Справочник.Наименование = Справочник.Фамилия + ?(ЗначениеЗаполнено(Справочник.Имя), " "+Справочник.Имя, "")+ ?(ЗначениеЗаполнено(Справочник.Отчество), " "+Справочник.Отчество, "");
	Справочник.Должность = Account.Position;
	Справочник.Подразделение = Account.Division;
	Справочник.Статус = ?(Account.Status[0]="Active", Перечисления.NSI_СтатусыУЗ.Активна, Перечисления.NSI_СтатусыУЗ.Неактивна);
	Справочник.ID_SMP = Account.ID_SMP;
	Справочник.LoginAD = Account.LoginAD;
	Справочник.Техническая = Account.Technical;
	Справочник.Наименование = Account.AccountName;
	Попытка
		Справочник.Записать();
		Account.UserID = Справочник.UserID;
		Возврат Истина;
	Исключение
		Errors = ЗаполнитьОшибки(1, "Не удалось записать аккаунт.");
		Возврат Ложь;
	КонецПопытки;
КонецФункции

Функция EditAccount(Account, Errors=Неопределено)
	УЗ = Справочники.NSI_УЗIDM.НайтиПоРеквизиту("UserID", Account.UserID);
	Если ЗначениеЗаполнено(УЗ) Тогда
		Справочник = УЗ.ПолучитьОбъект();
		Справочник.Фамилия = Account.Family;
		Справочник.Имя = Account.Name;
		Справочник.Отчество = Account.Otchestvo;
		Справочник.Должность = Account.Position;
		Справочник.Подразделение = Account.Division;
		Справочник.Статус = ?(Account.Status[0]="Active", Перечисления.NSI_СтатусыУЗ.Активна, Перечисления.NSI_СтатусыУЗ.Неактивна);
		Справочник.ID_SMP = Account.ID_SMP;
		Справочник.LoginAD = Account.LoginAD;
		Справочник.Техническая = Account.Technical;
		Справочник.Наименование = Account.AccountName;
		Попытка
			Справочник.Записать();
			Возврат Истина;
		Исключение
			Errors = ЗаполнитьОшибки(1, "Не удалось записать аккаунт.");
		Возврат Ложь;
		КонецПопытки;
	Иначе
		Errors = ЗаполнитьОшибки(2, "Учетная запись не найдена.");
		Возврат Ложь;
	КонецЕсли;
КонецФункции

Функция GetListOfBases(Errors=Неопределено)
	ListOfBases = СоздатьПустойТипIDM("ListOfBases");
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	СписокИБ.Ссылка,
	                      |	СписокИБ.ИмяБазы
	                      |ИЗ
	                      |	Справочник.NSI_СписокВИБ КАК СписокИБ
	                      |ГДЕ
	                      |	СписокИБ.ОтдаватьВIDM");
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Base = СоздатьПустойТипIDM("Base");
		Base.BaseID = Строка(Выборка.Ссылка.УникальныйИдентификатор());
		Base.Description = Выборка.ИмяБазы;
		ListOfBases.Bases.Добавить(Base);
	КонецЦикла;
	Возврат ListOfBases;
КонецФункции

Функция GetListOfRoles(Errors=Неопределено)
	ListOfRoles = СоздатьПустойТипIDM("ListOfRoles");
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	РолиIDM.Ссылка,
	                      |	РолиIDM.ОсновнаяИБ Как База,
	                      |	РолиIDM.Описание,
	                      |	РолиIDM.Наименование,
	                      |	РолиIDM.ИмяРоли,
	                      |	РолиIDM.ОсновнаяИБ КАК ИмяБазы
	                      |ИЗ
	                      |	Справочник.NSI_РолиIDM КАК РолиIDM");
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Role = СоздатьПустойТипIDM("Role");
		Role.RoleID = Строка(Выборка.Ссылка.УникальныйИдентификатор());
		Role.Name =  Выборка.ИмяРоли+"/"+Выборка.ИмяБазы;
		Role.BaseID = Строка(Выборка.База.УникальныйИдентификатор());
		Role.Description = Выборка.Описание;
		ListOfRoles.Roles.Добавить(Role);
	КонецЦикла;
	Возврат ListOfRoles;
КонецФункции

Функция AddRoleInAccount(UserID, RoleID, Errors=Неопределено)
	УЗ = Справочники.NSI_УЗIDM.НайтиПоРеквизиту("UserID", UserID);	
	Если ЗначениеЗаполнено(УЗ) Тогда
		УЗОбъект = УЗ.ПолучитьОбъект();
		Роль = Справочники.NSI_РолиIDM.ПолучитьСсылку(Новый УникальныйИдентификатор(RoleID));
		Если ЗначениеЗаполнено(Роль.Ссылка) Тогда
			Если УЗОбъект.РолиIDM.Найти(Роль, "РольIDM")=Неопределено Тогда
				НоваяСтрока = УЗОбъект.РолиIDM.Добавить();
				НоваяСтрока.РольIDM = Роль;
			КонецЕсли;
			Попытка          
				УЗОбъект.Записать();
				Errors = СоздатьПустойТипIDM("ListOfErrors");
				Возврат Истина;
			Исключение
				Errors = ЗаполнитьОшибки("UserWriteFail", "Не удалось записать учетную запись. "+ОписаниеОшибки());
				Возврат Ложь;
			КонецПопытки;
		КонецЕсли;
	Иначе
		Errors = ЗаполнитьОшибки(1, "Учетная запись с UserID = "+UserID+" не найдена.");
		Возврат Ложь;
	КонецЕсли;
КонецФункции

Функция RemoveRoleInAccount(UserID, RoleID, Errors=Неопределено)
	УЗ = Справочники.NSI_УЗIDM.НайтиПоРеквизиту("UserID", UserID);	
	Если ЗначениеЗаполнено(УЗ) Тогда
		УЗОбъект = УЗ.ПолучитьОбъект();
		Роль = Справочники.NSI_РолиIDM.ПолучитьСсылку(Новый УникальныйИдентификатор(RoleID));
		Если ЗначениеЗаполнено(Роль.Ссылка) Тогда
			СтрокаРоли = УЗОбъект.РолиIDM.Найти(Роль, "РольIDM");
			Если Не СтрокаРоли = Неопределено Тогда
				УЗОбъект.РолиIDM.Удалить(СтрокаРоли);
			КонецЕсли;
			Попытка          
				УЗОбъект.Записать();
				Errors = СоздатьПустойТипIDM("ListOfErrors");
				Возврат Истина;
			Исключение
				Errors = ЗаполнитьОшибки(2, "Не удалось записать учетную запись. "+ОписаниеОшибки());
				Возврат Ложь;
			КонецПопытки;
		КонецЕсли;
	Иначе
		Errors = ЗаполнитьОшибки(1, "Учетная запись с UserID = "+UserID+" не найдена.");
		Возврат Ложь;
	КонецЕсли;
КонецФункции

Функция GetAccountRoles(UsersID=Неопределено, Errors=Неопределено)
	СписокРолей = СоздатьПустойТипIDM("ListOfRolesByAccounts");	
	Errors = СоздатьПустойТипIDM("ListOfErrors");	
	Если Не ЗначениеЗаполнено(UsersID.UserID) Тогда
		СписокИД = Новый Массив;
		Выборка = Справочники.NSI_УЗIDM.Выбрать();
		Пока Выборка.Следующий() Цикл
			СписокИД.Добавить(Выборка.UserID);
		КонецЦикла;
	Иначе
		СписокИД = UsersID.UserID;	
	КонецЕсли;
	Для Каждого UserID Из СписокИД Цикл
		АккаунтРоли = СоздатьПустойТипIDM("RolesByAccount", Errors);
		УЗ = Справочники.NSI_УЗIDM.НайтиПоРеквизиту("UserID", UserID);
		Если ЗначениеЗаполнено(УЗ.Ссылка) Тогда
			АккаунтРоли.ID_User = УЗ.UserID;
			Роли = СоздатьПустойТипIDM("ListOfRoles");
			РолиИДМ = УЗ.РолиIDM.Выгрузить();
			РолиИДМ.Свернуть("РольIDM");
			Для Каждого Роль Из РолиИДМ Цикл
				Если ЗначениеЗаполнено(Роль.РольIDM) Тогда
					Роли.Roles.Добавить(ПолучитьХДТОРоль(Роль.РольIDM));
				КонецЕсли;
			КонецЦикла;
			АккаунтРоли.ListOfRoles = Роли;
			СписокРолей.RolesByAccounts.Добавить(АккаунтРоли);
		Иначе
			Errors = ЗаполнитьОшибки(1, "Учетная запись с UserID = "+UserID+" не найдена.", Errors);
		КонецЕсли;
	КонецЦикла;
	Возврат СписокРолей;
КонецФункции
	
Функция СоздатьПустойТипIDM(ИмяТипа, Errors=Неопределено)
	Попытка
		Возврат ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("idm", ИмяТипа));
	Исключение
		Errors = ЗаполнитьОшибки(3, "Не удалось сериализовать тип "+ИмяТипа);
	КонецПопытки
КонецФункции 

Функция ПолучитьХДТОАккаунт(УЗ, Account=Неопределено)
	Если Account = Неопределено Тогда
		Account = СоздатьПустойТипIDM("Account");
	КонецЕсли;
	Account.UserID = УЗ.UserID;
	Account.Family = УЗ.Фамилия;
	Account.Name = УЗ.Имя;
	Account.Otchestvo = УЗ.Отчество;
	Account.Position = УЗ.Должность;
	Account.Division = УЗ.Подразделение;
	Account.DateOfChange = УЗ.ДатаПоследнегоИзменения;
	Account.AccountName = УЗ.Наименование;
	Account.Status = ?(УЗ.Статус=Перечисления.NSI_СтатусыУЗ.Активна, "Active", "Inactive");
	УЗID_SMP = УЗ.ID_SMP;
	Пока СтрДлина(УЗID_SMP)<9 Цикл
		УЗID_SMP = " "+УЗID_SMP;
	КонецЦикла;
	Account.ID_SMP = УЗID_SMP;
	Account.LoginAD = УЗ.LoginAD;
	Account.Technical = УЗ.Техническая;
	Возврат Account;
КонецФункции

Функция ПолучитьХДТОРоль(Роль, Role=Неопределено)
	Если Role = Неопределено Тогда
		Role = СоздатьПустойТипIDM("Role");
	КонецЕсли;
	Role.RoleID = Строка(Роль.Ссылка.УникальныйИдентификатор());
	Role.Name =  Роль.Наименование;
	Role.BaseID = Строка(Роль.ОсновнаяИБ.УникальныйИдентификатор());
	Role.Description = Роль.Описание;
	Возврат Role;
КонецФункции


Функция GetListOfAccounts(Errors=Неопределено)
	Выборка = Справочники.NSI_УЗIDM.Выбрать();
	СписокПользователей = СоздатьПустойТипIDM("ListOfAccounts");		
	Пока Выборка.Следующий() Цикл
		СписокПользователей.Account.Добавить(ПолучитьХДТОАккаунт(Выборка.Ссылка));
	КонецЦикла;
	Возврат СписокПользователей;
КонецФункции


Функция GetAccountDataByExtGuid(BaseName, UserGUID)
	Запрос = Новый Запрос("ВЫБРАТЬ
	                       |	УЗIDMУЗВИБ.Ссылка
	                       |ИЗ
	                       |	Справочник.NSI_УЗIDM.УЗВИБ КАК УЗIDMУЗВИБ
	                       |ГДЕ
	                       |	УЗIDMУЗВИБ.УЗВИБ.ИДПользователя = &ИДПользователя
	                       |	И УЗIDMУЗВИБ.УЗВИБ.Владелец.ИмяБазы = &ИмяБазы");
	Запрос.УстановитьПараметр("ИДПользователя", UserGUID);
	Запрос.УстановитьПараметр("ИмяБазы", BaseName);
	Выборка = Запрос.Выполнить().Выбрать();
	СписокПользователей = СоздатьПустойТипIDM("ListOfAccounts");	
	Пока Выборка.Следующий() Цикл
		СписокПользователей.Account.Добавить(ПолучитьХДТОАккаунт(Выборка.Ссылка));
	КонецЦикла;
	Возврат СписокПользователей;
КонецФункции


Функция SetRolesAccounts(ListOfChangeRolesAccounts, Errors)
	Возврат NSI_РаботаСПользователями.ИзменитьСписокРолейПользователейИДМ(ListOfChangeRolesAccounts, Errors);
КонецФункции
