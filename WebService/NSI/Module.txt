
//Функция GetDataByRule(RuleName, BaseName, Parameters)
//	Возврат NSI_ОбщиеПроцедуры.ВыполнитьЗапросКБазеПоПравилу(RuleName, BaseName, Parameters);		
//КонецФункции

Функция GetConnectionString(BaseName)
	Возврат NSI_МодульПовторногоИспользования.ПолучитьСтруктуруПодключения(BaseName);
КонецФункции

Функция SubscribeToEvent(BaseName, EventName, SourceBase)
	БазаПодписчик = NSI_МодульПовторногоИспользования.ПолучитьСсылкуИБПоИмениБазы(BaseName);
	БазаИсточник = NSI_МодульПовторногоИспользования.ПолучитьСсылкуИБПоИмениБазы(SourceBase);
	Событие = NSI_МодульПовторногоИспользования.ПолучитьСобытиеПоИмени(EventName);
	НоваяПодписка = РегистрыСведений.NSI_ПодпискиНаСобытия.СоздатьМенеджерЗаписи();
	НоваяПодписка.БазаПодписчик = БазаПодписчик;
	НоваяПодписка.Событие = Событие;
	НоваяПодписка.БазаИсточник = БазаИсточник;
	НоваяПодписка.Записать(Истина);
	Возврат Истина;
КонецФункции

Функция CreateEvent(BaseName, EventName, Parameters)
	Попытка
		БазаИсточник = Справочники.NSI_СписокВИБ.НайтиПоРеквизиту("ИмяБазы", BaseName);
		Событие = NSI_МодульПовторногоИспользования.ПолучитьСобытиеПоИмени(EventName);
		Параметры = СериализаторXDTO.ПрочитатьXDTO(Parameters);
		Если Не Событие.Пустая() Тогда
			НаборПодписок = РегистрыСведений.NSI_ПодпискиНаСобытия.СоздатьНаборЗаписей();
			НаборПодписок.Отбор.Событие.Установить(Событие);
			НаборПодписок.Прочитать();
			Для Каждого Подписка Из НаборПодписок Цикл
				Если Не Подписка.БазаИсточник.Пустая() И Не Подписка.БазаИсточник = БазаИсточник Тогда
					Продолжить;
				КонецЕсли;
				NSI_ОбщиеПроцедуры.ПослатьСобытиеВнешнейБазе(Подписка.БазаПодписчик.ИмяБазы, БазаИсточник.ИмяБазы, Событие, Параметры);
			КонецЦикла;
			Попытка                            
				МассивПараметров = Новый Массив;
				МассивПараметров.Добавить(Неопределено);
				ФоновыеЗадания.Выполнить("NSI_ОбщиеПроцедуры.ОтправитьОповещенияОСобытиях", МассивПараметров);
			Исключение
			КонецПопытки
		Иначе
			Возврат Ложь;
		КонецЕсли;
		Возврат Истина;
	Исключение
		Возврат Ложь;
	КонецПопытки		
КонецФункции

Функция CreateEventStorage(Base, EventName, Parameters)
	Попытка
		БазаИсточник = Справочники.NSI_СписокВИБ.НайтиПоРеквизиту("ИмяБазы", Base);
		Событие = NSI_МодульПовторногоИспользования.ПолучитьСобытиеПоИмени(EventName);
		Параметры = СериализаторXDTO.ПрочитатьXDTO(Parameters);
		Если Не Событие.Пустая() Тогда
			НаборПодписок = РегистрыСведений.NSI_ПодпискиНаСобытия.СоздатьНаборЗаписей();
			НаборПодписок.Отбор.Событие.Установить(Событие);
			НаборПодписок.Прочитать();
			Для Каждого Подписка Из НаборПодписок Цикл
				Если Не Подписка.БазаИсточник.Пустая() И Не Подписка.БазаИсточник = БазаИсточник Тогда
					Продолжить;
				КонецЕсли;
				СобытиеКОтправке = Справочники.NSI_СобытияКОтправке.СоздатьЭлемент();
				СобытиеКОтправке.БазаИсточник = БазаИсточник;
				СобытиеКОтправке.БазаПолучатель = Подписка.БазаПодписчик;
				СобытиеКОтправке.Событие = Событие;
				СобытиеКОтправке.Параметры = Параметры;
				СобытиеКОтправке.Записать();
			КонецЦикла;
			Попытка                            
				МассивПараметров = Новый Массив;
				МассивПараметров.Добавить(Неопределено);
				ФоновыеЗадания.Выполнить("NSI_ОбщиеПроцедуры.ОтправитьОповещенияОСобытиях", МассивПараметров);
			Исключение
			КонецПопытки
		Иначе
			Возврат Ложь;
		КонецЕсли;
		Возврат Истина;
	Исключение
		Возврат Ложь;
	КонецПопытки		
КонецФункции

Функция GetMappingByRef(BaseSource, BaseTarget, GUIDS, MapRuleName)
	БазаПриемник = Справочники.NSI_СписокВИБ.НайтиПоРеквизиту("ИмяБазы", BaseTarget);
	БазаИсточник = Справочники.NSI_СписокВИБ.НайтиПоРеквизиту("ИмяБазы", BaseSource);
	МассивУИ = СериализаторXDTO.ПрочитатьXDTO(GUIDS);
	ПравилоМаппинга = Справочники.NSI_ПравилаМаппинга.НайтиПоНаименованию(MapRuleName);
	СоответствияПоРучномуМаппингу = ПолучитьСписокСоответствийПоРучномуМаппингу(БазаПриемник, БазаИсточник, МассивУИ);
	Если Не ПравилоМаппинга.НеХранитьНайденныеСвязи И МассивУИ.Количество()>0 Тогда
		СоответствияПоАвтоматическомуМаппингу = ПолучитьСписокСоответствийПоАвтоматическомуМаппингу(ПравилоМаппинга, БазаИсточник, БазаПриемник, МассивУИ);	
	КонецЕсли;
	НайденныеСоотвествия = Новый Соответствие;
	Для Каждого Соответствие Из СоответствияПоРучномуМаппингу Цикл
		НайденныеСоотвествия.Вставить(Соответствие.Ключ, Соответствие.Значение);
	КонецЦикла;
	Для Каждого Соответствие Из СоответствияПоАвтоматическомуМаппингу Цикл
		НайденныеСоотвествия.Вставить(Соответствие.Ключ, Соответствие.Значение);
	КонецЦикла;
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("СоответствияПоРучномуМаппингу", СоответствияПоРучномуМаппингу);
	СтруктураВозврата.Вставить("СоответствияПоАвтоматическомуМаппингу", СоответствияПоАвтоматическомуМаппингу);
	СтруктураВозврата.Вставить("ВсеНайденные", НайденныеСоотвествия);
	СтруктураВозврата.Вставить("НеНайденные", МассивУИ);
	СтруктураВозврата.Вставить("СписокТребуемыхПараметров", ПравилоМаппинга.ПакетПреобразования.СписокПараметров.Получить());
	Возврат СериализаторXDTO.ЗаписатьXDTO(Новый ХранилищеЗначения(СтруктураВозврата, Новый СжатиеДанных(9)));
КонецФункции

Функция ПолучитьСписокСоответствийПоРучномуМаппингу(БазаИсточник, БазаПриемник, МассивУИ)
	НайденныеСоответствия = Новый Соответствие;
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	РучнойМаппингОбъектов.ИДИсточника,
	                      |	РучнойМаппингОбъектов.ИДПриемника
	                      |ИЗ
	                      |	РегистрСведений.NSI_РучнойМаппингОбъектов КАК РучнойМаппингОбъектов
	                      |ГДЕ
	                      |	РучнойМаппингОбъектов.НастройкаМаппинга.БазаИсточник = &БазаИсточник
	                      |	И РучнойМаппингОбъектов.НастройкаМаппинга.БазаПриемник = &БазаПриемник");
	Запрос.УстановитьПараметр("БазаИсточник", БазаИсточник);
	Запрос.УстановитьПараметр("БазаПриемник", БазаПриемник);
	ТЗ = Запрос.Выполнить().Выгрузить();
	Для Каждого СтрокаТаб Из ТЗ Цикл
		НомерУИВМассиве = МассивУИ.Найти(СтрокаТаб.ИДИсточника);
		Если Не НомерУИВМассиве=Неопределено Тогда
			МассивУИ.Удалить(НомерУИВМассиве);
		КонецЕсли;
		НайденныеСоответствия.Вставить(СтрокаТаб.ИДИсточника, СтрокаТаб.ИДПриемника);
	КонецЦикла;
	Возврат НайденныеСоответствия;
КонецФункции
					  
Функция ПолучитьСписокСоответствийПоАвтоматическомуМаппингу(ПравилоМаппинга, БазаИсточник, БазаПриемник, МассивУИ)
	НайденныеСоответствия = Новый Соответствие;
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	РучнойМаппингОбъектов.ИДИсточника,
	                      |	РучнойМаппингОбъектов.ИДПриемника
	                      |ИЗ
	                      |	РегистрСведений.NSI_РучнойМаппингОбъектов КАК РучнойМаппингОбъектов
	                      |ГДЕ
	                      |	РучнойМаппингОбъектов.НастройкаМаппинга.БазаИсточник = &БазаИсточник
	                      |	И РучнойМаппингОбъектов.НастройкаМаппинга.БазаПриемник = &БазаПриемник
	                      |	И РучнойМаппингОбъектов.НастройкаМаппинга.ПравилоМаппинга = &ПравилоМаппинга");
	Запрос.УстановитьПараметр("БазаИсточник", БазаИсточник);
	Запрос.УстановитьПараметр("БазаПриемник", БазаПриемник);
	Запрос.УстановитьПараметр("ПравилоМаппинга", ПравилоМаппинга);
	ТЗ = Запрос.Выполнить().Выгрузить();
	Для Каждого СтрокаТаб Из ТЗ Цикл
		НомерУИВМассиве = МассивУИ.Найти(СтрокаТаб.ИДИсточника);
		Если Не НомерУИВМассиве=Неопределено Тогда
			МассивУИ.Удалить(НомерУИВМассиве);
		КонецЕсли;
	КонецЦикла;
	Возврат НайденныеСоответствия;	
КонецФункции

Функция GetMappingByStructure(BaseSource, BaseTarget, Rule, Parameters)

КонецФункции

Функция NOP()
	Возврат Истина;
КонецФункции

Функция RunAsyncJob(BaseName, JobName, Parameters)
	СписокИДВозвращаемыхТикетов = Новый Массив;
	БазаИсточник = NSI_МодульПовторногоИспользования.ПолучитьСсылкуИБПоИмениБазы(BaseName);
	Если БазаИсточник = Неопределено Тогда
		Возврат "Не найдена база";
	КонецЕсли;
	Пакет = Справочники.NSI_ПакетыПравилАсинхроннойРаботы.НайтиПоНаименованию(JobName);
	ИДПакета = Новый УникальныйИдентификатор();
	ПервыйТикет = Неопределено;
	Тикет = Неопределено;
	Если ЗначениеЗаполнено(Пакет) Тогда
		Для Каждого Правило Из Пакет.Правила Цикл
			Тикет = Справочники.NSI_ТикетыАсинхроннойПередачи.СоздатьЭлемент();
			Тикет.БазаИсточник = БазаИсточник;
			Тикет.Пакет = Пакет;
			Тикет.Порядок = Правило.Порядок;
			Тикет.Правило = Правило.Правило;
			Тикет.ДатаСозданияТикета = ТекущаяДата();
			Тикет.ВходныеПараметры = СериализаторXDTO.ПрочитатьXDTO(Parameters);
			Тикет.ВозвращаетЗначение = Правило.ВозвращаетЗначение;
			Тикет.ИДПакета = ИДПакета;
			Тикет.Записать();
			Если ПервыйТикет = Неопределено Тогда ПервыйТикет = Тикет.Ссылка; КонецЕсли;
			Если Правило.ВозвращаетЗначение Тогда
				СписокИДВозвращаемыхТикетов.Добавить(Строка(Тикет.Ссылка.УникальныйИдентификатор()));
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	МассивПараметров = Новый Массив;
	МассивПараметров.Добавить(Пакет);
	МассивПараметров.Добавить(ПервыйТикет);
	МассивПараметров.Добавить(Неопределено);
	ФоновыеЗадания.Выполнить("NSI_ОбщиеПроцедуры.ВыполнитьТикетПоПравилу", МассивПараметров);
	Возврат СериализаторXDTO.ЗаписатьXDTO(СписокИДВозвращаемыхТикетов);
КонецФункции

Функция AddRecordOfChanges(BaseName, Description, DateOfChange, TypeRef, IDRef, DataBefore, DataAfter, DataChange, Author, Computer)
	База = NSI_МодульПовторногоИспользования.ПолучитьСсылкуИБПоИмениБазы(BaseName);
	Если Не База.ХранитьИзмененияРеквизитовПоБазе Тогда
		Возврат Истина;
	КонецЕсли;
	НоваяЗапись							= Справочники.NSI_ИзмененияОбъектовВнешнихБаз.СоздатьЭлемент();
	НоваяЗапись.ВнешняяБаза				= База;
	НоваяЗапись.Наименование			= "Изменение "+Description+" от "+DateOfChange;
	НоваяЗапись.ДатаИзменения			= DateOfChange;
	НоваяЗапись.ТипСсылки				= TypeRef;
	НоваяЗапись.ИДСсылки				= IDRef;
	НоваяЗапись.ДанныеДоИзменения		= DataBefore;
	НоваяЗапись.ДанныеПослеИзменения	= DataAfter;
	НоваяЗапись.СтруктураИзменений		= DataChange;
	НоваяЗапись.Автор					= Author;
	НоваяЗапись.Компьютер				= Computer;
	НоваяЗапись.Записать();
КонецФункции

Функция NotifyAboutChanges(BaseName, TypeRef, IDRef)
	База = NSI_МодульПовторногоИспользования.ПолучитьСсылкуИБПоИмениБазы(BaseName);
	//NSI_ОбщиеПроцедуры.ОбработатьПравилаОповещения(База, TypeRef, IDRef);
	МассивПараметров = Новый Массив;
	МассивПараметров.Добавить(База);
	МассивПараметров.Добавить(TypeRef);
	МассивПараметров.Добавить(IDRef);
	ФоновыеЗадания.Выполнить("NSI_ОбщиеПроцедуры.ОбработатьПравилаОповещения", МассивПараметров)
КонецФункции

Функция GetRecordsOfChanges(BaseName, TypeRef, IDRef, Requisites, DateBegin, DateEnd)
	База = NSI_МодульПовторногоИспользования.ПолучитьСсылкуИБПоИмениБазы(BaseName);
	Если ТипЗнч(Requisites)=Тип("ОбъектXDTO") Тогда
		Реквизиты = СериализаторXDTO.ПрочитатьXDTO(Requisites);
	Иначе
		Реквизиты = Requisites;
	КонецЕсли;
	ДатаНачала = ?(ЗначениеЗаполнено(DateBegin), DateBegin, '00010101');
	ДатаОкончания = ?(ЗначениеЗаполнено(DateBegin), DateEnd, '30000101');
	Возврат СериализаторXDTO.ЗаписатьXDTO(Новый ХранилищеЗначения(NSI_ОбщиеПроцедуры.ПолучитьДанныеПоИзменениямРеквизитовВоВнешнейБазе(База, TypeRef, IDRef, Реквизиты, ДатаНачала, ДатаОкончания), Новый СжатиеДанных(9)));
КонецФункции

Функция UnsubscribeEvent(BaseName, EventName)
	НаборПодписок = РегистрыСведений.NSI_ПодпискиНаСобытия.СоздатьНаборЗаписей();
	База = NSI_МодульПовторногоИспользования.ПолучитьСсылкуИБПоИмениБазы(BaseName);
	Если Не ЗначениеЗаполнено(База) Тогда
		Возврат Ложь;
	КонецЕсли;
	НаборПодписок.Отбор.БазаПодписчик.Установить(База);
	Если ЗначениеЗаполнено(EventName) Тогда
		Событие = Справочники.NSI_СобытияОповещений.НайтиПоНаименованию(EventName);
		Если Не Событие.Пустая() Тогда
			НаборПодписок.Отбор.Событие.Установить(Событие);
		КонецЕсли;
	КонецЕсли;
	НаборПодписок.Очистить();
	НаборПодписок.Записать();
	Возврат Истина;
КонецФункции

Функция AddRecordOfReportsJob(Base, DateOfReport, ReportName, Author, Computer, ParametersReport, SelectionsReport, RawSettings, FormName, ParametersForm, Command="", SettingsName)
	База = NSI_МодульПовторногоИспользования.ПолучитьСсылкуИБПоИмениБазы(Base);
	Если Не База.ЛогироватьВыполнениеОтчетов Тогда
		Возврат Истина;
	КонецЕсли;
	НоваяЗапись = Справочники.NSI_ЛогированиеФормированияОтчетов.СоздатьЭлемент();
	НоваяЗапись.ВнешняяБаза = База;
	НоваяЗапись.ДатаФормирования = DateOfReport;
	НоваяЗапись.ИмяОтчета = ReportName;
	НоваяЗапись.СписокПараметровОтчета = ParametersReport;
	НоваяЗапись.СписокОтборовОтчета = SelectionsReport;
	НоваяЗапись.Пользователь = Author;
	НоваяЗапись.Компьютер = Computer;
	НоваяЗапись.ХранилищеНеобработанныхНастроек = RawSettings;
	НоваяЗапись.ФормаОтчета = FormName;
	НоваяЗапись.ПараметрыФормы = ParametersForm;
	НоваяЗапись.КомандаПриОткрытии = Command;
	НоваяЗапись.ИмяОбъектаНастройки = SettingsName;
	НоваяЗапись.Записать();
	Возврат "ОК";
КонецФункции

Функция GetHistory(BaseName, ArrayRefID, Requisites, DateBegin='00010101', DateEnd='30010101', 
						Author=Неопределено, Computer=Неопределено, PeriodStep="Все")
	База = NSI_МодульПовторногоИспользования.ПолучитьСсылкуИБПоИмениБазы(BaseName);
	Если ТипЗнч(Requisites)=Тип("ОбъектXDTO") Тогда
		Реквизиты = СериализаторXDTO.ПрочитатьXDTO(Requisites);
	Иначе
		Реквизиты = Requisites;
	КонецЕсли;
	Если ТипЗнч(ArrayRefID)=Тип("ОбъектXDTO") Тогда
		МассивСсылок = СериализаторXDTO.ПрочитатьXDTO(ArrayRefID);
	Иначе
		МассивСсылок = ArrayRefID;
	КонецЕсли;
	Возврат СериализаторXDTO.ЗаписатьXDTO(Новый ХранилищеЗначения(
		NSI_ОбщиеПроцедуры.ПолучитьИсториюИзмененийВоВнешнейБазе(База, МассивСсылок, Реквизиты, 
								DateBegin, DateEnd, Author, Computer, PeriodStep), Новый СжатиеДанных(9)));	
КонецФункции

Функция Translate(Base, WordList, UseOnlineDictionaries)
	Возврат NSI_РаботаСПереводом.ПеревестиСтрокиСервиса(Base, WordList, UseOnlineDictionaries);		
КонецФункции

Функция GetBaseNames(TypeBase, TestBaseInclude)
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	СписокИБ.ИмяБазы
	                      |ИЗ
	                      |	Справочник.NSI_СписокВИБ КАК СписокИБ
	                      |ГДЕ
	                      |	СписокИБ.ИмяХранилища = &ИмяХранилища
	                      |	И (СписокИБ.Тестовая = &Тестовая
	                      |			ИЛИ &Тестовая = Истина)");
	Запрос.УстановитьПараметр("ИмяХранилища", Перечисления.NSI_ИменаХранилищИБ[TypeBase]);
	Запрос.УстановитьПараметр("Тестовая", TestBaseInclude);
	Возврат СериализаторXDTO.ЗаписатьXDTO(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ИмяБазы"));
КонецФункции

Функция GetAdditionReports(Base, UserID = "")
	Соответствие = Новый Соответствие;
	База = NSI_МодульПовторногоИспользования.ПолучитьСсылкуИБПоИмениБазы(Base);
	Если Не ЗначениеЗаполнено(База) Тогда
		ВызватьИсключение "База не найдена";
	КонецЕсли;
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ОбработкиДляВнешнихБаз.Ссылка
	                      |ИЗ
	                      |	Справочник.NSI_ОбработкиДляВнешнихБаз КАК ОбработкиДляВнешнихБаз");
	СписокДоступныхОбработок = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ
	                      |	ОбработкиДляВнешнихБаз.Ссылка
	                      |ИЗ
	                      |	Справочник.NSI_ОбработкиДляВнешнихБаз КАК ОбработкиДляВнешнихБаз
	                      |ГДЕ
	                      |	ОбработкиДляВнешнихБаз.Ссылка В (&СписокДоступныхОбработок)
	                      |
	                      |СГРУППИРОВАТЬ ПО
	                      |	ОбработкиДляВнешнихБаз.Ссылка
	                      |
	                      |ИМЕЮЩИЕ
	                      |	КОЛИЧЕСТВО(ОбработкиДляВнешнихБаз.ТолькоДляХранилищ.НомерСтроки) = 0
	                      |
	                      |ОБЪЕДИНИТЬ
	                      |
	                      |ВЫБРАТЬ
	                      |	ОбработкиДляВнешнихБазТолькоДляХранилищ.Ссылка
	                      |ИЗ
	                      |	Справочник.NSI_ОбработкиДляВнешнихБаз.ТолькоДляХранилищ КАК ОбработкиДляВнешнихБазТолькоДляХранилищ
	                      |ГДЕ
	                      |	ОбработкиДляВнешнихБазТолькоДляХранилищ.ИмяХранилищаИБ = &ИмяХранилищаИБ
	                      |	И ОбработкиДляВнешнихБазТолькоДляХранилищ.Ссылка В (&СписокДоступныхОбработок)");
	Запрос.УстановитьПараметр("СписокДоступныхОбработок", СписокДоступныхОбработок);
	Запрос.УстановитьПараметр("ИмяХранилищаИБ", База.ИмяХранилища);
	СписокДоступныхОбработок = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ
	                      |	ОбработкиДляВнешнихБаз.Ссылка
	                      |ИЗ
	                      |	Справочник.NSI_ОбработкиДляВнешнихБаз КАК ОбработкиДляВнешнихБаз
	                      |ГДЕ
	                      |	ОбработкиДляВнешнихБаз.Ссылка В(&СписокДоступныхОбработок)
	                      |
	                      |СГРУППИРОВАТЬ ПО
	                      |	ОбработкиДляВнешнихБаз.Ссылка
	                      |
	                      |ИМЕЮЩИЕ
	                      |	КОЛИЧЕСТВО(ОбработкиДляВнешнихБаз.ТолькоДляБаз.НомерСтроки) = 0
	                      |
	                      |ОБЪЕДИНИТЬ
	                      |
	                      |ВЫБРАТЬ
	                      |	ОбработкиДляВнешнихБазТолькоДляБаз.Ссылка
	                      |ИЗ
	                      |	Справочник.NSI_ОбработкиДляВнешнихБаз.ТолькоДляБаз КАК ОбработкиДляВнешнихБазТолькоДляБаз
	                      |ГДЕ
	                      |	ОбработкиДляВнешнихБазТолькоДляБаз.Ссылка В(&СписокДоступныхОбработок)
	                      |	И ОбработкиДляВнешнихБазТолькоДляБаз.База = &База");
	Запрос.УстановитьПараметр("СписокДоступныхОбработок", СписокДоступныхОбработок);
	Запрос.УстановитьПараметр("База", База);
	СписокДоступныхОбработок = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	ЗапросДоступныхПользователейИДМ = Новый Запрос("ВЫБРАТЬ
	                                               |	УЗIDMУЗВИБ.Ссылка
	                                               |ИЗ
	                                               |	Справочник.NSI_УЗIDM.УЗВИБ КАК УЗIDMУЗВИБ
	                                               |ГДЕ
	                                               |	УЗIDMУЗВИБ.УЗВИБ.УникальныйИдентификатор = &УникальныйИдентификатор
	                                               |	И УЗIDMУЗВИБ.УЗВИБ.Владелец = &База");
	ЗапросДоступныхПользователейИДМ.УстановитьПараметр("База", База);
	ЗапросДоступныхПользователейИДМ.УстановитьПараметр("УникальныйИдентификатор", UserID);
	СписокДоступныхПользователейИДМ = ЗапросДоступныхПользователейИДМ.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ
	                      |	ОбработкиДляВнешнихБаз.Ссылка
	                      |ИЗ
	                      |	Справочник.NSI_ОбработкиДляВнешнихБаз КАК ОбработкиДляВнешнихБаз
	                      |ГДЕ
	                      |	ОбработкиДляВнешнихБаз.Ссылка В(&СписокДоступныхОбработок)
	                      |
	                      |СГРУППИРОВАТЬ ПО
	                      |	ОбработкиДляВнешнихБаз.Ссылка
	                      |
	                      |ИМЕЮЩИЕ
	                      |	КОЛИЧЕСТВО(ОбработкиДляВнешнихБаз.ТолькоДляПользователей.НомерСтроки) = 0
	                      |
	                      |ОБЪЕДИНИТЬ
	                      |
	                      |ВЫБРАТЬ
	                      |	ОбработкиДляВнешнихБазТолькоДляПользователей.Ссылка
	                      |ИЗ
	                      |	Справочник.NSI_ОбработкиДляВнешнихБаз.ТолькоДляПользователей КАК ОбработкиДляВнешнихБазТолькоДляПользователей
	                      |ГДЕ
	                      |	ОбработкиДляВнешнихБазТолькоДляПользователей.Ссылка В(&СписокДоступныхОбработок)
	                      |	И ОбработкиДляВнешнихБазТолькоДляПользователей.Пользователь В(&СписокПользователей)");
	Запрос.УстановитьПараметр("СписокДоступныхОбработок", СписокДоступныхОбработок);
	Запрос.УстановитьПараметр("СписокПользователей", СписокДоступныхПользователейИДМ);	
	СписокДоступныхОбработок = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	УЗIDMРолиIDM.РольIDM
	                      |ИЗ
	                      |	Справочник.NSI_УЗIDM.РолиIDM КАК УЗIDMРолиIDM
	                      |ГДЕ
	                      |	УЗIDMРолиIDM.Ссылка В(&СписокУЗПользователей)");
	Запрос.УстановитьПараметр("СписокУЗПользователей", СписокДоступныхПользователейИДМ);
	СписокДоступныхРолей = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("РольIDM");
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ
                      |	ОбработкиДляВнешнихБаз.Ссылка
                      |ИЗ
                      |	Справочник.NSI_ОбработкиДляВнешнихБаз КАК ОбработкиДляВнешнихБаз
                      |ГДЕ
                      |	ОбработкиДляВнешнихБаз.Ссылка В(&СписокДоступныхОбработок)
                      |
                      |СГРУППИРОВАТЬ ПО
                      |	ОбработкиДляВнешнихБаз.Ссылка
                      |
                      |ИМЕЮЩИЕ
                      |	КОЛИЧЕСТВО(ОбработкиДляВнешнихБаз.ТолькоДляРолей.НомерСтроки) = 0
                      |
                      |ОБЪЕДИНИТЬ
                      |
                      |ВЫБРАТЬ
                      |	ОбработкиДляВнешнихБазТолькоДляРолей.Ссылка
                      |ИЗ
                      |	Справочник.NSI_ОбработкиДляВнешнихБаз.ТолькоДляРолей КАК ОбработкиДляВнешнихБазТолькоДляРолей
                      |ГДЕ
                      |	ОбработкиДляВнешнихБазТолькоДляРолей.Ссылка В(&СписокДоступныхОбработок)
                      |	И ОбработкиДляВнешнихБазТолькоДляРолей.Роль В(&СписокРолей)");
	Запрос.УстановитьПараметр("СписокДоступныхОбработок", СписокДоступныхОбработок);
	Запрос.УстановитьПараметр("СписокРолей", СписокДоступныхРолей);	
	СписокДоступныхОбработок = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	Для Каждого Строк Из СписокДоступныхОбработок Цикл
		Соответствие.Вставить(Строка(Строк.Ссылка), Строка(Строк.Ссылка.УникальныйИдентификатор()));
	КонецЦикла;
	Возврат СериализаторXDTO.ЗаписатьXDTO(Соответствие);
КонецФункции

Функция GetAdditionReport(UID)
	Ссылка = Справочники.ОбработкиДляВнешнихБаз.ПолучитьСсылку(Новый УникальныйИдентификатор(UID));
	Если Найти(Строка(Ссылка), "<Объект не найден>")>0 Тогда
		ВызватьИсключение "Указанная ссылка на отчет не найдена";
	КонецЕсли;
	СтруктураОтвета = Новый Структура;
	СтруктураОтвета.Вставить("ИмяПроцедуры", Ссылка.ПолноеНаименование());
	СписокФайлов = Новый ТаблицаЗначений;
	СписокФайлов.Колонки.Добавить("ИмяФайла", Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(100)));
	СписокФайлов.Колонки.Добавить("РасширениеФайла", Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(5)));
	СписокФайлов.Колонки.Добавить("Значение", Новый ОписаниеТипов("ДвоичныеДанные"));
	МассивФайлов = Новый Массив;
	ПрисоединенныеФайлы.ПолучитьПрикрепленныеФайлыКОбъекту(Ссылка, МассивФайлов);
	Для Каждого Файл Из МассивФайлов Цикл
		ФайлДвоичныеДанные = ПрисоединенныеФайлы.ПолучитьДвоичныеДанныеФайла(Файл);
		Строк = СписокФайлов.Добавить();
		Строк.Значение = ФайлДвоичныеДанные;
		Строк.ИмяФайла = Файл.Наименование;
		Строк.РасширениеФайла = Файл.Расширение;
	КонецЦикла;
	СтруктураОтвета.Вставить("Файлы", СписокФайлов);
	Возврат СериализаторXDTO.ЗаписатьXDTO(Новый ХранилищеЗначения(СтруктураОтвета, Новый СжатиеДанных(9)));
КонецФункции

Функция ExecReportOnExternalBase(TypeBase, ArrayOfBases, ReportID, FunctionName, Parameters)
	Если Не ЗначениеЗаполнено(ArrayOfBases) Тогда
		Запрос = Новый Запрос("ВЫБРАТЬ
		                      |	СписокИБ.ИмяБазы
		                      |ИЗ
		                      |	Справочник.NSI_СписокВИБ КАК СписокИБ
		                      |ГДЕ
		                      |	СписокИБ.ИмяХранилища = &ИмяХранилища
		                      |
		                      |СГРУППИРОВАТЬ ПО
		                      |	СписокИБ.ИмяБазы");
						  //|	И (СписокИБ.Тестовая = &Тестовая
						  //|			ИЛИ &Тестовая = Истина)");
		Запрос.УстановитьПараметр("ИмяХранилища", Перечисления.NSI_ИменаХранилищИБ[TypeBase]);
		//Запрос.УстановитьПараметр("Тестовая", TestBaseInclude);
		МассивБаз = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ИмяБазы");
	Иначе
		МассивБаз = ArrayOfBases;
	КонецЕсли;
	Для Каждого ИмяБазы Из МассивБаз Цикл
		Если ТипЗнч(Parameters) = Тип("ОбъектXDTO") Тогда
			Parameters = Parameters;
		Иначе 
			Parameters = СериализаторXDTO.ЗаписатьXDTO(Parameters);
		КонецЕсли;
		Connector = NSI_МодульПовторногоИспользования.ПолучитьСоединениеПоИмениБазы(ИмяБазы);
		Если Connector = Неопределено Тогда
			Возврат Неопределено;
		Иначе
			Попытка
				XDTOОтвет = Connector.ExecExtReport(GetAdditionReport(ReportID), FunctionName, Parameters);
			Исключение
				ВызватьИсключение ОписаниеОшибки();
			КонецПопытки;
			Возврат XDTOОтвет;
		КонецЕсли;
	КонецЦикла;
КонецФункции

Функция RunFunctionStorage(BaseName, FunctionName, Parameters)
	Возврат NSI_ОбщиеПроцедуры.ВыполнитьПроизвольнуюФункциюВБазеХранилище(BaseName, FunctionName, Parameters);
КонецФункции

Функция GetDataByRuleStorage(BaseName, RuleName, Parameters)
	Возврат NSI_ОбщиеПроцедуры.ВыполнитьЗапросКБазеПоПравилуЧерезХранилище(RuleName, BaseName, Parameters);
КонецФункции


Функция GetStandardQueryStorage(BaseName, StdFunctionName, ParamsArray)
	Попытка
		МассивПараметров = СериализаторXDTO.ПрочитатьXDTO(ParamsArray);
		ТаблицаРезультата = NSI_РаботаСАДО.ВыполнитьПредопределеннуюФункциюOracle(BaseName, ПредопределенноеЗначение("Перечисление.NSI_ПредопределенныеФункцииOracle."+StdFunctionName), МассивПараметров);
		Возврат Новый ХранилищеЗначения(ТаблицаРезультата, Новый СжатиеДанных(9));
	Исключение
		ВызватьИсключение ОписаниеОшибки();
	КонецПопытки;	
КонецФункции


Функция GetQueryStorage(BaseName, QueryType, QueryText, Parameters)
	Возврат СериализаторXDTO.ЗаписатьXDTO(NSI_РаботаСАДО.ВыполнитьЗапросКБазе(BaseName, QueryType, QueryText,, Parameters));	
КонецФункции


Функция GetAllBasesTable()
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	СписокИБ.ИмяБазы,
	                      |	ПРЕДСТАВЛЕНИЕ(СписокИБ.ИмяХранилища) КАК ИмяХранилища,
	                      |	ВЫБОР
	                      |		КОГДА СписокИБ.ВидБД = ЗНАЧЕНИЕ(Перечисление.NSI_ВидыБД.Oracle)
	                      |			ТОГДА ""Oracle""
	                      |		ИНАЧЕ ""1С""
	                      |	КОНЕЦ КАК ВидБД,
	                      |	СписокИБ.Тестовая,
	                      |	СписокИБ.БазаРазработки,
	                      |	СписокИБ.Oracle_schema,
	                      |	СписокИБ.Oracle_user,
	                      |	СписокИБ.Oracle_password
	                      |ИЗ
	                      |	Справочник.NSI_СписокВИБ КАК СписокИБ
	                      |ГДЕ
	                      |	НЕ СписокИБ.ЭтоГруппа");
	Возврат СериализаторXDTO.ЗаписатьXDTO(Новый ХранилищеЗначения(Запрос.Выполнить().Выгрузить(), Новый СжатиеДанных(9)));
КонецФункции


Функция GetAsyncQueryStorage(BaseSource, BaseTarget, QueryType, QueryText, Parameters)
	БазаИсточник = NSI_МодульПовторногоИспользования.ПолучитьСсылкуИБПоИмениБазы(BaseSource);
	Если БазаИсточник = Неопределено Тогда
		ВызватьИсключение "Не найдена база-источник";
	КонецЕсли;
	ЦелеваяБаза = NSI_МодульПовторногоИспользования.ПолучитьСсылкуИБПоИмениБазы(BaseTarget);
	Если ЦелеваяБаза = Неопределено Тогда
		ВызватьИсключение "Не найдена база, где должен выполняться запрос";
	КонецЕсли;
	ИДПакета = Новый УникальныйИдентификатор();
	Тикет = Справочники.NSI_ТикетыАсинхроннойПередачи.СоздатьЭлемент();
	Тикет.БазаИсточник = БазаИсточник;
	Тикет.Порядок = 1;
	Тикет.Правило = QueryText;
	Тикет.ДатаСозданияТикета = ТекущаяДата();
	Тикет.ВходныеПараметры = Parameters;
	Тикет.ВозвращаетЗначение = Истина;
	Тикет.ИДПакета = ИДПакета;
	Тикет.ЦелеваяБаза = ЦелеваяБаза;
	Тикет.Записать();
	МассивПараметров = Новый Массив;
	МассивПараметров.Добавить(Тикет.Ссылка);
	МассивПараметров.Добавить(BaseTarget);
	МассивПараметров.Добавить(QueryType);
	МассивПараметров.Добавить(QueryText);
	МассивПараметров.Добавить(Parameters);
	ФоновыеЗадания.Выполнить("NSI_ОбщиеПроцедуры.ВыполнитьТикетЗапроса", МассивПараметров);
	Возврат Строка(Тикет.Ссылка.УникальныйИдентификатор());
КонецФункции


Функция GetContragentData(INN, KPP, RegNumber)
	Возврат NSI_РаботаСНСИ.ПолучитьДанныеКонтрагента(INN, KPP, RegNumber);
КонецФункции

