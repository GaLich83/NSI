//// СтандартныеПодсистемы.РаботаСКонтрагентами
//&НаКлиенте
//Перем ОтключитьЗаполнениеПоИНН;
//// Конец СтандартныеПодсистемы.РаботаСКонтрагентами

//#Область ОбработчикиСобытийФормы

//&НаСервере
//Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
//	
//	// СтандартныеПодсистемы.Печать
//	УправлениеПечатью.ПриСозданииНаСервере(ЭтаФорма);
//	// Конец СтандартныеПодсистемы.Печать
//	
//	// ДополнительныеОтчетыИОбработки
//	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтаФорма);
//	// Конец ДополнительныеОтчетыИОбработки
//	
//	// СтандартныеПодсистемы.ВерсионированиеОбъектов
//	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
//	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
//	
//	// Уведомим о появлении нового функционала
//	//НастройкиПредупреждений = ОбщегоНазначенияБП.НастройкиПредупрежденийОбИзменениях("ДокументыПоКонтрагенту, ИсторияКПП");
//	
//	// Обработчик подсистемы "Свойства"
//	УправлениеСвойствами.ПриСозданииНаСервере(ЭтаФорма, Объект, "ГруппаДополнительныеРеквизиты");
//	
//	ОткрытИзПлатежки = Параметры.Свойство("ОткрытИзПлатежки");
//	
//	РазместитьКонтактнуюИнформацию();
//	                                                    
//	Если Параметры.Ключ.Пустая() Тогда
//		
//		// СтандартныеПодсистемы.РаботаСКонтрагентами
//		ЗаполнитьРеквизитыПоТекстуЗаполнения(Параметры.ТекстЗаполнения);
//		// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
//		ПодготовитьФормуНаСервере();
//		
//	КонецЕсли;
//	
//	// СтандартныеПодсистемы.РаботаСКонтрагентами
//	ПроверкаКонтрагентов.ПриСозданииНаСервереКонтрагент(ЭтотОбъект, Параметры);
//	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
//	
//	УправлениеФормой(ЭтаФорма);
//	
//КонецПроцедуры

//&НаКлиенте
//Процедура ПриОткрытии(Отказ)
//	
//	ПодключитьОбработчикОжидания("Подключаемый_ПоказатьПредупреждениеОбИзменениях",0.1, Истина);
//	ПодключитьОбработчикОжидания("Подключаемый_ПоказатьПредложениеИспользоватьПроверкуКонтрагентов", 0.1, Истина);
//	
//	Если Не Объект.Ссылка.Пустая() И НастройкиПредупреждений.ДокументыПоКонтрагенту Тогда
//		ПодключитьОбработчикОжидания("Подключаемый_ПоказатьПредупреждениеОбИзмененияхДокументыПоКонтрагенту", 0.2, Истина);
//	КонецЕсли;
//	
//	Если Не Объект.Ссылка.Пустая() 
//		И ДоступноКПП(ЭтотОбъект)
//		И НастройкиПредупреждений.ИсторияКПП Тогда
//		ПодключитьОбработчикОжидания("Подключаемый_ПоказатьПредупреждениеОбИзмененияхИсторияКПП", 0.3, Истина);
//	КонецЕсли;
//	
//	Если ПроверкаКонтрагентовПоИННКППВозможна Тогда
//		// СтандартныеПодсистемы.РаботаСКонтрагентами
//		ПроверкаКонтрагентовКлиент.ПриОткрытииКонтрагент(ЭтотОбъект);
//		// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
//	КонецЕсли;
//	
//КонецПроцедуры

//&НаСервере
//Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
//	
//	УстановитьИННОбособленногоПодразделения(ТекущийОбъект);
//	
//	// СтандартныеПодсистемы.КонтактнаяИнформация
//	//УправлениеКонтактнойИнформациейБП.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
//	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
//	
//	// Обработчик подсистемы "Свойства"
//	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтаФорма, ТекущийОбъект);
//	
//	// СтандартныеПодсистемы.РаботаСКонтрагентами
//	ПроверкаКонтрагентов.ПередЗаписьюНаСервереКонтрагент(ЭтотОбъект, ТекущийОбъект);
//	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
//	
//	Если ДанныеКонтактногоЛица <> Неопределено Тогда
//		ТекущийОбъект.ДополнительныеСвойства.Вставить("ДанныеКонтактногоЛица", ДанныеКонтактногоЛица);
//	КонецЕсли;
//	
//	Если ДанныеРасчетногоСчета <> Неопределено Тогда
//		ТекущийОбъект.ДополнительныеСвойства.Вставить("ДанныеРасчетногоСчета", ДанныеРасчетногоСчета);
//	КонецЕсли;
//	
//КонецПроцедуры

//&НаСервере
//Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
//	
//	// СтандартныеПодсистемы.РаботаСКонтрагентами
//	ПроверкаКонтрагентов.ПередЗаписьюНаСервереКонтрагент(ЭтотОбъект, ТекущийОбъект);
//	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
//	
//	Если ТекущийОбъект.ДополнительныеСвойства.Свойство("ДанныеКонтактногоЛица")
//		И НЕ ТекущийОбъект.Модифицированность() Тогда
//		
//		ДанныеКонтактногоЛица        = Неопределено;
//		ПредставлениеКонтактногоЛица = Неопределено;
//		
//	КонецЕсли;
//	
//	УправлениеФормой(ЭтотОбъект);
//	
//КонецПроцедуры

//&НаКлиенте
//Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)

//	Если ИмяСобытия = "ИзменениеОсновнойОрганизации" Тогда
//		
//		ОсновнаяОрганизация = Параметр;
//		
//	ИначеЕсли ИмяСобытия = "Запись_Контрагенты" Тогда
//		
//		Если Объект.Ссылка = Источник Тогда
//			// Собственную запись специально не обрабатываем
//			Возврат;
//		КонецЕсли;
//		
//		Если Объект.ГоловнойКонтрагент <> Объект.Ссылка И Источник = Объект.ГоловнойКонтрагент Тогда
//			
//			ГоловнойКонтрагентПриИзмененииНаСервере();
//			Модифицированность = Истина;
//			
//			ПроверитьКонтрагента();
//			
//		КонецЕсли;
//		
//	ИначеЕсли ИмяСобытия = "ЗагруженАдресныйКлассификатор" Тогда
//		
//		АдресныйКлассификаторПуст = АдресныйКлассификаторПуст();
//		
//		Элементы.ГруппаЗагрузкаАдресногоКлассификатора.Видимость = НЕ ИспользоватьРазделениеПоОбластямДанных И АдресныйКлассификаторПуст;
//		
//	ИначеЕсли ИмяСобытия = "УстановкаОсновногоДоговораКонтрагента" Тогда
//		
//		Если Объект.Ссылка = Параметр.Контрагент Тогда
//			
//			Объект.ОсновнойДоговорКонтрагента = Параметр.ОсновнойДоговор;
//			
//			Если НЕ Модифицированность Тогда
//				Записать();
//			КонецЕсли;
//			
//			Оповестить("УстановкаОсновногоДоговораКонтрагентаВыполнена");
//			
//		КонецЕсли;
//		
//	ИначеЕсли ИмяСобытия = "УстановкаОсновногоБанковскогоСчета" 
//		  ИЛИ ИмяСобытия = "УстановкаОсновногоБанковскогоСчетаПриЗаписи" Тогда
//		
//		Если Объект.Ссылка = Параметр.КонтрагентОрганизация Тогда
//			
//			Объект.ОсновнойБанковскийСчет = Параметр.ОсновнойБанковскийСчет;
//			
//			Если НЕ Модифицированность Тогда
//				Записать();
//			КонецЕсли;
//			
//			Оповестить("УстановкаОсновногоБанковскогоСчетаВыполнена");
//			
//		КонецЕсли;
//		
//	ИначеЕсли ИмяСобытия = "УстановкаОсновногоКонтактногоЛица" Тогда
//		
//		Если Объект.Ссылка = Параметр.Контрагент Тогда
//			
//			Объект.ОсновноеКонтактноеЛицо = Параметр.ОсновноеКонтактноеЛицо;
//			
//			Если НЕ Модифицированность Тогда
//				Записать();
//			КонецЕсли;
//			
//			Оповестить("УстановкаОсновногоКонтактногоЛицаВыполнена");
//			
//		КонецЕсли;
//		
//	КонецЕсли;
//	
//	// Подсистема "Свойства"
//	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтаФорма, ИмяСобытия, Параметр) Тогда
//		ОбновитьЭлементыДополнительныхРеквизитов();
//	КонецЕсли;
//	
//	УправлениеФормой(ЭтаФорма);
//	
//КонецПроцедуры

//&НаКлиенте
//Процедура ОбработкаЗаписиНового(НовыйОбъект, Источник, СтандартнаяОбработка)
//	
//	Если ТипЗнч(НовыйОбъект) = Тип("СправочникСсылка.БанковскиеСчета") Тогда
//	
//		Если НЕ ЗначениеЗаполнено(Объект.ОсновнойБанковскийСчет) Тогда
//			
//			Объект.ОсновнойБанковскийСчет = НовыйОбъект;
//			Модифицированность = Истина;
//			
//		КонецЕсли;
//		
//	ИначеЕсли ТипЗнч(НовыйОбъект) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
//	
//		Если НЕ ЗначениеЗаполнено(Объект.ОсновнойДоговорКонтрагента) Тогда
//			
//			Объект.ОсновнойДоговорКонтрагента = НовыйОбъект;
//			Модифицированность = Истина;
//			
//		КонецЕсли;
//		
//	ИначеЕсли ТипЗнч(НовыйОбъект) = Тип("СправочникСсылка.КонтактныеЛица") Тогда
//	
//		Если НЕ ЗначениеЗаполнено(Объект.ОсновноеКонтактноеЛицо) Тогда
//			
//			Объект.ОсновноеКонтактноеЛицо = НовыйОбъект;
//			Модифицированность = Истина;
//			
//		КонецЕсли;
//		
//	КонецЕсли;
//	
//КонецПроцедуры

//&НаСервере
//Процедура ПриЧтенииНаСервере(ТекущийОбъект)
//	
//	// СтандартныеПодсистемы.Свойства
//	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
//	// Конец СтандартныеПодсистемы.Свойства
//	
//	// СтандартныеПодсистемы.Свойства
//	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
//	// Конец СтандартныеПодсистемы.Свойства
//	
//	// СтандартныеПодсистемы.КонтактнаяИнформация
//	УправлениеКонтактнойИнформацией.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
//	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
//	
//	
//	ПодготовитьФормуНаСервере();
//	
//КонецПроцедуры

//&НаКлиенте
//Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
//	
//	Если Модифицированность Тогда
//		Отказ = Истина;
//		ТекстВопроса = НСтр("ru = 'Данные были изменены. Сохранить изменения?'");
//		Оповещение = Новый ОписаниеОповещения("ВопросПередЗакрытиемЗавершение", ЭтотОбъект);
//		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена);
//	КонецЕсли;
//	
//КонецПроцедуры

//&НаКлиенте
//Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
//	
//	//Spiller+ <12.08.2015>
//	Если НЕ ЗначениеЗаполнено(Объект.ЮридическоеФизическоеЛицо) Тогда 
//		Объект.ЮридическоеФизическоеЛицо = ПредопределенноеЗначение("Перечисление.NSI_ЮридическоеФизическоеЛицо.ЮридическоеЛицо");
//	КонецЕсли;
//	//Spiller
//		
//	Если ПараметрыЗаписи.Свойство("ПропуститьПроверку") 
//		И ПараметрыЗаписи.ПропуститьПроверку Тогда
//		Возврат;
//	КонецЕсли;
//	
//	ЭтоФизЛицо = Объект.ЮридическоеФизическоеЛицо = ПредопределенноеЗначение("Перечисление.NSI_ЮридическоеФизическоеЛицо.ФизическоеЛицо");
//	
//	Если (Объект.ИННВведенКорректно и Объект.КППВведенКорректно) 
//		или (Объект.ИННВведенКорректно и ЭтоФизЛицо) Тогда 
//		
//		КоличествоЭлементовДублей = ВыполнитьПоискДублейСервер(Объект.ИНН, Объект.КПП, Объект.Ссылка);
//		
//		ЕстьДубли = КоличествоЭлементовДублей > 0; 
//		
//		Если ЕстьДубли Тогда
//			
//			Отказ = Истина;
//			
//			ТекстВопроса = НСтр("ru = 'Уже есть элементы с таким %1. Записать?'");
//			Если ЭтоФизЛицо Тогда
//				ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстВопроса, НСтр("ru = 'ИНН'"));
//			Иначе
//				ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстВопроса, НСтр("ru = 'ИНН и КПП'"));
//			КонецЕсли;
//			
//			ДополнительныеПараметры = Новый Структура;
//			ДополнительныеПараметры.Вставить("КоличествоЭлементовДублей", КоличествоЭлементовДублей);
//			ДополнительныеПараметры.Вставить("ПараметрыЗаписи", ПараметрыЗаписи);
//			
//			Оповещение = Новый ОписаниеОповещения("ВопросЗаписатьЭлементСНеуникальнымИННЗавершение", ЭтотОбъект, ДополнительныеПараметры);
//			ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
//			
//		КонецЕсли;
//	КонецЕсли;   
//	
//	
//КонецПроцедуры

//&НаКлиенте
//Процедура ПослеЗаписи(ПараметрыЗаписи)
//	
//	СостояниеКонтрагентаИзменилось = Ложь;
//	Оповестить("Запись_Контрагенты", , Объект.Ссылка);
//	
//КонецПроцедуры

//&НаСервере
//Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
//	
//	// СтандартныеПодсистемы.Свойства
//	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтаФорма, Отказ, ПроверяемыеРеквизиты);
//	// Конец СтандартныеПодсистемы.Свойства
//	
//	// СтандартныеПодсистемы.КонтактнаяИнформация
//	УправлениеКонтактнойИнформацией.ОбработкаПроверкиЗаполненияНаСервере(ЭтотОбъект, Объект, Отказ);
//	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
//	
//КонецПроцедуры                     

//&НаКлиенте
//Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
//	
//	Если ВРег(ИсточникВыбора.ИмяФормы) = ВРег("Справочник.Контрагенты.Форма.РедактированиеИсторииКПП") Тогда
//		
//		УстановитьКПППослеРедактированияИстории(ВыбранноеЗначение.ИсторияКПП);
//		
//		ПроверитьКонтрагента();
//		
//	КонецЕсли;
//	
//КонецПроцедуры

//#КонецОбласти

//#Область ОбработчикиСобытийЭлементовШапкиФормы

//&НаКлиенте
//Процедура ПолеПоискаИНННаименованиеПриИзменении(Элемент)
//	
//	Если ЗначениеЗаполнено(ПолеПоискаИНННаименование)
//		И НЕ ЗначениеЗаполнено(Объект.ИНН) 
//		И НЕ ЗначениеЗаполнено(Объект.Наименование) 
//		И (НЕ ЗначениеЗаполнено(КонтактнаяИнформацияПолеЮрАдресКонтрагента) 
//		ИЛИ КонтактнаяИнформацияПолеЮрАдресКонтрагента = УправлениеКонтактнойИнформациейКлиентСерверБП.ПредставлениеПустойГиперссылки()) Тогда
//		
//		ЗаполнитьРеквизитыПоДаннымЕГРНаКлиенте();
//		ОтключитьЗаполнениеПоИНН = Истина;
//		ПодключитьОбработчикОжидания("Подключаемый_ВключитьЗаполнениеПоИНН", 0.1, Истина);
//		
//	КонецЕсли;
//	
//КонецПроцедуры

//#КонецОбласти

//#Область ОбработчикиСобытийЭлементовШапкиФормы

//&НаКлиенте
//Процедура НаименованиеПриИзменении(Элемент)

//	Если ФормироватьНаименованиеПолноеАвтоматически Тогда
//		Объект.НаименованиеПолное = Объект.Наименование;
//	КонецЕсли;

//КонецПроцедуры

//&НаКлиенте
//Процедура ВидПриИзменении(Элемент)
//	
//	ВидПриИзмененииНаСервере();
//	
//	ПроверитьКонтрагента();
//	
//КонецПроцедуры

//&НаКлиенте
//Процедура НаименованиеПолноеПриИзменении(Элемент)

//	ФормироватьНаименованиеПолноеАвтоматически = ПустаяСтрока(Объект.НаименованиеПолное)
//		ИЛИ (Объект.НаименованиеПолное = Объект.Наименование);

//КонецПроцедуры

//&НаКлиенте
//Процедура НаименованиеПолноеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

//	СтандартнаяОбработка = Ложь;

//	Список = Новый СписокЗначений;
//	Если ЗначениеЗаполнено(Объект.НаименованиеПолное) Тогда
//		Список.Добавить(Объект.НаименованиеПолное);
//	КонецЕсли;
//	Для каждого НаименованиеАвтозаполнения Из НаименованияАвтозаполнения Цикл
//		ТекНаименование = НаименованиеАвтозаполнения.Значение;
//		Если ЗначениеЗаполнено(ТекНаименование)	
//			И Список.НайтиПоЗначению(ТекНаименование) = Неопределено Тогда
//			Список.Добавить(ТекНаименование);
//		КонецЕсли;
//	КонецЦикла;
//	Если ЗначениеЗаполнено(Объект.Наименование)
//		И Список.НайтиПоЗначению(Объект.Наименование) = Неопределено Тогда
//		Список.Добавить(Объект.Наименование);
//	КонецЕсли;

//	Оповещение = Новый ОписаниеОповещения("НаименованиеПолноеНачалоВыбораЗавершение", ЭтотОбъект);
//	ПоказатьВыборИзСписка(Оповещение, Список, Элементы.НаименованиеПолное);

//КонецПроцедуры

//&НаКлиенте
//Процедура СтранаРегистрацииПриИзменении(Элемент)
//	
//	СтранаРегистрацииПриИзмененииНаСервере();
//	
//	УправлениеФормой(ЭтаФорма);
//	
//	ПроверитьКонтрагента();
//	
//КонецПроцедуры

//&НаКлиенте
//Процедура ГоловнойКонтрагентПриИзменении(Элемент)
//	
//	ГоловнойКонтрагентПриИзмененииНаСервере();
//	
//	ПроверитьКонтрагента();
//	
//КонецПроцедуры

//&НаКлиенте
//Процедура ЮрАдресКонтрагентаНажатие(Элемент, СтандартнаяОбработка)
//	
//	УправлениеКонтактнойИнформациейКлиентБП.ГиперссылкаНажатие(ЭтаФорма, Элемент, СтандартнаяОбработка);
//	
//КонецПроцедуры

//&НаКлиенте
//Процедура ФактАдресКонтрагентаНажатие(Элемент, СтандартнаяОбработка)
//	
//	УправлениеКонтактнойИнформациейКлиентБП.ГиперссылкаНажатие(ЭтаФорма, Элемент, СтандартнаяОбработка);
//	
//КонецПроцедуры

//&НаКлиенте
//Процедура ПочтовыйАдресКонтрагентаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
//	
//	УправлениеКонтактнойИнформациейКлиентБП.ПредставлениеНачалоВыбора(ЭтаФорма, Элемент, Модифицированность, СтандартнаяОбработка);
//	
//КонецПроцедуры

//&НаКлиенте
//Процедура ПочтовыйАдресКонтрагентаПриИзменении(Элемент)
//	
//	Подключаемый_КонтактнаяИнформацияПриИзменении(Элемент);
//	
//	УправлениеФормой(ЭтотОбъект);
//	
//КонецПроцедуры

//&НаКлиенте
//Процедура Подключаемый_ПоказатьПредупреждениеОбИзменениях()
//	
//	ОбщегоНазначенияБПКлиент.ПоказатьПредупреждениеОбИзменениях("КонтрагентыСкрытыеРеквизиты");
//	
//КонецПроцедуры

//&НаКлиенте
//Процедура Подключаемый_ПоказатьПредупреждениеОбИзмененияхДокументыПоКонтрагенту()
//	
//	ОбщегоНазначенияБПКлиент.ПоказатьПредупреждениеОбИзменениях("ДокументыПоКонтрагенту");
//	
//КонецПроцедуры

//&НаКлиенте
//Процедура Подключаемый_ПоказатьПредупреждениеОбИзмененияхИсторияКПП()
//	
//	ОбщегоНазначенияБПКлиент.ПоказатьПредупреждениеОбИзменениях("ИсторияКПП");
//	
//КонецПроцедуры

//&НаКлиенте
//Процедура ТелефонКонтрагентаПриИзменении(Элемент)
//	
//	Подключаемый_КонтактнаяИнформацияПриИзменении(Элемент);
//	
//КонецПроцедуры

//&НаКлиенте
//Процедура КонтактнаяИнформацияПолеТелефонКонтрагентаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
//	
//	УправлениеКонтактнойИнформациейКлиент.ПредставлениеНачалоВыбора(ЭтаФорма, Элемент, Модифицированность, СтандартнаяОбработка);
//	
//КонецПроцедуры

//&НаКлиенте
//Процедура ФаксКонтрагентаПриИзменении(Элемент)
//	
//	Подключаемый_КонтактнаяИнформацияПриИзменении(Элемент);
//	
//КонецПроцедуры

//&НаКлиенте
//Процедура ФаксКонтрагентаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
//	
//	УправлениеКонтактнойИнформациейКлиент.ПредставлениеНачалоВыбора(ЭтаФорма, Элемент, Модифицированность, СтандартнаяОбработка);
//	
//КонецПроцедуры

//&НаКлиенте
//Процедура КонтактнаяИнформацияПолеEmailКонтрагентыПриИзменении(Элемент)
//	
//	Подключаемый_КонтактнаяИнформацияПриИзменении(Элемент);
//	
//КонецПроцедуры

//&НаКлиенте
//Процедура КонтактнаяИнформацияПолеДругаяИнформацияКонтрагентыПриИзменении(Элемент)
//	
//	Подключаемый_КонтактнаяИнформацияПриИзменении(Элемент);
//	
//КонецПроцедуры

//&НаКлиенте
//Процедура ЮрФактАдресаСовпадаютПриИзменении(Элемент)
//	
//	Если ЮрФактАдресаСовпадают Тогда
//		СкопироватьПолеКонтактнойИнформации("КонтактнаяИнформацияПолеФактАдресКонтрагента", "КонтактнаяИнформацияПолеЮрАдресКонтрагента");
//	КонецЕсли;
//	
//	УправлениеФормой(ЭтаФорма);
//	
//КонецПроцедуры

//&НаКлиенте
//Процедура ЮрПочтовыйАдресаСовпадаютПриИзменении(Элемент)
//	
//	Если ЮрПочтовыйАдресаСовпадают Тогда
//		СкопироватьПолеКонтактнойИнформации("КонтактнаяИнформацияПолеПочтовыйАдресКонтрагента", "КонтактнаяИнформацияПолеЮрАдресКонтрагента");
//		
//		Если КонтактнаяИнформацияПолеПочтовыйАдресКонтрагента = УправлениеКонтактнойИнформациейКлиентСерверБП.ПредставлениеПустойГиперссылки() Тогда
//			КонтактнаяИнформацияПолеПочтовыйАдресКонтрагента = "";
//		КонецЕсли;
//		
//	КонецЕсли;
//	
//	УправлениеФормой(ЭтаФорма);
//	
//КонецПроцедуры

//&НаКлиенте
//Процедура ИННПриИзменении(Элемент)
//	
//	ИННПриИзмененииНаСервере();
//	
//	Если НЕ ЗначениеЗаполнено(Объект.Наименование) 
//		И (НЕ ЗначениеЗаполнено(КонтактнаяИнформацияПолеЮрАдресКонтрагента) 
//		ИЛИ КонтактнаяИнформацияПолеЮрАдресКонтрагента = УправлениеКонтактнойИнформациейКлиентСерверБП.ПредставлениеПустойГиперссылки()) Тогда
//		ОтключитьЗаполнениеПоИНН = Истина;
//		ПодключитьОбработчикОжидания("Подключаемый_ВключитьЗаполнениеПоИНН", 0.1, Истина);
//	КонецЕсли;
//	
//	ПроверитьКонтрагента();
//	
//КонецПроцедуры

//&НаКлиенте
//Процедура КПППриИзменении(Элемент)
//	
//	КПППриИзмененииНаСервере();
//	
//	ПроверитьКонтрагента();
//	
//КонецПроцедуры

//&НаКлиенте
//Процедура НадписьПоясненияНекорректногоИННОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылка, СтандартнаяОбработка)
//	ОбработатьНажатиеНаСсылку(Элемент, НавигационнаяСсылка, СтандартнаяОбработка);
//КонецПроцедуры

//&НаКлиенте
//Процедура НадписьПоясненияНекорректногоКППОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылка, СтандартнаяОбработка)
//	ОбработатьНажатиеНаСсылку(Элемент, НавигационнаяСсылка, СтандартнаяОбработка);
//КонецПроцедуры

//&НаКлиенте
//Процедура ВидГосударственногоОрганаПриИзменении(Элемент)
//	
//	УправлениеФормой(ЭтаФорма);
//	
//КонецПроцедуры

//#КонецОбласти

//#Область ОбработчикиКомандФормы

//&НаКлиенте
//Процедура ЗаполнитьРеквизитыПоДаннымЕГР(Команда)
//	
//	ЗаполнитьРеквизитыПоДаннымЕГРНаКлиенте();
//	
//КонецПроцедуры

//&НаКлиенте
//Процедура ЗаполнитьРеквизитыПоНаименованию(Команда)
//	
//	Если ЗначениеЗаполнено(Объект.Наименование) 
//		ИЛИ (ЗначениеЗаполнено(КонтактнаяИнформацияПолеЮрАдресКонтрагента) 
//		И КонтактнаяИнформацияПолеЮрАдресКонтрагента <> УправлениеКонтактнойИнформациейКлиентСерверБП.ПредставлениеПустойГиперссылки()) Тогда
//		ТекстВопроса = НСтр("ru='Перезаполнить текущие реквизиты?'");
//		ДопПараметры = Новый Структура("ЗаполнениеПоИНН", Ложь);
//		ДопПараметры.Вставить("СтрокаПоиска", Объект.Наименование);
//		ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьРеквизитыПоДаннымЕГРЗавершение", ЭтотОбъект, ДопПараметры);
//		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
//	Иначе
//		ЗаполнитьРеквизитыПоНаименованиюНаКлиенте(Объект.Наименование);
//	КонецЕсли;
//	
//КонецПроцедуры

//&НаКлиенте
//Процедура ЗаполнитьРеквизитыПоИНН(Команда)
//	
//	Если ОтключитьЗаполнениеПоИНН <> Неопределено Тогда
//		Возврат;
//	КонецЕсли;
//	
//	Если Объект.ОбособленноеПодразделение Тогда
//		ПоказатьПредупреждение(, НСтр("ru='Реквизиты обособленных подразделений заполняются вручную.'"));
//		Возврат;
//	ИначеЕсли Объект.СтранаРегистрации <> ПредопределенноеЗначение("Справочник.СтраныМира.Россия") Тогда
//		ПоказатьПредупреждение(, НСтр("ru='Автоматически заполняются только реквизиты российских контрагентов.'"));
//		Возврат;
//	ИначеЕсли НЕ ЗначениеЗаполнено(Объект.ИНН) Тогда
//		ПоказатьПредупреждение(, НСтр("ru='Поле ""ИНН"" не заполнено'"));
//		ТекущийЭлемент = Элементы.ИНН;
//		Возврат;
//	ИначеЕсли НЕ Объект.ИННВведенКорректно Тогда
//		ПоказатьПредупреждение(, Строка(НадписьПоясненияНекорректногоИНН));
//		ТекущийЭлемент = Элементы.ИНН;
//		Возврат;
//	КонецЕсли;
//	
//	Если ЗначениеЗаполнено(Объект.Наименование) 
//		ИЛИ (ЗначениеЗаполнено(КонтактнаяИнформацияПолеЮрАдресКонтрагента) 
//		И КонтактнаяИнформацияПолеЮрАдресКонтрагента <> УправлениеКонтактнойИнформациейКлиентСерверБП.ПредставлениеПустойГиперссылки()) Тогда
//		ТекстВопроса = НСтр("ru='Перезаполнить текущие реквизиты?'");
//		ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьРеквизитыПоИННЗавершение", ЭтотОбъект);
//		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
//	Иначе
//		ВыполнитьЗаполнениеРеквизитовПоИНН();
//	КонецЕсли;
//	
//КонецПроцедуры

//&НаКлиенте
//Процедура ЗагрузитьАдресныйКлассификатор(Команда)
//	
//	АдресныйКлассификаторКлиент.ЗагрузитьАдресныйКлассификатор();
//	
//КонецПроцедуры

//&НаКлиенте
//Процедура КомандаЗаписатьИЗакрыть(Команда)
//	
//	ЗаписатьИЗакрыть();
//	
//КонецПроцедуры

//#КонецОбласти

//#Область СлужебныеПроцедурыИФункции

//&НаСервере
//Процедура ПодготовитьФормуНаСервере()
//	
//	ЦветВыделенияНекорректногоЗначение = ЦветаСтиля.ЦветВыделенияКонтрагентаСОшибкой;
//	
//	Если Объект.ЮридическоеФизическоеЛицо = Перечисления.NSI_ЮридическоеФизическоеЛицо.ФизическоеЛицо Тогда
//		Вид	= "ФизическоеЛицо";
//	ИначеЕсли Объект.ОбособленноеПодразделение Тогда
//		Вид	= "ОбособленноеПодразделение";
//	ИначеЕсли Объект.ГосударственныйОрган Тогда
//		Вид	= "ГосударственныйОрган";
//	Иначе
//		Вид	= "ЮридическоеЛицо";
//	КонецЕсли;
//	
//	ФормироватьНаименованиеПолноеАвтоматически = ПустаяСтрока(Объект.НаименованиеПолное)
//		ИЛИ (Объект.НаименованиеПолное = Объект.Наименование);
//	
//	//ОсновнаяОрганизация = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация");
//	
//	АдресныйКлассификаторПуст = НЕ АдресныйКлассификатор.КлассификаторЗагружен();
//	
//	ИспользоватьРазделениеПоОбластямДанных = ПолучитьФункциональнуюОпцию("РаботаВМоделиСервиса");
//	Элементы.ГруппаЗагрузкаАдресногоКлассификатора.Видимость = НЕ ИспользоватьРазделениеПоОбластямДанных И АдресныйКлассификаторПуст;
//	
//	ПроверитьИНН = Истина;
//	ПроверитьКПП = Истина;
//	
//	ПроверитьИННКППДубли(ПроверитьИНН, ПроверитьКПП);
//	
//	УстановитьВидимостьЭлементов();
//	
//	УстановитьУсловноеОформление();
//	
//КонецПроцедуры

//&НаКлиентеНаСервереБезКонтекста
//Процедура УправлениеФормой(Форма)
//	
//	Объект   = Форма.Объект;
//	Элементы = Форма.Элементы;
//		
//	// Закладка Адреса, телефоны
//	Если Форма.ЮрФактАдресаСовпадают Тогда
//		Элементы.ГруппаФактАдресКонтрагента.ТекущаяСтраница	= Элементы.СтраницаФактАдресКонтрагентаСовпадает;
//	Иначе
//		Элементы.ГруппаФактАдресКонтрагента.ТекущаяСтраница	= Элементы.СтраницаФактАдресКонтрагента;
//	КонецЕсли;
//	
//	Если Форма.ЮрПочтовыйАдресаСовпадают Тогда
//		Элементы.ГруппаПочтовыйАдресКонтрагента.ТекущаяСтраница	= Элементы.СтраницаПочтовыйАдресКонтрагентаСовпадает;
//	Иначе
//		Элементы.ГруппаПочтовыйАдресКонтрагента.ТекущаяСтраница	= Элементы.СтраницаПочтовыйАдресКонтрагента;
//	КонецЕсли;
//	
//	Если ПустаяСтрока(Форма.КонтактнаяИнформацияПолеФактАдресКонтрагента)
//		ИЛИ Форма.КонтактнаяИнформацияПолеФактАдресКонтрагента = УправлениеКонтактнойИнформациейКлиентСерверБП.ПредставлениеПустойГиперссылки() Тогда
//			Форма.ФактАдресКонтрагентаСовпадает = НСтр("ru = '<не заполнен>'");
//	Иначе
//		Форма.ФактАдресКонтрагентаСовпадает = Форма.КонтактнаяИнформацияПолеФактАдресКонтрагента;	
//	КонецЕсли;
//	
//	Если ПустаяСтрока(Форма.КонтактнаяИнформацияПолеПочтовыйАдресКонтрагента)
//		ИЛИ Форма.КонтактнаяИнформацияПолеПочтовыйАдресКонтрагента = УправлениеКонтактнойИнформациейКлиентСерверБП.ПредставлениеПустойГиперссылки() Тогда
//			Форма.ПочтовыйАдресКонтрагентаСовпадает = НСтр("ru = '<не заполнен>'");
//	Иначе
//		Форма.ПочтовыйАдресКонтрагентаСовпадает = Форма.КонтактнаяИнформацияПолеПочтовыйАдресКонтрагента;	
//	КонецЕсли;
//	
//	Если ЗначениеЗаполнено(Объект.ВидГосударственногоОргана) Тогда
//		
//		Если Объект.ВидГосударственногоОргана = ПредопределенноеЗначение("Перечисление.ВидыГосударственныхОрганов.НалоговыйОрган") Тогда
//			Элементы.КодГосударственногоОргана.Заголовок = НСтр("ru = 'Код инспекции'");
//			Элементы.КодГосударственногоОргана.ОграничениеТипа = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(4));
//		ИначеЕсли Объект.ВидГосударственногоОргана = ПредопределенноеЗначение("Перечисление.ВидыГосударственныхОрганов.ОрганПФР") Тогда
//			Элементы.КодГосударственногоОргана.Заголовок = НСтр("ru = 'Код отделения'");
//			Элементы.КодГосударственногоОргана.ОграничениеТипа = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(3));
//		ИначеЕсли Объект.ВидГосударственногоОргана = ПредопределенноеЗначение("Перечисление.ВидыГосударственныхОрганов.ОрганФСС") Тогда
//			Элементы.КодГосударственногоОргана.Заголовок = НСтр("ru = 'Код отделения'");
//			Элементы.КодГосударственногоОргана.ОграничениеТипа = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(4));
//		Иначе
//			Элементы.КодГосударственногоОргана.Заголовок = НСтр("ru = 'Код'");
//			Элементы.КодГосударственногоОргана.ОграничениеТипа = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(10));
//		КонецЕсли;
//		
//	КонецЕсли;
//	
//	АдресЗаголовок = НСтр("ru='Адрес и телефон'");
//	Если ЗначениеЗаполнено(Форма.КонтактнаяИнформацияПолеЮрАдресКонтрагента) И НЕ Форма.КонтактнаяИнформацияПолеЮрАдресКонтрагента = УправлениеКонтактнойИнформациейКлиентСерверБП.ПредставлениеПустойГиперссылки() Тогда
//		АдресЗаголовок = АдресЗаголовок + ": " + Форма.КонтактнаяИнформацияПолеЮрАдресКонтрагента;
//		Если ЗначениеЗаполнено(Форма.КонтактнаяИнформацияПолеТелефонКонтрагента) Тогда
//			АдресЗаголовок = АдресЗаголовок + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru=', тел: %1'"), Форма.КонтактнаяИнформацияПолеТелефонКонтрагента);
//		КонецЕсли;
//	Иначе
//		Если ЗначениеЗаполнено(Форма.КонтактнаяИнформацияПолеТелефонКонтрагента) Тогда
//			АдресЗаголовок = АдресЗаголовок + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru=': тел: %1'"), Форма.КонтактнаяИнформацияПолеТелефонКонтрагента);
//		КонецЕсли;
//	КонецЕсли;
//	
//	УстановитьЗаголовокГруппы(Форма, "ГруппаКонтактнаяИнформация", АдресЗаголовок);
//	
//КонецПроцедуры

//&НаКлиентеНаСервереБезКонтекста
//Процедура УстановитьЗаголовокГруппы(Форма, НазваниеГруппы, ЗаголовокТекст)
//	
//	#Если ВебКлиент Тогда
//		СистемнаяИнформация = Новый СистемнаяИнформация;
//		ВерсияПлатформыБезНомераСборки = ОбщегоНазначенияКлиентСервер.ВерсияКонфигурацииБезНомераСборки(СистемнаяИнформация.ВерсияПриложения);
//		Если ВерсияПлатформыБезНомераСборки = "8.3.5" Тогда
//			Форма.Элементы[НазваниеГруппы].СвернутыйЗаголовок = ЗаголовокТекст;
//		Иначе
//			Форма.Элементы[НазваниеГруппы].ЗаголовокСвернутогоОтображения = ЗаголовокТекст;
//		КонецЕсли;
//	#Иначе
//		Форма.Элементы[НазваниеГруппы].ЗаголовокСвернутогоОтображения = ЗаголовокТекст;
//	#КонецЕсли
//	
//КонецПроцедуры

//&НаСервере
//Процедура УстановитьУсловноеОформление()
//	
//	УсловноеОформление.Элементы.Очистить();
//	
//	Элемент = УсловноеОформление.Элементы.Добавить();
//	
//	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
//	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.КодГосударственногоОргана.Имя);
//	
//	ГруппаОтбораКодГосударственногоОргана = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
//	ГруппаОтбораКодГосударственногоОргана.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
//	
//	ОтборЭлемента = ГруппаОтбораКодГосударственногоОргана.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
//	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ГосударственныйОрган");
//	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
//	ОтборЭлемента.ПравоеЗначение = Истина;
//	
//	ОтборЭлемента = ГруппаОтбораКодГосударственногоОргана.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
//	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ВидГосударственногоОргана");
//	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
//	ОтборЭлемента.ПравоеЗначение = Перечисления.ВидыГосударственныхОрганов.Прочий;
//	
//	ОтборЭлемента = ГруппаОтбораКодГосударственногоОргана.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
//	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.КодГосударственногоОргана");
//	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
//	ОтборЭлемента.ПравоеЗначение = "";
//	
//	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
//	
//КонецПроцедуры

//&НаСервере
//Процедура ГоловнойКонтрагентПриИзмененииНаСервере()
//	
//	УстановитьИННОбособленногоПодразделения(Объект);
//	
//	ПроверитьИНН = Истина;
//	ПроверитьКПП = Ложь;
//	
//	ПроверитьИННКППДубли(ПроверитьИНН, ПроверитьКПП);
//	
//	УстановитьВидимостьЭлементов();
//	
//КонецПроцедуры

//&НаСервере
//Процедура РазместитьКонтактнуюИнформацию()
//	
//	// СтандартныеПодсистемы.КонтактнаяИнформация
//	ИсключаемыеВиды = Новый Массив;
//	ИсключаемыеВиды.Добавить(Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента);
//	ИсключаемыеВиды.Добавить(Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента);
//	ИсключаемыеВиды.Добавить(Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресКонтрагента);
//	ИсключаемыеВиды.Добавить(Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента);
//	ИсключаемыеВиды.Добавить(Справочники.ВидыКонтактнойИнформации.ФаксКонтрагенты);
//	ИсключаемыеВиды.Добавить(Справочники.ВидыКонтактнойИнформации.EmailКонтрагенты);
//	ИсключаемыеВиды.Добавить(Справочники.ВидыКонтактнойИнформации.ДругаяИнформацияКонтрагенты);
//	УправлениеКонтактнойИнформацией.ПриСозданииНаСервере(ЭтотОбъект, Объект, "ГруппаКонтактнаяИнформация", ПоложениеЗаголовкаЭлементаФормы.Лево, ИсключаемыеВиды);
//	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
//	
//	УстановитьПустоеПредставлениеАдреса(ЭтотОбъект);
//	
//	ЮрФактАдресаСовпадают		= СокрЛП(КонтактнаяИнформацияПолеЮрАдресКонтрагента) = СокрЛП(КонтактнаяИнформацияПолеФактАдресКонтрагента);
//	ЮрПочтовыйАдресаСовпадают	= СокрЛП(КонтактнаяИнформацияПолеЮрАдресКонтрагента) = СокрЛП(КонтактнаяИнформацияПолеПочтовыйАдресКонтрагента)
//		//ИЛИ СокрЛП(?(КонтактнаяИнформацияПолеЮрАдресКонтрагента = УправлениеКонтактнойИнформациейКлиентСерверБП.ПредставлениеПустойГиперссылки(),
//		//"", КонтактнаяИнформацияПолеЮрАдресКонтрагента)) = СокрЛП(КонтактнаяИнформацияПолеПочтовыйАдресКонтрагента)
//		;

//КонецПроцедуры

//&НаКлиенте
//Процедура ПриИзмененииЮрАдресаКонтрагента()

//	Если ЮрФактАдресаСовпадают ИЛИ ПустаяСтрока(КонтактнаяИнформацияПолеФактАдресКонтрагента) Тогда
//		СкопироватьПолеКонтактнойИнформации("КонтактнаяИнформацияПолеФактАдресКонтрагента", "КонтактнаяИнформацияПолеЮрАдресКонтрагента");
//	КонецЕсли;
//	
//	Если ЮрПочтовыйАдресаСовпадают ИЛИ ПустаяСтрока(КонтактнаяИнформацияПолеПочтовыйАдресКонтрагента) Тогда
//		СкопироватьПолеКонтактнойИнформации("КонтактнаяИнформацияПолеПочтовыйАдресКонтрагента", "КонтактнаяИнформацияПолеЮрАдресКонтрагента");
//	КонецЕсли;
//	
//	УправлениеФормой(ЭтаФорма);
//	
//КонецПроцедуры

//&НаКлиенте
//Процедура ПриИзмененииФактАдресаКонтрагента()

//	ЮрФактАдресаСовпадают = СокрЛП(КонтактнаяИнформацияПолеЮрАдресКонтрагента) = СокрЛП(КонтактнаяИнформацияПолеФактАдресКонтрагента);
//	ЮрПочтовыйАдресаСовпадают = СокрЛП(КонтактнаяИнформацияПолеЮрАдресКонтрагента) = СокрЛП(КонтактнаяИнформацияПолеПочтовыйАдресКонтрагента);
//	
//КонецПроцедуры

//&НаКлиенте
//Процедура СкопироватьПолеКонтактнойИнформации(ИмяПриемника, ИмяИсточника)

//	Модифицированность		= Истина;
//	ЭтаФорма[ИмяПриемника]	= ЭтаФорма[ИмяИсточника];
//	
//	ИмяОписания	= "КонтактнаяИнформацияОписаниеДополнительныхРеквизитов";
//	
//	Отбор = Новый Структура("ИмяРеквизита");
//	
//	Отбор.ИмяРеквизита	= ИмяИсточника;
//	ДанныеИсточника	= ЭтаФорма[ИмяОписания].НайтиСтроки(Отбор);
//	Если ДанныеИсточника.Количество() = 0 Тогда
//		Возврат;
//	КонецЕсли;
//	
//	Отбор.ИмяРеквизита	= ИмяПриемника;
//	ДанныеПриемника	= ЭтаФорма[ИмяОписания].НайтиСтроки(Отбор);
//	Если ДанныеПриемника.Количество() = 0 Тогда
//		Возврат;
//	КонецЕсли;
//	
//	Если НЕ ДанныеИсточника[0].Тип = ДанныеПриемника[0].Тип Тогда
//		Возврат
//	КонецЕсли;
//	
//	ЗначенияПолейИсточника = ДанныеИсточника[0].ЗначенияПолей;
//	Если ТипЗнч(ЗначенияПолейИсточника)=Тип("Строка") Тогда
//		ДанныеПриемника[0].ЗначенияПолей = ЗначенияПолейИсточника;
//	Иначе
//		ДанныеПриемника[0].ЗначенияПолей = ЗначенияПолейИсточника.Скопировать();
//	КонецЕсли;
//	ДанныеПриемника[0].Представление = ДанныеИсточника[0].Представление;
//	ДанныеПриемника[0].Комментарий = ДанныеИсточника[0].Комментарий;
//	
//	Модифицированность = Истина;
//	
//КонецПроцедуры

//&НаСервереБезКонтекста
//Функция АдресныйКлассификаторПуст()

//	Возврат НЕ АдресныйКлассификатор.КлассификаторЗагружен();

//КонецФункции

//&НаКлиенте
//Процедура ОбработатьЗакрытиеФормыСпискаДублей(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
//	
//	ПроверитьДубли(ЭтаФорма);
//	
//	ОбщегоНазначенияБПКлиентСервер.ОтобразитьРезультатПроверкиКонтрагентовВФорме(ЭтотОбъект, "");
//	
//	// Устанавливаем текст заголовка
//	Если ПроверкаКонтрагентовПоИННКППВозможна Тогда
//		// СтандартныеПодсистемы.РаботаСКонтрагентами
//		ПроверкаКонтрагентовКлиент.ОбработатьРезультатПроверкиКонтрагентовВСправочнике(ЭтотОбъект);
//		// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
//	Конецесли;
//	
//КонецПроцедуры

//&НаКлиенте
//Процедура ОбработатьСитуациюВыбораДубля(Элемент)
//		
//	ПараметрыПередачи = Новый Структура;
//	
//	ПараметрыПередачи.Вставить("ИНН", Объект.ИНН);
//	ПараметрыПередачи.Вставить("КПП", Объект.КПП);
//	ПараметрыПередачи.Вставить("ЗакрыватьПриЗакрытииВладельца", Истина);
//	
//	ЧтоВыполнитьПослеЗакрытия = Новый ОписаниеОповещения("ОбработатьЗакрытиеФормыСпискаДублей", ЭтаФорма);
//	
//	ОткрытьФорму("Справочник.Контрагенты.Форма.ФормаВыбораДублей", 
//				  ПараметрыПередачи, 
//				  Элемент,
//				  ,
//				  ,
//				  ,
//				  ЧтоВыполнитьПослеЗакрытия);
//	
//КонецПроцедуры

//&НаКлиентеНаСервереБезКонтекста
//Процедура ПроверитьДубли(Форма)
//	
//	Если Не Форма.ТолькоПросмотр Тогда
//		Объект = Форма.Объект;
//		
//		КоличествоЭлементовДублей = 0;
//		
//		ЭтоЮрЛицо = Объект.ЮридическоеФизическоеЛицо = ПредопределенноеЗначение("Перечисление.NSI_ЮридическоеФизическоеЛицо.ЮридическоеЛицо");
//		
//		Если (Объект.ИННВведенКорректно и Объект.КППВведенКорректно) 
//			ИЛИ (Объект.ИННВведенКорректно и НЕ ЭтоЮрЛицо) Тогда 
//			
//			КоличествоЭлементовДублей = ВыполнитьПоискДублейСервер(Объект.ИНН, Объект.КПП, Объект.Ссылка);
//			
//			Форма.ЕстьДубли = НЕ КоличествоЭлементовДублей = 0;
//			
//			Если НЕ Форма.ЕстьДубли Тогда
//				
//				Объект.РасширенноеПредставлениеИНН = Объект.ИНН;
//				Объект.РасширенноеПредставлениеКПП = Объект.КПП;
//				
//			КонецЕсли;
//			
//			Форма.РезультатПроверкиНаДубли = ОписаниеРезультатаПроверкиДублей(Форма, КоличествоЭлементовДублей);
//			
//		Иначе
//			Форма.ЕстьДубли = Ложь;
//		КонецЕсли;
//		
//	КонецЕсли;
//	
//КонецПроцедуры

//&НаКлиентеНаСервереБезКонтекста
//Функция ОписаниеРезультатаПроверкиДублей(Форма, Знач КоличествоЭлементовДублей)
//	
//	Объект = Форма.Объект;
//	
//	// Если контрагент еще не записан, то не учитываем его при подсчете
//	Если НЕ Объект.Ссылка.Пустая() Тогда
//		КоличествоЭлементовДублей = КоличествоЭлементовДублей + 1;
//	КонецЕсли;
//	
//	Если Форма.ЕстьДубли Тогда
//		
//		ЭтоФизЛицо = Объект.ЮридическоеФизическоеЛицо = ПредопределенноеЗначение("Перечисление.NSI_ЮридическоеФизическоеЛицо.ФизическоеЛицо");
//		
//		СтруктураПараметровСообщенияОДублях = Новый Структура;
//		СтруктураПараметровСообщенияОДублях.Вставить("ИННиКПП", ?(ЭтоФизЛицо, НСтр("ru = 'ИНН'"), НСтр("ru = 'ИНН и КПП'")));
//		
//		Если КоличествоЭлементовДублей = 1 Тогда
//			СтруктураПараметровСообщенияОДублях.Вставить("КоличествоЭлементовДублей", НСтр("ru = 'один'"));
//			СтруктураПараметровСообщенияОДублях.Вставить("СклонениеКонтрагентов", НСтр("ru = 'контрагент'"));
//		ИначеЕсли КоличествоЭлементовДублей < 5 Тогда
//			СтруктураПараметровСообщенияОДублях.Вставить("КоличествоЭлементовДублей", КоличествоЭлементовДублей);
//			СтруктураПараметровСообщенияОДублях.Вставить("СклонениеКонтрагентов", НСтр("ru = 'контрагента'"));
//		Иначе
//			СтруктураПараметровСообщенияОДублях.Вставить("КоличествоЭлементовДублей", КоличествоЭлементовДублей);
//			СтруктураПараметровСообщенияОДублях.Вставить("СклонениеКонтрагентов", НСтр("ru = 'контрагентов'"));
//		КонецЕсли;
//		
//		ТекстНадписиОДублях = НСтр("ru = 'С таким [ИННиКПП] есть [КоличествоЭлементовДублей] [СклонениеКонтрагентов]'");
//		
//		ТекстНадписиОДублях = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(ТекстНадписиОДублях, СтруктураПараметровСообщенияОДублях);
//		
//		Возврат Новый ФорматированнаяСтрока(ТекстНадписиОДублях, ,Форма.ЦветВыделенияНекорректногоЗначение, ,"ПоказатьДубли");
//		
//	Иначе
//		
//		Возврат "";
//		
//	КонецЕсли;
//	
//КонецФункции

//&НаСервере
//Процедура ПроверитьИННКППДубли(ПроверитьИНН, ПроверитьКПП)
//	
//	ЭтотОбъект.НадписьПоясненияНекорректногоИНН = "";
//	ЭтотОбъект.НадписьПоясненияНекорректногоКПП = "";
//	
//	СтруктураДляПроверкиИННиКПП = СтруктураДляПроверкиИННиКПП(Объект, ПроверитьИНН, ПроверитьКПП);
//	
//	ПроверитьИННиКПП(СтруктураДляПроверкиИННиКПП, ЭтаФорма);
//	
//	ПроверитьДубли(ЭтаФорма);
//	
//	ОбщегоНазначенияБПКлиентСервер.ОтобразитьРезультатПроверкиКонтрагентовВФорме(ЭтотОбъект, "");
//	
//	ПроверкаКонтрагентовПоИННКППВозможна = ПроверкаКонтрагентовВозможна();
//	
//КонецПроцедуры

//&НаСервере
//Процедура ПроверитьИННиКПП(СтруктураПараметров, Форма)
//	
//	ВозвращеннаяСтруктура = ОбщегоНазначенияБПКлиентСервер.ПроверитьКорректностьИННКПП(СтруктураПараметров);
//	
//	ЗаполнитьЗначенияСвойств(СтруктураПараметров, ВозвращеннаяСтруктура);
//	
//	ЗаполнитьЗначенияСвойств(Форма, ВозвращеннаяСтруктура);
//	
//	Если НЕ Форма.ТолькоПросмотр Тогда
//		ЗаполнитьЗначенияСвойств(Форма.Объект, ВозвращеннаяСтруктура);
//	КонецЕсли;
//	
//КонецПроцедуры

//&НаСервере
//Функция ПроверкаКонтрагентовВозможна()
//	
//	Если Объект.СтранаРегистрации <> Справочники.СтраныМира.Россия Тогда
//		Возврат Ложь;
//	КонецЕсли;
//	
//	Если НЕ ИННиКППКорректны(ЭтотОбъект) Тогда
//		Возврат Ложь;
//	КонецЕсли;
//	
//	Возврат Истина;
//	
//КонецФункции

//&НаСервереБезКонтекста
//Функция ВыполнитьПоискДублейСервер(Знач ИНН, Знач КПП, Знач Ссылка)
//	
//	Возврат Справочники.Контрагенты.ПроверитьДублиСправочникаКонтрагентыПоИННКПП(СокрЛП(ИНН), СокрЛП(КПП), Ссылка).Количество();
//	
//КонецФункции

//&НаКлиенте
//Процедура НаименованиеПолноеНачалоВыбораЗавершение(Результат, ДополнительныеПараметры) Экспорт
//	
//	Если Результат <> Неопределено Тогда
//		Объект.НаименованиеПолное = Результат.Значение;
//		Модифицированность = Истина;
//		ФормироватьНаименованиеПолноеАвтоматически = ПустаяСтрока(Объект.НаименованиеПолное)
//			ИЛИ (Объект.НаименованиеПолное = Объект.Наименование);
//	КонецЕсли;
//	
//КонецПроцедуры

//&НаКлиенте
//Процедура ВопросЗаписатьЭлементСНеуникальнымИННЗавершение(Результат, ДополнительныеПараметры) Экспорт
//	
//	Если Результат = КодВозвратаДиалога.ОК Тогда
//		ПараметрыЗаписи = ДополнительныеПараметры.ПараметрыЗаписи;
//		ПараметрыЗаписи.Вставить("ПропуститьПроверку", Истина);
//		Если Записать(ПараметрыЗаписи) И ПараметрыЗаписи.Свойство("Закрыть") Тогда
//			Закрыть();
//		КонецЕсли;
//	КонецЕсли;
//	
//	РезультатПроверкиНаДубли = ОписаниеРезультатаПроверкиДублей(ЭтотОбъект, ДополнительныеПараметры.КоличествоЭлементовДублей);
//	
//	ОбщегоНазначенияБПКлиентСервер.ОтобразитьРезультатПроверкиКонтрагентовВФорме(ЭтотОбъект, "");
//	
//		// Устанавливаем текст заголовка
//	Если ПроверкаКонтрагентовПоИННКППВозможна Тогда
//		// СтандартныеПодсистемы.РаботаСКонтрагентами
//		ПроверкаКонтрагентовКлиент.ОбработатьРезультатПроверкиКонтрагентовВСправочнике(ЭтотОбъект);
//		// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
//	Конецесли;
//	
//КонецПроцедуры

//&НаКлиенте
//Процедура ПослеИзмененияКонтактнойИнформации(Результат) Экспорт
//	
//	Если Результат.ИмяРеквизита = "КонтактнаяИнформацияПолеЮрАдресКонтрагента" Тогда
//		
//		Если НЕ Результат.ЗначениеПоляДоИзменения = КонтактнаяИнформацияПолеЮрАдресКонтрагента Тогда
//			
//			ПриИзмененииЮрАдресаКонтрагента();
//			
//		КонецЕсли;
//		
//		УправлениеФормой(ЭтаФорма);
//		
//	ИначеЕсли Результат.ИмяРеквизита = "КонтактнаяИнформацияПолеФактАдресКонтрагента" Тогда
//		
//		ПриИзмененииФактАдресаКонтрагента();
//		УправлениеФормой(ЭтаФорма);
//		
//	КонецЕсли;
//	
//КонецПроцедуры

//&НаКлиенте
//Процедура ЗаписатьИЗакрыть()

//	ПараметрыЗаписи = Новый Структура;
//	ПараметрыЗаписи.Вставить("Закрыть", Истина);
//	Если Записать(ПараметрыЗаписи) Тогда
//		Закрыть();
//	КонецЕсли;

//КонецПроцедуры

//&НаКлиенте
//Процедура ВопросПередЗакрытиемЗавершение(Результат, ДополнительныеПараметры) Экспорт
//	
//	Если Результат = КодВозвратаДиалога.Да Тогда
//		ЗаписатьИЗакрыть();
//	ИначеЕсли Результат = КодВозвратаДиалога.Нет Тогда
//		Модифицированность = Ложь;
//		Закрыть();
//	КонецЕсли;
//	
//КонецПроцедуры

//&НаКлиентеНаСервереБезКонтекста
//Функция ЭтоИНН(СтрокаИНН)
//	Возврат ЗначениеЗаполнено(СтрокаИНН)
//		И (СтрДлина(СтрокаИНН) = 10 ИЛИ СтрДлина(СтрокаИНН) = 12)
//		И СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(СтрокаИНН);
//КонецФункции

//#Область ПроверкаКонтрагентов

//&НаКлиенте
//Процедура ПроверитьКонтрагента()
//	
//	Если ПроверкаКонтрагентовПоИННКППВозможна Тогда
//		// СтандартныеПодсистемы.РаботаСКонтрагентами
//		ПроверкаКонтрагентовКлиент.ЗапуститьПроверкуКонтрагентаВСправочнике(ЭтотОбъект);
//		// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
//	КонецЕсли;
//	
//КонецПроцедуры

//&НаКлиентеНаСервереБезКонтекста
//Функция ИННиКППКорректны(Форма)
//	
//	Объект = Форма.Объект;
//	
//	ЭтоФизЛицо = Объект.ЮридическоеФизическоеЛицо = ПредопределенноеЗначение("Перечисление.NSI_ЮридическоеФизическоеЛицо.ФизическоеЛицо");
//	Если НЕ (Объект.ИННВведенКорректно и Объект.КППВведенКорректно) 
//		И НЕ (Объект.ИННВведенКорректно и ЭтоФизЛицо) Тогда
//		Возврат Ложь;
//	КонецЕсли;
//	
//	Возврат Истина;

//КонецФункции

//&НаКлиенте
//Процедура Подключаемый_ПоказатьПредложениеИспользоватьПроверкуКонтрагентов()
//	
//	Если ПроверкаКонтрагентовПоИННКППВозможна Тогда
//		// СтандартныеПодсистемы.РаботаСКонтрагентами
//		ПроверкаКонтрагентовКлиент.ПредложитьВключитьПроверкуКонтрагентов(ЭтаФорма);
//		// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
//	КонецЕсли;
//	
//КонецПроцедуры

//&НаКлиенте
//Процедура ОбработатьНажатиеНаСсылку(Элемент, НавигационнаяСсылка, СтандартнаяОбработка)
//	
//	Если Найти(НавигационнаяСсылка, "ПоказатьДубли") > 0 Тогда
//		СтандартнаяОбработка = Ложь;
//		ОбработатьСитуациюВыбораДубля(Элемент);
//	КонецЕсли;
//	
//КонецПроцедуры

//&НаСервере
//Процедура УстановитьВидимостьЭлементов()
//	
//	КонтрагентЗарегистрированВРФ = Объект.СтранаРегистрации = Справочники.СтраныМира.Россия;
//	КонтрагентФизическоеЛицо = Объект.ЮридическоеФизическоеЛицо = Перечисления.NSI_ЮридическоеФизическоеЛицо.ФизическоеЛицо;
//	
//	Элементы.НаименованиеПолное.Заголовок = ?(КонтрагентФизическоеЛицо, НСтр("ru = 'ФИО'"), НСтр("ru = 'Полное наименование'"));
//	Элементы.ГруппаГоловнойКонтрагент.Видимость = Объект.ОбособленноеПодразделение;
//	Элементы.ДокументУдостоверяющийЛичность.Видимость = КонтрагентФизическоеЛицо;
//	Элементы.ГруппаЗаполнениеПоДаннымЕГР.Видимость = ОтобразитьЗаполнениеПоДаннымЕГР;
//	Элементы.ГруппаИНН.Видимость = НЕ Объект.ОбособленноеПодразделение;
//	
//	ДлинаИНН = ?(КонтрагентФизическоеЛицо, 12, 10);
//	Элементы.ИНН.ОграничениеТипа = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(ДлинаИНН));
//	Элементы.ИНН.ПодсказкаВвода = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Введите ИНН %1 цифр'"), ДлинаИНН);
//	
//	Элементы.КнопкаЗаполнитьРеквизитыПоИНН.Видимость = КонтрагентЗарегистрированВРФ
//														И НЕ Объект.ОбособленноеПодразделение
//														И НЕ ОтобразитьЗаполнениеПоДаннымЕГР;
//	
//	Элементы.ГруппаКПП.Видимость = ДоступноКПП(ЭтотОбъект);
//	
//	Элементы.НалоговыйНомер.Видимость = НЕ КонтрагентЗарегистрированВРФ;
//	
//	// ОГРН, ОГРНИП или регистрационный номер для иностранного контрагента
//	Если НЕ КонтрагентЗарегистрированВРФ Тогда
//		Элементы.РегистрационныйНомер.Заголовок= НСтр("ru = 'Рег. номер'");
//		Элементы.РегистрационныйНомер.Подсказка 		= НСтр("ru = 'Регистрационный номер, присвоенный иностранной организации в стране регистрации (инкорпорации)'");
//		Элементы.РегистрационныйНомер.ОтображениеПодсказки = ОтображениеПодсказки.Кнопка;
//		Элементы.РегистрационныйНомер.ПодсказкаВвода 	= НСтр("ru = 'Регистрационный номер в стране регистрации'");
//		Элементы.РегистрационныйНомер.Ширина 			= 28;
//		Элементы.РегистрационныйНомер.Маска 			= "";
//		Элементы.ИНН.Подсказка = НСтр("ru = 'Идентификационный номер налогоплательщика, присваивается иностранной организации 
//											|при первой постановке на учет в налоговом органе Российской Федерации'");
//		Элементы.ИНН.ОтображениеПодсказки = ОтображениеПодсказки.Кнопка;
//	ИначеЕсли КонтрагентФизическоеЛицо Тогда
//		Элементы.РегистрационныйНомер.Заголовок		= НСтр("ru = 'ОГРНИП'");
//		Элементы.РегистрационныйНомер.Подсказка 		= 
//			НСтр("ru = 'Основной государственный регистрационный номер индивидуального предпринимателя, 
//					   |указан в Свидетельстве о государственной регистрации физического лица в качестве ИП'");
//		Элементы.РегистрационныйНомер.ОтображениеПодсказки = ОтображениеПодсказки.Авто;
//		Элементы.РегистрационныйНомер.ПодсказкаВвода 	= "";
//		Элементы.РегистрационныйНомер.Ширина 			= 14;
//		Элементы.РегистрационныйНомер.Маска 			= "999999999999999";
//		Элементы.ИНН.ПодсказкаВвода = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Введите ИНН %1 цифр'"), ДлинаИНН);
//		Элементы.ИНН.Подсказка = НСтр("ru = 'Идентификационный номер налогоплательщика'");
//		Элементы.ИНН.ОтображениеПодсказки = ОтображениеПодсказки.Авто;
//	Иначе
//		// Юридическое лицо
//		Элементы.РегистрационныйНомер.Заголовок= НСтр("ru = 'ОГРН'");
//		Элементы.РегистрационныйНомер.Подсказка 		= 
//			НСтр("ru = 'Основной государственный регистрационный номер юридического лица'");
//		Элементы.РегистрационныйНомер.ОтображениеПодсказки = ОтображениеПодсказки.Авто;
//		Элементы.РегистрационныйНомер.ПодсказкаВвода 	= "";
//		Элементы.РегистрационныйНомер.Маска 			= "9999999999999";
//		Элементы.ИНН.Подсказка = НСтр("ru = 'Идентификационный номер налогоплательщика'");
//		Элементы.ИНН.ОтображениеПодсказки = ОтображениеПодсказки.Авто;
//	КонецЕсли;
//	
//	Элементы.ДекорацияОтступСлева.Видимость = КонтрагентФизическоеЛицо;
//	
//	Элементы.КодПоОКПО.Видимость = КонтрагентЗарегистрированВРФ;
//	Элементы.СтранаРегистрации.Видимость = НЕ Объект.ГосударственныйОрган;
//	Элементы.ГруппаРегистрацияКакИП.Видимость = КонтрагентФизическоеЛицо;
//	Элементы.ГруппаГосударственныйОрган.Видимость = Объект.ГосударственныйОрган;
//	Элементы.КнопкаЗаполнитьРеквизитыПоНаименованию.Видимость = КонтрагентЗарегистрированВРФ
//		И НЕ КонтрагентФизическоеЛицо 
//		И НЕ Объект.ОбособленноеПодразделение
//		И НЕ ОтобразитьЗаполнениеПоДаннымЕГР;
//	
//КонецПроцедуры

//&НаСервере
//Процедура ИННПриИзмененииНаСервере()
//	
//	ПроверитьИНН = Истина;
//	ПроверитьКПП = Ложь;
//	
//	ПроверитьИННКППДубли(ПроверитьИНН, ПроверитьКПП);
//	
//	Если НЕ Объект.ОбособленноеПодразделение 
//		И Объект.СтранаРегистрации = Справочники.СтраныМира.Россия
//		И ЗначениеЗаполнено(Объект.ИНН)
//		И Объект.ИННВведенКорректно 
//		И НЕ ЗначениеЗаполнено(Объект.Наименование) 
//		И (НЕ ЗначениеЗаполнено(КонтактнаяИнформацияПолеЮрАдресКонтрагента) 
//		ИЛИ КонтактнаяИнформацияПолеЮрАдресКонтрагента = УправлениеКонтактнойИнформациейКлиентСерверБП.ПредставлениеПустойГиперссылки()) Тогда
//		
//		ОписаниеОшибки = "";
//		ЗаполнитьРеквизитыПоИНННаСервере(ОписаниеОшибки);
//		
//	Иначе
//		УстановитьВидимостьЭлементов();
//	КонецЕсли;
//	
//КонецПроцедуры

//&НаСервере
//Процедура КПППриИзмененииНаСервере()
//	
//	Справочники.Контрагенты.УстановитьАктуальноеЗначениеИсторииКПП(Объект.КПП , Объект.ИсторияКПП);
//	
//	ПроверитьИНН = Ложь;
//	ПроверитьКПП = Истина;
//	
//	ПроверитьИННКППДубли(ПроверитьИНН, ПроверитьКПП);
//	
//КонецПроцедуры

//&НаСервере
//Процедура СтранаРегистрацииПриИзмененииНаСервере()
//	
//	Если Объект.СтранаРегистрации <> Справочники.СтраныМира.Россия Тогда
//		Объект.КПП = "";
//	Иначе
//		Объект.РегистрационныйНомер = "";
//	КонецЕсли;
//	
//	УстановитьИННОбособленногоПодразделения(Объект);
//	
//	ПроверитьИНН = Истина;
//	ПроверитьКПП = Истина;
//	
//	ПроверитьИННКППДубли(ПроверитьИНН, ПроверитьКПП);
//	
//	УстановитьВидимостьЭлементов();
//	
//КонецПроцедуры

//&НаСервере
//Процедура ВидПриИзмененииНаСервере()
//	
//	Если Вид = "ФизическоеЛицо" Тогда
//		Объект.ЮридическоеФизическоеЛицо	= Перечисления.NSI_ЮридическоеФизическоеЛицо.ФизическоеЛицо;
//		Объект.ИНН							= ?(Объект.СтранаРегистрации = Справочники.СтраныМира.Россия, "", Объект.ИНН);
//		Объект.КПП							= "";
//		Объект.ОбособленноеПодразделение	= Ложь;
//		Объект.ГосударственныйОрган         = Ложь;
//		Объект.ВидГосударственногоОргана        = Перечисления.ВидыГосударственныхОрганов.ПустаяСсылка();
//		Объект.КодГосударственногоОргана        = "";
//		Если Объект.ГоловнойКонтрагент <> Объект.Ссылка Тогда
//			Объект.ГоловнойКонтрагент = Объект.Ссылка;
//		КонецЕсли;
//	ИначеЕсли Вид = "ОбособленноеПодразделение" Тогда
//		Объект.ЮридическоеФизическоеЛицо        = Перечисления.NSI_ЮридическоеФизическоеЛицо.ЮридическоеЛицо;
//		Объект.ИНН                              = "";
//		Объект.ДокументУдостоверяющийЛичность   = "";
//		Объект.ОбособленноеПодразделение        = Истина;
//		Объект.ГосударственныйОрган             = Ложь;
//		Объект.ВидГосударственногоОргана        = Перечисления.ВидыГосударственныхОрганов.ПустаяСсылка();
//		Объект.КодГосударственногоОргана        = "";
//		Если Объект.ГоловнойКонтрагент = Объект.Ссылка Тогда
//			Объект.ГоловнойКонтрагент = Неопределено;
//		КонецЕсли;
//	ИначеЕсли Вид = "ГосударственныйОрган" Тогда
//		Объект.ЮридическоеФизическоеЛицо        = Перечисления.NSI_ЮридическоеФизическоеЛицо.ЮридическоеЛицо;
//		Объект.ДокументУдостоверяющийЛичность   = "";
//		Объект.ОбособленноеПодразделение        = Ложь;
//		Объект.СтранаРегистрации                = Справочники.СтраныМира.Россия;
//		Объект.ГосударственныйОрган             = Истина;
//		Если Объект.ГоловнойКонтрагент <> Объект.Ссылка Тогда
//			Объект.ГоловнойКонтрагент = Объект.Ссылка;
//		КонецЕсли;
//	Иначе
//		Объект.ЮридическоеФизическоеЛицо        = Перечисления.NSI_ЮридическоеФизическоеЛицо.ЮридическоеЛицо;
//		Объект.ИНН                              = ?(Объект.СтранаРегистрации = Справочники.СтраныМира.Россия, "", Объект.ИНН);
//		Объект.КПП                              = "";
//		Объект.ДокументУдостоверяющийЛичность   = "";
//		Объект.ОбособленноеПодразделение        = Ложь;
//		Объект.ГосударственныйОрган             = Ложь;
//		Объект.ВидГосударственногоОргана        = Перечисления.ВидыГосударственныхОрганов.ПустаяСсылка();
//		Объект.КодГосударственногоОргана        = "";
//		Если Объект.ГоловнойКонтрагент <> Объект.Ссылка Тогда
//			Объект.ГоловнойКонтрагент = Объект.Ссылка;
//		КонецЕсли;
//	КонецЕсли;
//	
//	ПроверитьИНН = Истина;
//	ПроверитьКПП = Истина;
//	
//	ПроверитьИННКППДубли(ПроверитьИНН, ПроверитьКПП);
//	
//	УстановитьВидимостьЭлементов();
//	
//	УправлениеФормой(ЭтаФорма);
//	
//КонецПроцедуры

//&НаСервереБезКонтекста
//Функция СтруктураДляПроверкиИННиКПП(Объект, ПроверятьИНН, ПроверятьКПП)
//	
//	СтруктураДляПроверкиИННиКПП = Новый Структура();
//	
//	СтруктураДляПроверкиИННиКПП.Вставить("СтранаРегистрации",                     Объект.СтранаРегистрации);
//	СтруктураДляПроверкиИННиКПП.Вставить("ИНН",                                   Объект.ИНН);
//	СтруктураДляПроверкиИННиКПП.Вставить("КПП",                                   Объект.КПП);
//	СтруктураДляПроверкиИННиКПП.Вставить("ЮридическоеФизическоеЛицо",             Объект.ЮридическоеФизическоеЛицо);
//	СтруктураДляПроверкиИННиКПП.Вставить("ОбособленноеПодразделение",             Объект.ОбособленноеПодразделение);
//	СтруктураДляПроверкиИННиКПП.Вставить("ПроверитьИНН",                          ПроверятьИНН);
//	СтруктураДляПроверкиИННиКПП.Вставить("ПроверитьКПП",                          ПроверятьКПП);
//	СтруктураДляПроверкиИННиКПП.Вставить("ЦветВыделенияНекорректногоЗначение",    ЦветаСтиля.ЦветВыделенияКонтрагентаСОшибкой);
//	
//	Возврат СтруктураДляПроверкиИННиКПП;
//	
//КонецФункции

//&НаКлиенте
//Процедура ЗаполнитьРеквизитыПоИННЗавершение(Ответ, ДопПараметры) Экспорт
//	
//	Если Ответ = КодВозвратаДиалога.Да Тогда
//		ВыполнитьЗаполнениеРеквизитовПоИНН();
//	КонецЕсли;
//	
//КонецПроцедуры 

//&НаКлиенте
//Процедура ВыполнитьЗаполнениеРеквизитовПоИНН(ПроверитьИНН = Ложь)
//	
//	ОписаниеОшибки = "";
//	ЗаполнитьРеквизитыПоИНННаСервере(ОписаниеОшибки, ПроверитьИНН);
//	
//	Если ЗначениеЗаполнено(ОписаниеОшибки) Тогда
//		// Обработка ошибок
//		Если ОписаниеОшибки = "НеУказаныПараметрыАутентификации" Тогда
//			ТекстВопроса = НСтр("ru='Для автоматического заполнения реквизитов контрагентов
//				|необходимо подключиться к Интернет-поддержке пользователей.
//				|Подключиться сейчас?'");
//			ОписаниеОповещения = Новый ОписаниеОповещения("ПодключитьИнтернетПоддержку", ЭтотОбъект);
//			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
//		Иначе
//			ПоказатьПредупреждение(, ОписаниеОшибки);
//		КонецЕсли;
//	ИначеЕсли ПроверкаКонтрагентовПоИННКППВозможна Тогда
//		// Проверка юридического лица по данным сервиса ИФНС после заполнения реквизитов (мог измениться КПП).
//		ПроверитьКонтрагента();
//	КонецЕсли;
//	
//КонецПроцедуры 

//&НаСервере
//Процедура ЗаполнитьРеквизитыПоИНННаСервере(ОписаниеОшибки = "", ПроверитьИНН = Ложь)
//	
//	Если ОтобразитьЗаполнениеПоДаннымЕГР Тогда
//		// Если нужно проверить ИНН, то берем из объекта (используется для заполнению по наименованию)
//		Если ПроверитьИНН Тогда
//			ИННОбъекта = Объект.ИНН
//		Иначе
//			ИННОбъекта = СокрЛП(ПолеПоискаИНННаименование);
//			// Запустим проверку после заполнения
//			ПроверитьИНН = Истина;
//		КонецЕсли;
//		
//		// Если заполняем по полю поиска, то установим вид контрагента
//		Если СтрДлина(ИННОбъекта) = 10 Тогда
//			Объект.ЮридическоеФизическоеЛицо = Перечисления.NSI_ЮридическоеФизическоеЛицо.ЮридическоеЛицо;
//			Вид = "ЮридическоеЛицо";
//		Иначе
//			Объект.ЮридическоеФизическоеЛицо = Перечисления.NSI_ЮридическоеФизическоеЛицо.ФизическоеЛицо;
//			Вид = "ФизическоеЛицо";
//		КонецЕсли;
//		
//		Объект.ОбособленноеПодразделение = Ложь;
//		
//	Иначе
//		ИННОбъекта = Объект.ИНН;
//	КонецЕсли;
//	
//	ЭтоЮрЛицо = Объект.ЮридическоеФизическоеЛицо = Перечисления.NSI_ЮридическоеФизическоеЛицо.ЮридическоеЛицо;
//	
//	Если ЭтоЮрЛицо Тогда
//		РеквизитыКонтрагента = ДанныеЕдиныхГосРеестров.РеквизитыЮридическогоЛицаПоИНН(ИННОбъекта);
//	Иначе
//		РеквизитыКонтрагента = ДанныеЕдиныхГосРеестров.РеквизитыПредпринимателяПоИНН(ИННОбъекта);
//	КонецЕсли;
//	Если ЗначениеЗаполнено(РеквизитыКонтрагента.ОписаниеОшибки) Тогда
//		ОписаниеОшибки = РеквизитыКонтрагента.ОписаниеОшибки;
//		Возврат;
//	КонецЕсли;
//	
//	ЗаполнитьЗначенияСвойств(Объект, РеквизитыКонтрагента);
//	Объект.НаименованиеПолное = РеквизитыКонтрагента.НаименованиеСокращенное;
//	ФормироватьНаименованиеПолноеАвтоматически = ПустаяСтрока(Объект.НаименованиеПолное)
//		ИЛИ (Объект.НаименованиеПолное = Объект.Наименование);
//	
//	НаименованияАвтозаполнения.Очистить();
//	НаименованияАвтозаполнения.Добавить(РеквизитыКонтрагента.НаименованиеПолное);
//	НаименованияАвтозаполнения.Добавить(РеквизитыКонтрагента.НаименованиеСокращенное);
//	
//	Если ЭтоЮрЛицо Тогда
//		
//		// Заполнение адресов
//		
//		ЗаполнитьЭлементКонтактнойИнформации("КонтактнаяИнформацияПолеЮрАдресКонтрагента", РеквизитыКонтрагента.ЮридическийАдрес);
//		
//		ЗаполнитьЭлементКонтактнойИнформации("КонтактнаяИнформацияПолеФактАдресКонтрагента", РеквизитыКонтрагента.ЮридическийАдрес);
//		ЮрФактАдресаСовпадают = Истина;
//		
//		ЗаполнитьЭлементКонтактнойИнформации("КонтактнаяИнформацияПолеПочтовыйАдресКонтрагента", РеквизитыКонтрагента.ЮридическийАдрес);
//		ЮрПочтовыйАдресаСовпадают = Истина;
//		
//		// Заполнение телефона
//		
//		ЗаполнитьЭлементКонтактнойИнформации("КонтактнаяИнформацияПолеТелефонКонтрагента", РеквизитыКонтрагента.Телефон);
//		
//		// Заполнение контактного лица 
//		
//		Если РеквизитыКонтрагента.Руководитель <> Неопределено 
//			И НЕ ЗначениеЗаполнено(Объект.ОсновноеКонтактноеЛицо) Тогда
//			
//			ДанныеКонтактногоЛица = РеквизитыКонтрагента.Руководитель;
//			ПредставлениеКонтактногоЛица = ДанныеКонтактногоЛица.Фамилия
//				+ " " + ДанныеКонтактногоЛица.Имя
//				+ " " + ДанныеКонтактногоЛица.Отчество
//				+ ", " + ДанныеКонтактногоЛица.Должность;
//			
//		КонецЕсли;
//		
//		Если ДоступноКПП(ЭтотОбъект) Тогда
//			Справочники.Контрагенты.УстановитьАктуальноеЗначениеИсторииКПП(Объект.КПП , Объект.ИсторияКПП);
//		КонецЕсли;
//			
//	Иначе
//		
//		Объект.КПП = "";
//		СвидетельствоОРегистрации = РеквизитыКонтрагента.СвидетельствоОРегистрации;
//		Если СвидетельствоОРегистрации <> Неопределено Тогда
//			Объект.СвидетельствоСерияНомер = "" + СвидетельствоОРегистрации.Серия + " " + СвидетельствоОРегистрации.Номер;
//			Объект.СвидетельствоДатаВыдачи = СвидетельствоОРегистрации.Дата;
//		КонецЕсли;
//		
//	КонецЕсли;
//	
//	// Проверим дубли
//	ПроверитьИННКППДубли(ПроверитьИНН, Истина);
//	
//	УстановитьВидимостьЭлементов();
//	УправлениеФормой(ЭтотОбъект);
//	Модифицированность = Истина;
//	
//КонецПроцедуры

//&НаСервере
//Процедура ЗаполнитьЭлементКонтактнойИнформации(ИмяРеквизита, СтруктураДанных)
//	
//	Если СтруктураДанных = Неопределено Тогда
//		Возврат;
//	КонецЕсли;
//	
//	Отбор  = Новый Структура("ИмяРеквизита", ИмяРеквизита);
//	Строки = ЭтотОбъект.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.НайтиСтроки(Отбор);
//	ДанныеСтроки = ?(Строки.Количество() = 0, Неопределено, Строки[0]);
//	Если ДанныеСтроки = Неопределено Тогда
//		Возврат;
//	КонецЕсли;
//	ЗаполнитьЗначенияСвойств(ДанныеСтроки, СтруктураДанных);
//	ДанныеСтроки.ЗначенияПолей = СтруктураДанных.КонтактнаяИнформация;
//	ЭтотОбъект[ИмяРеквизита]   = СтруктураДанных.Представление;
//	
//КонецПроцедуры

//&НаКлиенте
//Процедура ПодключитьИнтернетПоддержку(Ответ, ДопПараметры) Экспорт

//	Если Ответ = КодВозвратаДиалога.Да Тогда
//		ОписаниеОповещения = Новый ОписаниеОповещения("ПодключитьИнтернетПоддержкуЗавершение", ЭтотОбъект, ДопПараметры);
//		ИнтернетПоддержкаПользователейКлиент.ПодключитьИнтернетПоддержкуПользователей(ОписаниеОповещения);
//	КонецЕсли;

//КонецПроцедуры

//&НаКлиенте
//Процедура ПодключитьИнтернетПоддержкуЗавершение(Результат, ДопПараметры) Экспорт
//	
//	Если Результат <> Неопределено Тогда
//		ВыполнитьЗаполнениеРеквизитовПоИНН();
//	КонецЕсли;
//	
//КонецПроцедуры

//&НаКлиенте
//Процедура Подключаемый_ВключитьЗаполнениеПоИНН()
//	
//	ОтключитьЗаполнениеПоИНН = Неопределено;
//	
//КонецПроцедуры

//&НаСервере
//Процедура ЗаполнитьРеквизитыПоТекстуЗаполнения(ТекстЗаполнения)

//	Если ЭтоИНН(ТекстЗаполнения) Тогда
//	
//		Объект.Наименование = "";
//		Объект.ИНН = ТекстЗаполнения;
//		Объект.ЮридическоеФизическоеЛицо = ?(СтрДлина(ТекстЗаполнения) = 10,
//			Перечисления.NSI_ЮридическоеФизическоеЛицо.ЮридическоеЛицо,
//			Перечисления.NSI_ЮридическоеФизическоеЛицо.ФизическоеЛицо);
//		Объект.ОбособленноеПодразделение = Ложь;
//			
//		ЗаполнитьРеквизитыПоИНННаСервере(, Истина);
//		
//		ТекстЗаполнения = Неопределено;
//		
//	ИначеЕсли НЕ ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
//		ОтобразитьЗаполнениеПоДаннымЕГР = Истина;
//	КонецЕсли;
//		
//КонецПроцедуры

//&НаКлиенте
//Процедура ЗаполнитьРеквизитыПоДаннымЕГРНаКлиенте()
//	
//	ПолеПоискаИНННаименование = СокрЛП(ПолеПоискаИНННаименование);
//	
//	Если ПустаяСтрока(ПолеПоискаИНННаименование) Тогда
//		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСТр("ru='Введите ИНН или Наименование'"),, "ПолеПоискаИНННаименование");
//		Возврат;
//	КонецЕсли;
//	
//	Если ОтключитьЗаполнениеПоИНН <> Неопределено Тогда
//		Возврат;
//	КонецЕсли;
//	
//	ЗаполнениеПоИНН = ЭтоИНН(ПолеПоискаИНННаименование);
//	Если ЗначениеЗаполнено(Объект.Наименование) 
//		ИЛИ (ЗначениеЗаполнено(КонтактнаяИнформацияПолеЮрАдресКонтрагента) 
//		И КонтактнаяИнформацияПолеЮрАдресКонтрагента <> УправлениеКонтактнойИнформациейКлиентСерверБП.ПредставлениеПустойГиперссылки()) Тогда
//		ТекстВопроса = НСтр("ru='Перезаполнить текущие реквизиты?'");
//		ДопПараметры = Новый Структура("ЗаполнениеПоИНН", ЗаполнениеПоИНН);
//		ДопПараметры.Вставить("СтрокаПоиска", ПолеПоискаИНННаименование);
//		ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьРеквизитыПоДаннымЕГРЗавершение", ЭтотОбъект, ДопПараметры);
//		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
//	Иначе
//		Если ЗаполнениеПоИНН Тогда
//			ВыполнитьЗаполнениеРеквизитовПоИНН();
//		Иначе 
//			ЗаполнитьРеквизитыПоНаименованиюНаКлиенте(ПолеПоискаИНННаименование);
//		КонецЕсли;
//	КонецЕсли;

//КонецПроцедуры

//&НаКлиенте
//Процедура ЗаполнитьРеквизитыПоДаннымЕГРЗавершение(Результат, ДопПараметры) Экспорт
//	
//	Если Результат <> КодВозвратаДиалога.Да Тогда
//		Возврат;
//	КонецЕсли;
//	
//	Если ДопПараметры.ЗаполнениеПоИНН Тогда
//		ВыполнитьЗаполнениеРеквизитовПоИНН();
//	Иначе 
//		ЗаполнитьРеквизитыПоНаименованиюНаКлиенте(ДопПараметры.СтрокаПоиска);
//	КонецЕсли;
//	
//КонецПроцедуры

//&НаКлиенте
//Процедура ЗаполнитьРеквизитыПоНаименованиюНаКлиенте(Наименование)
//	
//	ПараметрыФормы = Новый Структура;
//	ПараметрыФормы.Вставить("СтрокаПоиска", Наименование);
//	ДопПараметры = Новый Структура;
//	ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьРеквизитыПоНаименованиюЗавершение", ЭтотОбъект, ДопПараметры);
//	ОткрытьФорму("ОбщаяФорма.ЗаполнениеРеквизитовКонтрагента", 
//		ПараметрыФормы, ЭтотОбъект, , , , ОписаниеОповещения);
//	
//КонецПроцедуры

//&НаКлиенте
//Процедура ЗаполнитьРеквизитыПоНаименованиюЗавершение(Результат, ДопПараметры) Экспорт

//	Если НЕ ЗначениеЗаполнено(Результат) 
//		ИЛИ ТипЗнч(Результат) <> Тип("Строка") Тогда
//		Возврат;
//	КонецЕсли;
//	
//	Объект.ИНН = Результат;
//	ВыполнитьЗаполнениеРеквизитовПоИНН(Истина);
//	
//	ТекущийЭлемент = Элементы.Наименование;

//КонецПроцедуры 

//#КонецОбласти

//#КонецОбласти

//#Область ПроцедурыПодсистемыКонтактнаяИнформация

//// СтандартныеПодсистемы.КонтактнаяИнформация

//&НаКлиенте
//Процедура Подключаемый_КонтактнаяИнформацияПриИзменении(Элемент)
//	
//	УправлениеКонтактнойИнформациейКлиент.ПредставлениеПриИзменении(ЭтотОбъект, Элемент);
//	
//	УправлениеФормой(ЭтотОбъект);
//	
//КонецПроцедуры

//&НаКлиенте
//Процедура Подключаемый_КонтактнаяИнформацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
//	
//	Результат = УправлениеКонтактнойИнформациейКлиент.ПредставлениеНачалоВыбора(ЭтотОбъект, Элемент, , СтандартнаяОбработка);
//	ОбновитьКонтактнуюИнформацию(Результат);
//	
//КонецПроцедуры

//&НаКлиенте
//Процедура Подключаемый_КонтактнаяИнформацияОчистка(Элемент, СтандартнаяОбработка)
//	
//	Результат = УправлениеКонтактнойИнформациейКлиент.ПредставлениеОчистка(ЭтотОбъект, Элемент.Имя);
//	ОбновитьКонтактнуюИнформацию(Результат);
//	
//КонецПроцедуры

//&НаКлиенте
//Процедура Подключаемый_КонтактнаяИнформацияВыполнитьКоманду(Команда)
//	
//	Результат = УправлениеКонтактнойИнформациейКлиент.ПодключаемаяКоманда(ЭтотОбъект, Команда.Имя);
//	ОбновитьКонтактнуюИнформацию(Результат);
//	УправлениеКонтактнойИнформациейКлиент.ОткрытьФормуВводаАдреса(ЭтотОбъект, Результат);
//	
//КонецПроцедуры

//&НаСервере
//Функция ОбновитьКонтактнуюИнформацию(Результат = Неопределено)
//	
//	Возврат УправлениеКонтактнойИнформацией.ОбновитьКонтактнуюИнформацию(ЭтотОбъект, Объект, Результат);
//	
//КонецФункции

//// Конец СтандартныеПодсистемы.КонтактнаяИнформация

//#КонецОбласти

//#Область ПроцедурыПодсистемыСвойств

//&НаКлиенте
//Процедура Подключаемый_РедактироватьСоставСвойств()

//	УправлениеСвойствамиКлиент.РедактироватьСоставСвойств(ЭтаФорма, Объект.Ссылка);

//КонецПроцедуры

//&НаСервере
//Процедура ОбновитьЭлементыДополнительныхРеквизитов()

//	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтаФорма, РеквизитФормыВЗначение("Объект"));

//КонецПроцедуры

//#КонецОбласти

//#Область СлужебныеПроцедурыИФункцииБСП

//// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

//&НаСервере
//Процедура ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(ИмяЭлемента, РезультатВыполнения)
//	
//	ДополнительныеОтчетыИОбработки.ВыполнитьНазначаемуюКомандуНаСервере(ЭтаФорма, ИмяЭлемента, РезультатВыполнения);
//	
//КонецПроцедуры

//&НаКлиенте
//Процедура Подключаемый_ВыполнитьНазначаемуюКоманду(Команда)
//	
//	Если НЕ ДополнительныеОтчетыИОбработкиКлиент.ВыполнитьНазначаемуюКомандуНаКлиенте(ЭтаФорма, Команда.Имя) Тогда
//		РезультатВыполнения = Неопределено;
//		ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(Команда.Имя, РезультатВыполнения);
//		ДополнительныеОтчетыИОбработкиКлиент.ПоказатьРезультатВыполненияКоманды(ЭтаФорма, РезультатВыполнения);
//	КонецЕсли;
//	
//КонецПроцедуры

//// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

//// СтандартныеПодсистемы.Печать
//&НаКлиенте
//Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
//	
//	УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтаФорма, Объект);
//	
//КонецПроцедуры
//// Конец СтандартныеПодсистемы.Печать

//// СтандартныеПодсистемы.РаботаСКонтрагентами
//&НаКлиенте
//Процедура Подключаемый_ОбработатьРезультатПроверкиКонтрагентов()
//	ПроверкаКонтрагентовКлиент.ОбработатьРезультатПроверкиКонтрагентовВСправочнике(ЭтотОбъект);
//КонецПроцедуры

//#КонецОбласти

//#Область ОбработчикиКомандФормы

//&НаКлиенте
//Процедура ЗаполнитьРеквизитыИзЭлектроннойПочты(Команда)
//	
//	ДополнительныеПараметры = Новый Структура;
//	ДополнительныеПараметры.Вставить("ВариантЗагрузкиЭД", ПредопределенноеЗначение("Перечисление.ВариантыЗагрузкиЭД.Карточка"));
//	ДополнительныеПараметры.Вставить("Контрагент"       , Объект.Ссылка);
//	ДополнительныеПараметры.Вставить("ГлубинаПоиска"    , 7);
//	ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьРеквизитыИзКарточкиXMLПоЭлектроннойПочтеЗавершение", ЭтотОбъект);
//	ОткрытьФорму("Обработка.ПрямойОбменЭД.Форма.Форма", ДополнительныеПараметры, ЭтаФорма, , , ,ОписаниеОповещения);
//	
//КонецПроцедуры

//&НаКлиенте
//Процедура ЗаполнитьРеквизитыИзФайла(Команда)
//	
//	ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени("ЗагрузкаКарточкиКонтрагентаИзФайла");
//	
//	ОписаниеОповещения = Новый ОписаниеОповещения("ПродолжитьЗагрузкуКарточкиXMLИзФайла", ЭтотОбъект);
//	ОбщегоНазначенияКлиент.ПоказатьВопросОбУстановкеРасширенияРаботыСФайлами(ОписаниеОповещения);
//	
//КонецПроцедуры

//&НаКлиенте
//Процедура ПродолжитьЗагрузкуКарточкиXMLИзФайла(РасширениеПодключено, ДополнительныеПараметры = Неопределено) Экспорт
//	
//	Если РасширениеПодключено = Истина Тогда
//		
//		ДиалогОткрытияФайла                    = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
//		ДиалогОткрытияФайла.Фильтр             = "(*.xml)|*.xml";
//		ДиалогОткрытияФайла.МножественныйВыбор = Ложь;
//		ДиалогОткрытияФайла.Заголовок          = Нстр("ru='Выберите карточку организации'");
//		
//		ОписаниеОповещения = Новый ОписаниеОповещения("ПрочитатьЗагруженныеФайлы", ЭтотОбъект);
//		НачатьПомещениеФайлов(ОписаниеОповещения, , ДиалогОткрытияФайла, Истина, УникальныйИдентификатор);
//	Иначе
//		ТекстСообщения = НСтр("ru = 'Загрузка из файла без установленного расширения невозможна.'");
//		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
//		
//	КонецЕсли;
//	
//КонецПроцедуры

//#КонецОбласти

//#Область СлужебныеПроцедурыИФункции

//&НаКлиенте
//Процедура Подключаемый_ПоказатьИнформациюОЗаполненииРеквизитовИзКарточек()
//	
//	ОбщегоНазначенияБПКлиент.ПоказатьПредупреждениеОбИзменениях("ЗаполнениеРеквизитовКонтрагентаИзКарточек", , НастройкиПредупреждений);
//	
//КонецПроцедуры

//&НаКлиенте
//Процедура ПрочитатьЗагруженныеФайлы(ЗагруженныеФайла, ДополнительныеПараметры) Экспорт
//	
//	Если ЗагруженныеФайла <> Неопределено Тогда
//		ОписаниеФайлов = ЗагруженныеФайла.Получить(0);
//		АдресФайлаXML  = ОписаниеФайлов.Хранение;
//		ЗаполнитьСтруктуруРеквизитовИзФайлаКарточкиXMLНаСервере(АдресФайлаXML);
//		
//		ПроверитьКонтрагента();
//		
//	Иначе
//		Возврат;
//	КонецЕсли;
//	
//КонецПроцедуры

//&НаСервере
//Процедура ЗаполнитьСтруктуруРеквизитовИзФайлаКарточкиXMLНаСервере(АдресФайлаXML)
//	
//	АдресаФайловXML = Новый Массив;
//	АдресаФайловXML.Добавить(АдресФайлаXML);
//	
//	СтруктураРеквизитов = Справочники.Контрагенты.РазобратьКарточкиКонтрагентовXML(АдресаФайловXML);
//	Если ЗначениеЗаполнено(СтруктураРеквизитов) Тогда
//		ВыполнитьЗаполнениеРеквизитовКонтрагента(СтруктураРеквизитов[0].ДанныеКарточки);
//	КонецЕсли;
//	
//КонецПроцедуры

//&НаКлиенте
//Процедура ЗаполнитьРеквизитыИзКарточкиXMLПоЭлектроннойПочтеЗавершение(СтруктураРеквизитов,
//	ДополнительныеПараметры) Экспорт
//	
//	Если Не ЗначениеЗаполнено(СтруктураРеквизитов) Тогда
//		Возврат;
//	КонецЕсли;
//	
//	ВыполнитьЗаполнениеРеквизитовКонтрагента(СтруктураРеквизитов);
//	
//	ПроверитьКонтрагента();
//	
//КонецПроцедуры

//&НаСервере
//Процедура ВыполнитьЗаполнениеРеквизитовКонтрагента(СтруктураРеквизитов)
//	
//	ЭтоЮрЛицо = СтруктураРеквизитов.ЮридическоеФизическоеЛицо = Перечисления.NSI_ЮридическоеФизическоеЛицо.ЮридическоеЛицо;
//	
//	Объект.СтранаРегистрации = Справочники.СтраныМира.Россия;
//	ЗаполнитьЗначенияСвойств(Объект, СтруктураРеквизитов);
//	
//	Если ЗначениеЗаполнено(СтруктураРеквизитов.ЮридическийАдрес) И
//			ЗначениеЗаполнено(СтруктураРеквизитов.ФактическийАдрес) Тогда
//		АдресаСовпадают = ОбщегоНазначения.ДанныеСовпадают(СтруктураРеквизитов.ЮридическийАдрес.Представление,
//			СтруктураРеквизитов.ФактическийАдрес.Представление);
//	Иначе
//		АдресаСовпадают = Ложь;
//	КонецЕсли;
//	
//	Если ЭтоЮрЛицо Тогда
//		Вид = "ЮридическоеЛицо";
//		КПППриИзмененииНаСервере();
//	Иначе
//		Вид = "ФизическоеЛицо";
//	КонецЕсли;
//	
//	ЗаполнитьЭлементКонтактнойИнформации("КонтактнаяИнформацияПолеЮрАдресКонтрагента", СтруктураРеквизитов.ЮридическийАдрес);
//	
//	Если АдресаСовпадают Тогда
//		ЗаполнитьЭлементКонтактнойИнформации("КонтактнаяИнформацияПолеФактАдресКонтрагента", СтруктураРеквизитов.ЮридическийАдрес);
//		ЮрФактАдресаСовпадают = Истина;
//	Иначе
//		ЗаполнитьЭлементКонтактнойИнформации("КонтактнаяИнформацияПолеФактАдресКонтрагента", СтруктураРеквизитов.ФактическийАдрес);
//		ЮрФактАдресаСовпадают = Ложь;
//	КонецЕсли;
//	
//	ЗаполнитьЭлементКонтактнойИнформации("КонтактнаяИнформацияПолеПочтовыйАдресКонтрагента", СтруктураРеквизитов.ЮридическийАдрес);
//	ЮрПочтовыйАдресаСовпадают = Истина;
//	
//	ЗаполнитьЭлементКонтактнойИнформации("КонтактнаяИнформацияПолеТелефонКонтрагента", Новый Структура("КонтактнаяИнформация, Представление",
//		"", СтруктураРеквизитов.Телефон));
//	ЗаполнитьЭлементКонтактнойИнформации("КонтактнаяИнформацияПолеEmailКонтрагента", Новый Структура("КонтактнаяИнформация, Представление",
//		"", СтруктураРеквизитов.АдресЭлектроннойПочты));
//		
//	Если ЗначениеЗаполнено(СтруктураРеквизитов.НомерСчета) Тогда
//		ДанныеРасчетногоСчета = СтруктураРеквизитов;
//		ДанныеРасчетногоСчета.Вставить("ЭтоЭлектронныйДокумент", Истина);
//	КонецЕсли;
//	
//	Если ЗначениеЗаполнено(СтруктураРеквизитов.Руководитель) Тогда
//		
//		ФИОРуководителя = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтруктураРеквизитов.Руководитель, " ");
//		ДанныеКонтактногоЛица = Новый Структура("Фамилия, Имя, Отчество, Должность",
//			?(ФИОРуководителя.Количество() >= 1, ФИОРуководителя[0], Неопределено),
//			?(ФИОРуководителя.Количество() >= 2, ФИОРуководителя[1], Неопределено),
//			?(ФИОРуководителя.Количество() >= 3, ФИОРуководителя[2], Неопределено),
//			СтруктураРеквизитов.ДолжностьРуководителя);
//		
//	КонецЕсли;
//	
//	ИННПриИзмененииНаСервере();
//	
//	ОтобразитьЗаполнениеПоДаннымЕГР = Ложь;
//	
//	УстановитьВидимостьЭлементов();
//	УправлениеФормой(ЭтотОбъект);
//	Модифицированность = Истина;
//	
//КонецПроцедуры

//&НаКлиентеНаСервереБезКонтекста
//Процедура УстановитьПустоеПредставлениеАдреса(Форма)
//	
//	Для Каждого Реквизит ИЗ Форма.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов Цикл
//		Если ПустаяСтрока(Форма[Реквизит.ИмяРеквизита]) Тогда
//			Элемент = Форма.Элементы[Реквизит.ИмяРеквизита];
//			Если Элемент.Вид = ВидПоляФормы.ПолеНадписи И Элемент.Гиперссылка Тогда
//				Форма[Реквизит.ИмяРеквизита] = УправлениеКонтактнойИнформациейКлиентСерверБП.ПредставлениеПустойГиперссылки();
//			КонецЕсли;
//		КонецЕсли;
//	КонецЦикла;
//	
//КонецПроцедуры

//#КонецОбласти

//#Область ИсторияКПП

//&НаСервере
//Процедура УстановитьКПППослеРедактированияИстории(НаборЗаписей)
//	
//	Модифицированность = Истина;
//	
//	НаборЗаписей.Сортировать("Период");
//	
//	Объект.ИсторияКПП.Очистить();
//	Если НаборЗаписей.Количество() > 1 Тогда
//		Для Каждого ЗаписьНабора Из НаборЗаписей Цикл
//			ЗаписьИстории = Объект.ИсторияКПП.Добавить();
//			ЗаполнитьЗначенияСвойств(ЗаписьИстории, ЗаписьНабора);
//		КонецЦикла;
//	КонецЕсли;
//	
//	Объект.КПП = НаборЗаписей[НаборЗаписей.Количество()-1].КПП;
//	КПППриИзмененииНаСервере();
//	
//КонецПроцедуры

//&НаКлиентеНаСервереБезКонтекста
//Функция ДоступноКПП(Форма)
//	
//	КонтрагентЗарегистрированВРФ = Форма.Объект.СтранаРегистрации = ПредопределенноеЗначение("Справочник.СтраныМира.Россия");
//	КонтрагентФизическоеЛицо = Форма.Объект.ЮридическоеФизическоеЛицо = ПредопределенноеЗначение("Перечисление.NSI_ЮридическоеФизическоеЛицо.ФизическоеЛицо");
//	
//	Возврат НЕ КонтрагентФизическоеЛицо И КонтрагентЗарегистрированВРФ;
//	
//КонецФункции

//&НаСервереБезКонтекста
//Процедура УстановитьИННОбособленногоПодразделения(Объект)
//	
//	Если Объект.ОбособленноеПодразделение 
//		И ЗначениеЗаполнено(Объект.ГоловнойКонтрагент) Тогда
//		
//		ИННГоловногоКонтрагента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ГоловнойКонтрагент, "ИНН");
//		Если Объект.ИНН <> ИННГоловногоКонтрагента Тогда
//			Объект.ИНН = ИННГоловногоКонтрагента;
//		КонецЕсли;
//		
//	КонецЕсли;
//	
//КонецПроцедуры

//&НаКлиенте
//Процедура ИсторияКППНажатие(Элемент)
//	
//	ПараметрыФормы = Новый Структура("ТекущийКПП, ИсторияКПП, ТолькоПросмотр", 
//					Объект.КПП, Объект.ИсторияКПП, ТолькоПросмотр);
//	
//	ОткрытьФорму("Справочник.Контрагенты.Форма.РедактированиеИсторииКПП", ПараметрыФормы, ЭтотОбъект);
//	
//КонецПроцедуры

//#КонецОбласти