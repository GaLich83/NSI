&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
	Иначе
		Об = РеквизитФормыВЗначение("Объект");
		Об.УстановитьСсылкуНового(Справочники.NSI_ВидыМД.ПолучитьСсылку(Новый УникальныйИдентификатор));
	КонецЕсли;
	//ТаблицаЗначенийОписаниеПолей = NSI_РаботаСМастерДаннымиСерверПовторноеИспользование.ПолучитьОписаниеПолей(Объект.Ссылка);
	ТаблицаЗначенийОписаниеПолей = Объект.ОписаниеПолей.Выгрузить();
	ХэшДанныхОписанияПолей = NSI_РаботаСМастерДаннымиСервер.ПолучитьХэш(ТаблицаЗначенийОписаниеПолей);
	//NSI_РаботаСМастерДаннымиСервер.СоздатьТаблицуЗначенийНаФорме(ЭтаФорма, ТаблицаЗначенийОписаниеПолей, "ОписаниеПолей", "ИмяПоля, СинонимПоля, ИспользованиеПоля, Ключевое, Индексируемое, Периодическое");
	//НовыйРеквизит = Новый РеквизитФормы("ТипПоля", Новый ОписаниеТипов("ОписаниеТипов"), ИмяТаблицы, ПреобразоватьИмяЭлементаВТекст(Колонка.Имя));
	ТаблицаЗначенийОписаниеПолей.Колонки.Добавить("ТипПоляОписание", Новый ОписаниеТипов("ОписаниеТипов"));
	Для Каждого СтрокаОписаниеПолей Из ТаблицаЗначенийОписаниеПолей Цикл
		Если ЗначениеЗаполнено(СтрокаОписаниеПолей.ТипПоля) Тогда
			СтрокаОписаниеПолей.ТипПоляОписание = NSI_РаботаСМастерДаннымиСервер.ПрочитатьОбъектИзXML(СтрокаОписаниеПолей.ТипПоля);
		КонецЕсли;
	КонецЦикла;
	ТаблицаЗначенийОписаниеПолей.Колонки.Удалить("ТипПоля");
	ТаблицаЗначенийОписаниеПолей.Колонки.ТипПоляОписание.Имя = "ТипПоля";
	ЗначениеВРеквизитФормы(ТаблицаЗначенийОписаниеПолей, "ОписаниеПолей");
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		СписокКРазблокировке = Новый Массив;
		Попытка
		ЗаблокироватьДанныеДляРедактирования(Объект.Ссылка, , УникальныйИдентификатор);
		СписокКРазблокировке.Добавить("Объект");
		Отказ = Отказ ИЛИ Не NSI_РаботаСМастерДаннымиСервер.ЗаблокироватьДанныеПодчиненногоСправочникаДляИзменений(Объект.Ссылка, "NSI_МастерДанные", УникальныйИдентификатор);
		СписокКРазблокировке.Добавить("NSI_МастерДанные");
		Если Отказ Тогда
			ВызватьИсключение "Ошибка блокировки";
		КонецЕсли;
		Исключение
			Сообщить("Объект уже редактируется");
			Для Каждого ОбъектДляРазблокировки Из СписокКРазблокировке Цикл
				Если ОбъектДляРазблокировки = "Объект" Тогда
					РазблокироватьДанныеДляРедактирования(Объект.Ссылка, УникальныйИдентификатор);		
				Иначе
					NSI_РаботаСМастерДаннымиСервер.РазблокироватьДанныеПодчиненногоСправочникаДляИзменений(Объект.Ссылка, ОбъектДляРазблокировки, УникальныйИдентификатор);
				КонецЕсли;
			КонецЦикла;
			Отказ = Истина;
			СтандартнаяОбработка = Ложь;
			Возврат;
		КонецПопытки;		
	КонецЕсли;
	Элементы.Переместить(Элементы["ОписаниеПолей"], Элементы.СтраницаОписанияПолей);
	Если ЗначениеЗаполнено(Объект.МакетФормыМетаданныхЭлемента) Тогда
		МакетРасположенияЭлемента = NSI_РаботаСМастерДаннымиСервер.ПрочитатьОбъектИзXML(Объект.МакетФормыМетаданныхЭлемента);
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.МакетФормыМетаданныхГруппы) Тогда
		МакетРасположенияГруппы = NSI_РаботаСМастерДаннымиСервер.ПрочитатьОбъектИзXML(Объект.МакетФормыМетаданныхГруппы);
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.МакетДляЗаполненияМД) Тогда
		МакетЗаполненияДанных = NSI_РаботаСМастерДаннымиСервер.ПрочитатьОбъектИзXML(Объект.МакетДляЗаполненияМД);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ГруппаСтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	Если ТекущаяСтраница=Элементы.СтраницаРасположениеЭлемент Тогда
		NSI_РаботаСМастерДаннымиСервер.ПолучитьСписокДоступныхПолейМастерДанных(ЭтаФорма["ОписаниеПолей"], СписокПолейЭлемента, Ложь);
	ИначеЕсли ТекущаяСтраница = Элементы.СтраницаРасположениеГруппа Тогда
		NSI_РаботаСМастерДаннымиСервер.ПолучитьСписокДоступныхПолейМастерДанных(ЭтаФорма["ОписаниеПолей"], СписокПолейГруппы, Истина);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СписокПолейНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.Перемещение;
	ПараметрыПеретаскивания.Значение = Элемент.ТекущиеДанные.Значение;
КонецПроцедуры

&НаКлиенте                                                                                 
Процедура МакетРасположенияПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Область)
	Если ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Строка") Тогда
		ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.Перемещение;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	ТаблицаЗначенийОписания = РеквизитФормыВЗначение("ОписаниеПолей");
	ТаблицаЗначенийОписания.Колонки.ТипПоля.Имя = "ТипПоляОписание";
	ТаблицаЗначенийОписания.Колонки.Добавить("ТипПоля", Новый ОписаниеТипов("Строка"));
	Для Каждого СтрокаОписания Из ТаблицаЗначенийОписания Цикл
		СтрокаОписания.ТипПоля = NSI_РаботаСМастерДаннымиСервер.ЗаписатьОбъектВXML(СтрокаОписания.ТипПоляОписание);
	КонецЦикла;
	ТаблицаЗначенийОписания.Колонки.Удалить("ТипПоляОписание");
	ТекущийОбъект.ОписаниеПолей.Загрузить(ТаблицаЗначенийОписания);
	NSI_РаботаСМастерДаннымиСервер.ПолучитьСписокДоступныхПолейМастерДанных(ТекущийОбъект.ОписаниеПолей, СписокПолейГруппы, Истина);
	NSI_РаботаСМастерДаннымиСервер.ПолучитьСписокДоступныхПолейМастерДанных(ТекущийОбъект.ОписаниеПолей, СписокПолейЭлемента, Ложь);
	ПроверитьЗаполнениеМакетовДанных(Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	ТЗОписания = РеквизитФормыВЗначение("ОписаниеПолей");
	ОписаниеПолейГруппы = ТЗОписания.СкопироватьКолонки();
	ОписаниеПолейЭлемента = ТЗОписания.СкопироватьКолонки();
	Для Каждого Строк Из ТЗОписания Цикл
		Если Строк.ИспользованиеПоля = Перечисления.NSI_ИспользованиеПоляМД.ДляГруппы Тогда
			НоваяСтрокаГруппы = ОписаниеПолейГруппы.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаГруппы, Строк);
			Продолжить;
		КонецЕсли;
		Если Строк.ИспользованиеПоля = Перечисления.NSI_ИспользованиеПоляМД.ДляЭлемента Тогда
			НоваяСтрокаЭлемента = ОписаниеПолейЭлемента.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаЭлемента, Строк);
			Продолжить;
		КонецЕсли;
		НоваяСтрокаЭлемента = ОписаниеПолейЭлемента.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаЭлемента, Строк);
		НоваяСтрокаГруппы = ОписаниеПолейГруппы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаГруппы, Строк);
	КонецЦикла;
	Отказ = Отказ ИЛИ Не NSI_РаботаСМастерДаннымиСервер.ОбновитьХэшиВсехМД(Объект.Ссылка, ОписаниеПолейГруппы, ОписаниеПолейЭлемента);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	ТекущийОбъект.МакетФормыМетаданныхЭлемента = NSI_РаботаСМастерДаннымиСервер.ЗаписатьОбъектВXML(МакетРасположенияЭлемента);
	ТекущийОбъект.МакетФормыМетаданныхГруппы = NSI_РаботаСМастерДаннымиСервер.ЗаписатьОбъектВXML(МакетРасположенияГруппы);
	ТекущийОбъект.МакетДляЗаполненияМД = NSI_РаботаСМастерДаннымиСервер.ЗаписатьОбъектВXML(МакетЗаполненияДанных);
КонецПроцедуры

&НаСервере
Процедура ПроверитьЗаполнениеМакетовДанных(Отказ)
	Отказ = Отказ ИЛИ Не NSI_РаботаСМастерДаннымиСервер.ПроверитьМакетВидаМастерДанных(МакетРасположенияГруппы, СписокПолейГруппы);
	Если Отказ Тогда
		Сообщить("Некорректное заполнение макета группы");
		Возврат;
	КонецЕсли;
	Отказ = Отказ ИЛИ Не NSI_РаботаСМастерДаннымиСервер.ПроверитьМакетВидаМастерДанных(МакетРасположенияЭлемента, СписокПолейЭлемента);
	Если Отказ Тогда
		Сообщить("Некорректное заполнение макета элемента");
		Возврат;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьМакет(Команда)
	Если Команда = Команды.Найти("ПроверитьМакетГруппы") Тогда
		МакетРасположения = МакетРасположенияГруппы;
		СписокПолей = СписокПолейГруппы;
	Иначе
		МакетРасположения = МакетРасположенияЭлемента;
		СписокПолей = СписокПолейЭлемента;
	КонецЕсли;
	Если NSI_РаботаСМастерДаннымиСервер.ПроверитьМакетВидаМастерДанных(МакетРасположения, СписокПолей) Тогда
		Сообщить("Макет заполнен правильно");
	Иначе
		Сообщить("Ошибка заполнения макета");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОписаниеПолейПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗаписатьИЗакрыть(Команда)
	ПараметрыЗаписи = Новый Структура;
	ПараметрыЗаписи.Вставить("Закрыть", Истина);
	Если Записать(ПараметрыЗаписи) Тогда
		Закрыть();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	Если Модифицированность Тогда
		Отказ = Истина;
		ТекстВопроса = НСтр("ru = 'Данные были изменены. Сохранить изменения?'");
		Оповещение = Новый ОписаниеОповещения("ВопросПередЗакрытиемЗавершение", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОписаниеПолейИмяПоляПриИзменении(Элемент)
	Элементы.ОписаниеПолей.ТекущиеДанные.СинонимПоля = NSI_РаботаСМастерДаннымиСервер.ПреобразоватьИмяЭлементаВТекст(Элементы.ОписаниеПолей.ТекущиеДанные.ИмяПоля);
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьДанныеИзМакета(Команда)
	Записать();
	ЗагрузитьДанныеИзМакетаНаСервере();
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьДанныеИзМакетаНаСервере()
	Макет = МакетЗаполненияДанных;
	ОписаниеПолейЭлемента = NSI_РаботаСМастерДаннымиСерверПовторноеИспользование.ПолучитьОписаниеПолей(Объект.Ссылка, Ложь);
	ОписаниеПолейГруппы = NSI_РаботаСМастерДаннымиСерверПовторноеИспользование.ПолучитьОписаниеПолей(Объект.Ссылка, Истина);
	ПоследняяСтрока = Макет.ВысотаТаблицы;
	ПоследняяКолонка = Макет.ШиринаТаблицы;
	СоответствиеИменКолонокНомеруКолонки = Новый Соответствие;
	СоответствиеКлючейКолонокРодителя = Новый Соответствие;
	ЕстьЗаписиИерархии = Ложь;
	ЕстьЗаписиГрупп = Ложь;
	Для Ц=1 По ПоследняяКолонка Цикл
		ИмяКолонки = Макет.Область(1,Ц).Текст;
		Если ЗначениеЗаполнено(ИмяКолонки) Тогда
			СоответствиеИменКолонокНомеруКолонки.Вставить(ИмяКолонки, Ц);
			Если Найти(ИмяКолонки, "Родитель")>0 Тогда
				ЕстьЗаписиИерархии = Истина;
			КонецЕсли;
			Если Найти(ИмяКолонки, "ЭтоГруппа")>0 Тогда
				ЕстьЗаписиГрупп = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	ТаблицаОписанияКлючейГруппы = ОписаниеПолейГруппы.Скопировать(Новый Структура("Ключевое", Истина));
	ТаблицаОписанияКлючейЭлемента = ОписаниеПолейЭлемента.Скопировать(Новый Структура("Ключевое", Истина)); 
	//Для Каждого СтрокаТаблицыОписанияКлючей Из ТаблицаОписанияКлючей Цикл
	//	Если Не СтрокаТаблицыОписанияКлючей.Использование = Перечисления.NSI_ИспользованиеПоляМД.ДляГруппы Тогда
	//		НоваяСтрокаОписанияЭлемента = ТаблицаОписанияКлючейЭлемента.Добавить();
	//		ЗаполнитьЗначенияСвойств(НоваяСтрокаОписанияЭлемента, СтрокаТаблицыОписанияКлючей);
	//	КонецЕсли;
	//	Если Не СтрокаТаблицыОписанияКлючей.Использование = Перечисления.NSI_ИспользованиеПоляМД.ДляЭлемента Тогда
	//		НоваяСтрокаОписанияГруппы = ТаблицаОписанияКлючейГруппы.Добавить();
	//		ЗаполнитьЗначенияСвойств(НоваяСтрокаОписанияГруппы, СтрокаТаблицыОписанияКлючей);
	//	КонецЕсли;
	//КонецЦикла;
	// Группы пока пропускаем, потом доделаю
	// Если ЕстьЗаписиГрупп Тогда
	//	Для Ц=2 По ПоследняяСтрока Цикл
	//			
	//	КонецЦикла;
	//КонецЕсли;
	Для Ц=2 По ПоследняяСтрока Цикл
		Если Не ЕстьЗаписиГрупп Тогда
			Продолжить;
		КонецЕсли;
		Если Не Булево(Макет.Область(Ц, СоответствиеИменКолонокНомеруКолонки.Получить("ЭтоГруппа")).Текст) Тогда
			Продолжить;
		КонецЕсли;
		СоответствиеКлюча = Новый Соответствие;
		Для Каждого СтрокаКлючаГруппы Из ТаблицаОписанияКлючейГруппы Цикл
			ТипПоля = NSI_РаботаСМастерДаннымиСервер.ПрочитатьОбъектИзXML(СтрокаКлючаГруппы.ТипПоля);
			ТекстПоля = Макет.Область(Ц, СоответствиеИменКолонокНомеруКолонки.Получить(СтрокаКлючаГруппы.ИмяПоля)).Текст;
			Если ТипПоля.СодержитТип(Тип("СправочникСсылка.NSI_МастерДанные")) Тогда
				СсылкаПоля = Справочники.NSI_МастерДанные.НайтиПоНаименованию(ТекстПоля, Истина);
				Если ЗначениеЗаполнено(СсылкаПоля) Тогда
					ТекстПоля = СсылкаПоля;
				КонецЕсли;
			КонецЕсли;
			ЗначениеПоля = ТипПоля.ПривестиЗначение(ТекстПоля);
			СоответствиеКлюча.Вставить(СтрокаКлючаГруппы.ИмяПоля, ЗначениеПоля);
		КонецЦикла;
		НайденныйСправочник = NSI_РаботаСМастерДаннымиПоиск.НайтиМастерДанныеПоКлючу(СоответствиеКлюча);
		Если НайденныйСправочник = Неопределено Тогда
			НайденныйСправочникОбъект = Справочники.NSI_МастерДанные.СоздатьГруппу();
			НайденныйСправочникОбъект.Владелец = Объект.Ссылка;
			НайденныйСправочникОбъект.Записать();
			НайденныйСправочник = НайденныйСправочникОбъект.Ссылка;
		КонецЕсли;
		ТекущееСоответствиеПолей = Новый Соответствие;
		Для Каждого ОписаниеПоля Из ОписаниеПолейГруппы Цикл
			Если СоответствиеИменКолонокНомеруКолонки.Получить(ОписаниеПоля.ИмяПоля) Тогда
				ТипПоля = NSI_РаботаСМастерДаннымиСервер.ПрочитатьОбъектИзXML(ОписаниеПоля.ТипПоля);
				ТекстПоля = Макет.Область(Ц, СоответствиеИменКолонокНомеруКолонки.Получить(ОписаниеПоля.ИмяПоля)).Текст;
				Если ТипПоля.СодержитТип(Тип("СправочникСсылка.NSI_МастерДанные")) Тогда
					СсылкаПоля = Справочники.NSI_МастерДанные.НайтиПоНаименованию(ТекстПоля, Истина);
					Если ЗначениеЗаполнено(СсылкаПоля) Тогда
						ТекстПоля = СсылкаПоля;
					КонецЕсли;
				КонецЕсли;
				ЗначениеПоля = ТипПоля.ПривестиЗначение(ТекстПоля);
				ТекущееСоответствиеПолей.Вставить(ОписаниеПоля.ИмяПоля, ЗначениеПоля);
			КонецЕсли;
		КонецЦикла;
		NSI_РаботаСМастерДаннымиСервер.ОбновитьЗначенияПолейИИндексыПослеЗаписи(НайденныйСправочник, ОписаниеПолейГруппы, ТекущееСоответствиеПолей);
		ОбъектСправочник = НайденныйСправочник.ПолучитьОбъект();
		Если ЕстьЗаписиИерархии Тогда
			ТекстПоля = Макет.Область(Ц, СоответствиеИменКолонокНомеруКолонки.Получить(ОписаниеПоля.ИмяПоля)).Текст;
			СсылкаПоля = Справочники.NSI_МастерДанные.НайтиПоНаименованию(ТекстПоля, Истина);
			Если ЗначениеЗаполнено(СсылкаПоля) Тогда
				ОбъектСправочник.Родитель = СсылкаПоля;
			КонецЕсли;
		КонецЕсли;
		ОбъектСправочник.Записать();
	КонецЦикла;
	Для Ц=2 По ПоследняяСтрока Цикл
		Если ЕстьЗаписиГрупп И Булево(Макет.Область(Ц, СоответствиеИменКолонокНомеруКолонки.Получить("ЭтоГруппа")).Текст) Тогда
			Продолжить;
		КонецЕсли;
		СоответствиеКлюча = Новый Соответствие;
		Для Каждого СтрокаКлючаЭлемента Из ТаблицаОписанияКлючейЭлемента Цикл
			ТипПоля = NSI_РаботаСМастерДаннымиСервер.ПрочитатьОбъектИзXML(СтрокаКлючаЭлемента.ТипПоля);
			ТекстПоля = Макет.Область(Ц, СоответствиеИменКолонокНомеруКолонки.Получить(СтрокаКлючаЭлемента.ИмяПоля)).Текст;
			Если ТипПоля.СодержитТип(Тип("СправочникСсылка.NSI_МастерДанные")) Тогда
				СсылкаПоля = Справочники.NSI_МастерДанные.НайтиПоНаименованию(ТекстПоля, Истина);
				Если ЗначениеЗаполнено(СсылкаПоля) Тогда
					ТекстПоля = СсылкаПоля;
				КонецЕсли;
			КонецЕсли;
			ЗначениеПоля = ТипПоля.ПривестиЗначение(ТекстПоля);
			СоответствиеКлюча.Вставить(СтрокаКлючаЭлемента.ИмяПоля, ЗначениеПоля);
		КонецЦикла;
		НайденныйСправочник = NSI_РаботаСМастерДаннымиПоиск.НайтиМастерДанныеПоКлючу(СоответствиеКлюча);
		Если НайденныйСправочник = Неопределено Тогда
			НайденныйСправочникОбъект = Справочники.NSI_МастерДанные.СоздатьЭлемент();
			НайденныйСправочникОбъект.Владелец = Объект.Ссылка;
			НайденныйСправочникОбъект.Записать();
			НайденныйСправочник = НайденныйСправочникОбъект.Ссылка;
		КонецЕсли;
		ТекущееСоответствиеПолей = Новый Соответствие;
		Для Каждого ОписаниеПоля Из ОписаниеПолейЭлемента Цикл
			Если СоответствиеИменКолонокНомеруКолонки.Получить(ОписаниеПоля.ИмяПоля) Тогда
				ТипПоля = NSI_РаботаСМастерДаннымиСервер.ПрочитатьОбъектИзXML(ОписаниеПоля.ТипПоля);
				ТекстПоля = Макет.Область(Ц, СоответствиеИменКолонокНомеруКолонки.Получить(ОписаниеПоля.ИмяПоля)).Текст;
				Если ТипПоля.СодержитТип(Тип("СправочникСсылка.NSI_МастерДанные")) Тогда
					СсылкаПоля = Справочники.NSI_МастерДанные.НайтиПоНаименованию(ТекстПоля, Истина);
					Если ЗначениеЗаполнено(СсылкаПоля) Тогда
						ТекстПоля = СсылкаПоля;
					КонецЕсли;
				КонецЕсли;
				ЗначениеПоля = ТипПоля.ПривестиЗначение(ТекстПоля);
				ТекущееСоответствиеПолей.Вставить(ОписаниеПоля.ИмяПоля, ЗначениеПоля);
			КонецЕсли;
		КонецЦикла;
		NSI_РаботаСМастерДаннымиСервер.ОбновитьЗначенияПолейИИндексыПослеЗаписи(НайденныйСправочник, ОписаниеПолейЭлемента, ТекущееСоответствиеПолей);
		ОбъектСправочник = НайденныйСправочник.ПолучитьОбъект();
		Если ЕстьЗаписиИерархии Тогда
			ТекстПоля = Макет.Область(Ц, СоответствиеИменКолонокНомеруКолонки.Получить(ОписаниеПоля.ИмяПоля)).Текст;
			СсылкаПоля = Справочники.NSI_МастерДанные.НайтиПоНаименованию(ТекстПоля, Истина);
			Если ЗначениеЗаполнено(СсылкаПоля) Тогда
				ОбъектСправочник.Родитель = СсылкаПоля;
			КонецЕсли;
		КонецЕсли;
		ОбъектСправочник.Записать();
	КонецЦикла;	                
КонецПроцедуры





