&НаКлиенте
Перем ВыполняетсяЗакрытие;
&НаКлиенте
Перем ЗакрываемФорму;

&НаКлиенте
Процедура ЗаполнитьУЗ(Команда)
	Записать();
	Оповещение = Новый ОписаниеОповещения("ОбработатьЗаполнениеУЗ", ЭтаФорма);
	ПоказатьВопрос(Оповещение, "Обновить данные УЗ IDM по данным УЗ ВИБ?", РежимДиалогаВопрос.ДаНетОтмена)
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьЗаполнениеУЗ(Результат, ДополнительныеПараметры) Экспорт
	Если Результат = КодВозвратаДиалога.Да Тогда
		ЗаполнитьУЗНаСервере(Истина);
	ИначеЕсли Результат = КодВозвратаДиалога.Нет Тогда
		ЗаполнитьУЗНаСервере(Ложь);
	КонецЕсли;
КонецПроцедуры
 

&НаСервере
Процедура ЗаполнитьУЗНаСервере(СоздаватьУЗIDM=Ложь)
	Connector = NSI_МодульПовторногоИспользования.ПолучитьСоединениеПоИмениБазы(Объект.ИмяБазы);
	Результат = Connector.GetUsersName();	
	Если Не ЗначениеЗаполнено(Результат) Тогда
		Сообщить("База "+Объект.ИмяБазы+": метод вернул пустой ответ");
		Возврат;
	КонецЕсли;
	СтруктураОтвета = Результат.Получить();
	Если ЗначениеЗаполнено(СтруктураОтвета.ОписаниеОшибки) Тогда
		Сообщить("База "+Объект.ИмяБазы +": ошибка - "+СтруктураОтвета.ОписаниеОшибки);
		Возврат;
	КонецЕсли;
	Если ЗначениеЗаполнено(СтруктураОтвета.СписокПользователей) Тогда
		МассивСозданныхПользователей = Новый Массив;
		Для Каждого СтрокаПользователя Из СтруктураОтвета.СписокПользователей Цикл
			Если ЗначениеЗаполнено(СтрокаПользователя.ИДПользователя) Тогда
				ИмеющийсяПользователь = Справочники.NSI_УЗВИБ.ПолучитьСсылку(Новый УникальныйИдентификатор(СтрокаПользователя.ИДПользователя));
				Если Найти(Строка(ИмеющийсяПользователь), "<Объект не найден>")=1 Тогда
					ПользовательОбъект = Справочники.NSI_УЗВИБ.СоздатьЭлемент();
					ПользовательОбъект.УстановитьСсылкуНового(ИмеющийсяПользователь);
				Иначе
					ПользовательОбъект = ИмеющийсяПользователь.ПолучитьОбъект();
				КонецЕсли;
				ПользовательОбъект.Владелец = Объект.Ссылка;
				ЗаполнитьЗначенияСвойств(ПользовательОбъект, СтрокаПользователя, "АутентификацияОС, АутентификацияСтандартная, ПолноеИмя, ПользовательОС, СохраняемоеЗначениеПароля, ИДПользователя, ИдентификаторИБ, Язык");
				ПользовательОбъект.Наименование = СтрокаПользователя.Имя;
				ПользовательОбъект.ИДПользователя = СтрокаПользователя.ИДПользователя;
				ПользовательОбъект.Записать();
				МассивСозданныхПользователей.Добавить(ИмеющийсяПользователь);
			КонецЕсли;	
		КонецЦикла;
		Если СоздаватьУЗIDM Тогда
			ЗапросУжеИмеющихсяПользователей = Новый Запрос("ВЫБРАТЬ
			                                               |	УЗIDMУЗВИБ.УЗВИБ,
			                                               |	УЗIDMУЗВИБ.Ссылка.Наименование,
			                                               |	УЗIDMУЗВИБ.Ссылка
			                                               |ИЗ
			                                               |	Справочник.NSI_УЗIDM.УЗВИБ КАК УЗIDMУЗВИБ
			                                               |ГДЕ
			                                               |	УЗIDMУЗВИБ.УЗВИБ В(&УЗВИБ)");
			ЗапросУжеИмеющихсяПользователей.УстановитьПараметр("УЗВИБ", МассивСозданныхПользователей);
			Выборка = ЗапросУжеИмеющихсяПользователей.Выполнить().Выбрать();
			Для Каждого СозданныйПользователь Из МассивСозданныхПользователей Цикл
				Выборка.Сбросить();
				Если Не Выборка.НайтиСледующий(СозданныйПользователь, "УЗВИБ") Тогда
					СсылкаПоНаименованию = Справочники.NSI_УЗIDM.НайтиПоНаименованию(СозданныйПользователь.ПолноеИмя);
					Если ЗначениеЗаполнено(СсылкаПоНаименованию) Тогда
						Об = СсылкаПоНаименованию.ПолучитьОбъект();
						НоваяСтрока = Об.УЗВИБ.Добавить();
						НоваяСтрока.УЗВИБ = СозданныйПользователь;
						Об.ДатаПоследнегоИзменения = ТекущаяДата();
						Об.Записать();
					Иначе
						НоваяУЗIDM = Справочники.NSI_УЗIDM.СоздатьЭлемент();
						НоваяСтрока = НоваяУЗIDM.УЗВИБ.Добавить();
						НоваяСтрока.УЗВИБ = СозданныйПользователь;
						НоваяУЗIDM.LoginAD = СозданныйПользователь.ПользовательОС;
						НоваяУЗIDM.Статус = Перечисления.NSI_СтатусыУЗ.Активна;
						НоваяУЗIDM.ДатаПоследнегоИзменения = ТекущаяДата();
						НоваяУЗIDM.Наименование = СозданныйПользователь.ПолноеИмя;
						НоваяУЗIDM.Записать();
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	Иначе                      
		Сообщить("База "+Объект.ИмяБазы +": ошибка - список пользователей пуст.");
		Возврат;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьРолиВИБ(Команда)
	Записать();
	//Оповещение = Новый ОписаниеОповещения("ОбработатьЗаполнениеРолей", ЭтаФорма);
	ЗаполнитьРолиНаСервере(Ложь);
	//ПоказатьВопрос(Оповещение, "Обновить данные ролей IDM по данным ролей ВИБ?", РежимДиалогаВопрос.ДаНетОтмена)
КонецПроцедуры

//&НаКлиенте
//Процедура ОбработатьЗаполнениеРолей(Результат, ДополнительныеПараметры) Экспорт
//	Если Результат = КодВозвратаДиалога.Да Тогда
//		ЗаполнитьРолиНаСервере(Истина);
//	ИначеЕсли Результат = КодВозвратаДиалога.Нет Тогда
//		ЗаполнитьРолиНаСервере(Ложь);
//	КонецЕсли;
//КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРолиНаСервере(СоздаватьРольIDM=Ложь)
	Connector = NSI_МодульПовторногоИспользования.ПолучитьСоединениеПоИмениБазы(Объект.ИмяБазы);
	
	//Если СоздаватьРольIDM Тогда
	//	Выборка = Справочники.NSI_РолиIDM.Выбрать(,Объект.Ссылка);
	//	Пока Выборка.Следующий() Цикл
	//		ОбРольИДМ = Выборка.ПолучитьОбъект();
	//		ОбРольИДМ.АктивностьРоли = Ложь;
	//		ОбРольИДМ.Записать();
	//	КонецЦикла;
	//КонецЕсли;
	
	// Роли
	
	Результат = Connector.GetNameOfRoles();	
	Если ТипЗнч(Результат) = Тип("ХранилищеЗначения") Тогда
		Результат = Результат.Получить();
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Результат) Тогда
		Сообщить("База "+Объект.ИмяБазы+": метод вернул пустой ответ");
		Возврат;
	КонецЕсли;
	СтруктураОтвета = Результат;
	Если ЗначениеЗаполнено(СтруктураОтвета.ОписаниеОшибки) Тогда
		Сообщить("База "+Объект.ИмяБазы +": ошибка - "+СтруктураОтвета.ОписаниеОшибки);
		Возврат;
	КонецЕсли;
	Если ЗначениеЗаполнено(СтруктураОтвета.СписокРолей) Тогда
		Для Каждого СтрокаРоли Из СтруктураОтвета.СписокРолей Цикл
			Если ЗначениеЗаполнено(СтрокаРоли.ИДРоли) Тогда
				ИмеющаясяРоль = Справочники.NSI_РолиВИБ.НайтиПоРеквизиту("ИДРоли", СтрокаРоли.ИДРоли);
				Если Найти(Строка(ИмеющаясяРоль), "<Объект не найден>")=1 ИЛИ Не ЗначениеЗаполнено(ИмеющаясяРоль) Тогда
					РольОбъект = Справочники.NSI_РолиВИБ.СоздатьЭлемент();  
					РольОбъект.УстановитьСсылкуНового(ИмеющаясяРоль);
					РольОбъект.Владелец = Объект.Ссылка;
				Иначе                                              
					РольОбъект = ИмеющаясяРоль.ПолучитьОбъект();
					РольОбъект.Владелец = Объект.Ссылка;
				КонецЕсли;
				//
				ЗаполнитьЗначенияСвойств(РольОбъект, СтрокаРоли, "ИДРоли, Наименование");
				РольОбъект.Записать();
			КонецЕсли;	
			//Если Объект.ВидРолейИспользуемыйВИБ = Перечисления.NSI_ВидРолиВИБ.Роль И СоздаватьРольIDM Тогда
			//	РольИДМ = Справочники.NSI_РолиIDM.НайтиПоРеквизиту("ИмяРоли", РольОбъект.Наименование, , Объект.Ссылка); 
			//	Если ЗначениеЗаполнено(РольИДМ) Тогда
			//		НоваяРольIDM = РольИДМ.ПолучитьОбъект();
			//		НоваяРольIDM.РолиВИБ.Очистить();
			//	Иначе
			//		НоваяРольIDM = Справочники.NSI_РолиIDM.СоздатьЭлемент();
			//		НоваяРольIDM.ОсновнаяИБ = Объект.Ссылка;
			//		НоваяРольIDM.ИмяРоли = НоваяРольIDM.Наименование;
			//	КонецЕсли;
			//	НоваяСтрока = НоваяРольIDM.РолиВИБ.Добавить();
			//	НоваяСтрока.РольВИБ = НоваяРольIDM.Ссылка;
			//	НоваяРольIDM.Записать();
			//КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// Профили пользователей
	РезультатXDTO = Connector.GetDataByType("Справочник", "ПрофилиГруппДоступа", СериализаторXDTO.ЗаписатьXDTO(Новый Структура));
	Для Каждого ЭлементРезультата Из СериализаторXDTO.ПрочитатьXDTO(РезультатXDTO) Цикл
		ЧтениеXML = Новый ЧтениеXML;
		ЧтениеXML.УстановитьСтроку(ЭлементРезультата);
		Об = Connector.ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
		ПрофильГруппДоступаВИБ = Справочники.NSI_ПрофилиГруппДоступаВИБ.НайтиПоРеквизиту("СсылкаВИБ", Об.Ref, , Объект.Ссылка);
		Если ПрофильГруппДоступаВИБ.Пустая() Тогда
			Если Об.IsFolder = "true" Тогда
				ОбъектГруппа = Справочники.NSI_ПрофилиГруппДоступаВИБ.СоздатьЭлемент();
			Иначе
				ОбъектГруппа = Справочники.NSI_ПрофилиГруппДоступаВИБ.СоздатьЭлемент();
			КонецЕсли;
			ОбъектГруппа.СсылкаВИБ = Об.Ref;
			ОбъектГруппа.Владелец = Объект.Ссылка;
		Иначе
			ОбъектГруппа = ПрофильГруппДоступаВИБ.ПолучитьОбъект();
		КонецЕсли;
		ОбъектГруппа.Наименование = Об.Description;
		Если Об.IsFolder = "true" Тогда
			
		Иначе
			Если ТипЗнч(Об.Комментарий) = Тип("ОбъектXDTO") Тогда
				ОбъектГруппа.Комментарий = СериализаторXDTO.ПрочитатьXDTO(Об.Комментарий);
			Иначе
				ОбъектГруппа.Комментарий = Об.Комментарий;
			КонецЕсли;
			ОбъектГруппа.Роли.Очистить();
			Если Не Об.Свойства().Получить("Роли") = Неопределено Тогда
				Попытка
					Для Каждого СтрокаРоль Из Об.Роли Цикл
						Роль = Справочники.NSI_РолиВИБ.НайтиПоРеквизиту("ИДРоли", СтрокаРоль.Роль,, Объект.Ссылка);
						Если Не Роль.Пустая() Тогда
							СтрокаПользователь = ОбъектГруппа.Роли.Добавить();
							СтрокаПользователь.Роль = Роль;
						Иначе
							ГруппаПользователей = Справочники.NSI_ГруппыПользователейВИБ.НайтиПоРеквизиту("СсылкаВИБ", СтрокаРоль.Роль,, Объект.Ссылка);
							Если Не ГруппаПользователей.Пустая() Тогда
								СтрокаПользователь = ОбъектГруппа.Роли.Добавить();
								СтрокаПользователь.Роль = ГруппаПользователей;
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
				Исключение
					Роль = Справочники.NSI_РолиВИБ.НайтиПоРеквизиту("ИДРоли", Об.Роли.Роль,, Объект.Ссылка);
					Если Не Роль.Пустая() Тогда
						СтрокаПользователь = ОбъектГруппа.Роли.Добавить();
						СтрокаПользователь.Роль = Роль;
					КонецЕсли;
				КонецПопытки;
			КонецЕсли;
		КонецЕсли;
		ОбъектГруппа.Записать();
	КонецЦикла;
		
	// Группы пользователей
	
	РезультатXDTO = Connector.GetDataByType("Справочник", "ГруппыПользователей", СериализаторXDTO.ЗаписатьXDTO(Новый Структура));
	Для Каждого ЭлементРезультата Из СериализаторXDTO.ПрочитатьXDTO(РезультатXDTO) Цикл
		ЧтениеXML = Новый ЧтениеXML;
		ЧтениеXML.УстановитьСтроку(ЭлементРезультата);
		Об = Connector.ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
		ГруппаПользователейВИБ = Справочники.NSI_ГруппыПользователейВИБ.НайтиПоРеквизиту("СсылкаВИБ", Об.Ref, , Объект.Ссылка);
		Если ГруппаПользователейВИБ.Пустая() Тогда
			ОбъектГруппа = Справочники.NSI_ГруппыПользователейВИБ.СоздатьЭлемент();
			ОбъектГруппа.СсылкаВИБ = Об.Ref;
			ОбъектГруппа.Владелец = Объект.Ссылка;
		Иначе
			ОбъектГруппа = ГруппаПользователейВИБ.ПолучитьОбъект();
		КонецЕсли;
		ОбъектГруппа.Наименование = Об.Description;
		Если ТипЗнч(Об.Комментарий) = Тип("ОбъектXDTO") Тогда
			ОбъектГруппа.Комментарий = СериализаторXDTO.ПрочитатьXDTO(Об.Комментарий);
		Иначе
			ОбъектГруппа.Комментарий = Об.Комментарий;
		КонецЕсли;
		ОбъектГруппа.Состав.Очистить();	
		Если Не Об.Свойства().Получить("Состав") = Неопределено Тогда
			Попытка
				Для Каждого Состав Из Об.Состав Цикл
					Пользователь = Справочники.NSI_УЗВИБ.НайтиПоРеквизиту("ИДПользователя", Состав.Пользователь,, Объект.Ссылка);
					Если Не Пользователь.Пустая() Тогда
						СтрокаПользователь = ОбъектГруппа.Состав.Добавить();
						СтрокаПользователь.Пользователь = Пользователь;
					КонецЕсли;
				КонецЦикла;
			Исключение
				Пользователь = Справочники.NSI_УЗВИБ.НайтиПоРеквизиту("ИДПользователя", Об.Состав.Пользователь,, Объект.Ссылка);
				Если Не Пользователь.Пустая() Тогда
					СтрокаПользователь = ОбъектГруппа.Состав.Добавить();
					СтрокаПользователь.Пользователь = Пользователь;
				КонецЕсли;
			КонецПопытки;
		КонецЕсли;
		ОбъектГруппа.Записать();
		//Если Объект.ВидРолейИспользуемыйВИБ = Перечисления.NSI_ВидРолиВИБ.ГруппаПользователей И СоздаватьРольIDM Тогда
		//	РольИДМ = Справочники.NSI_РолиIDM.НайтиПоРеквизиту("ИмяРоли", ОбъектГруппа.Наименование, , Объект.Ссылка); 
		//	Если ЗначениеЗаполнено(РольИДМ) Тогда
		//		ОбРольИДМ = РольИДМ.ПолучитьОбъект();
		//	Иначе
		//		ОбРольИДМ = Справочники.NSI_РолиIDM.СоздатьЭлемент();
		//		ОбРольИДМ.ОсновнаяИБ = Объект.Ссылка;
		//	КонецЕсли;
		//	ОбРольИДМ.ИмяРоли = ОбъектГруппа.Ссылка.Наименование;
		//	ОбРольИДМ.АктивностьРоли = Истина;
		//	ОбРольИДМ.РолиВИБ.Очистить();
		//	НоваяРоль = ОбРольИДМ.РолиВИБ.Добавить();
		//	НоваяРоль.РольВИБ = ОбъектГруппа.Ссылка;  
		//	ОбРольИДМ.Записать();
		//КонецЕсли;
	КонецЦикла;
	
	// Группы доступа
	
	РезультатXDTO = Connector.GetDataByType("Справочник", "ГруппыДоступа", СериализаторXDTO.ЗаписатьXDTO(Новый Структура));
	Сериализатор = Новый СериализаторXDTO(Connector.ФабрикаXDTO);
	Результат = СериализаторXDTO.ПрочитатьXDTO(РезультатXDTO);
	Для Каждого ЭлементРезультата Из Результат Цикл
		ЧтениеXML = Новый ЧтениеXML;
		ЧтениеXML.УстановитьСтроку(ЭлементРезультата);
		Об = Connector.ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
		ГруппаДоступаВИБ = Справочники.NSI_ГруппыДоступаВИБ.НайтиПоРеквизиту("СсылкаВИБ", Об.Ref, , Объект.Ссылка);
		Если ГруппаДоступаВИБ.Пустая() Тогда
			Если Об.IsFolder Тогда
				ОбъектГруппа = Справочники.NSI_ГруппыДоступаВИБ.СоздатьГруппу();
			Иначе
				Если ЗначениеЗаполнено(Об.Пользователь) Тогда
					Продолжить;
				КонецЕсли;
				ОбъектГруппа = Справочники.NSI_ГруппыДоступаВИБ.СоздатьЭлемент();
			КонецЕсли;
			ОбъектГруппа.СсылкаВИБ = Об.Ref;
			ОбъектГруппа.Владелец = Объект.Ссылка;
		Иначе
			Если Не Об.IsFolder И ЗначениеЗаполнено(Об.Пользователь) Тогда
				ГруппаДоступаВИБ.ПолучитьОбъект().Удалить();
				Продолжить;
			Иначе
				ОбъектГруппа = ГруппаДоступаВИБ.ПолучитьОбъект();
			КонецЕсли;
		КонецЕсли;
		ОбъектГруппа.Наименование = Об.Description;
		ГруппаДоступаРодительВИБ = Справочники.NSI_ГруппыДоступаВИБ.НайтиПоРеквизиту("СсылкаВИБ", Об.Parent, , Объект.Ссылка);
		ОбъектГруппа.Родитель = ГруппаДоступаРодительВИБ;
		Если Об.IsFolder Тогда				
			ОбъектГруппа.Записать();
			Продолжить;
		КонецЕсли;
		ОбъектГруппа.Описание = СериализаторXDTO.ПрочитатьXDTO(Об.Описание);
		ОбъектГруппа.ОсновнаяГруппаДоступаПоставляемогоПрофиля = Об.ОсновнаяГруппаДоступаПоставляемогоПрофиля;
		ОбъектГруппа.Пользователи.Очистить();
		Если Не Об.Свойства().Получить("Пользователи") = Неопределено Тогда
			Попытка
				Для Каждого СтрокаПользователь Из Об.Пользователи Цикл
					Пользователь = Справочники.NSI_УЗВИБ.НайтиПоРеквизиту("ИДПользователя", СтрокаПользователь.Пользователь,, Объект.Ссылка);
					Если Не Пользователь.Пустая() Тогда
						СтрокаПользователь = ОбъектГруппа.Пользователи.Добавить();
						СтрокаПользователь.Пользователь = Пользователь;
					Иначе
						ГруппаПользователей = Справочники.NSI_ГруппыПользователейВИБ.НайтиПоРеквизиту("СсылкаВИБ", СтрокаПользователь.Пользователь,, Объект.Ссылка);
						Если Не ГруппаПользователей.Пустая() Тогда
							СтрокаПользователь = ОбъектГруппа.Пользователи.Добавить();
							СтрокаПользователь.Пользователь = ГруппаПользователей;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			Исключение
				Пользователь = Справочники.NSI_УЗВИБ.НайтиПоРеквизиту("ИДПользователя", Об.Пользователи.Пользователь,, Объект.Ссылка);
				Если Не Пользователь.Пустая() Тогда
					СтрокаПользователь = ОбъектГруппа.Пользователи.Добавить();
					СтрокаПользователь.Пользователь = Пользователь;
				Иначе
					ГруппаПользователей = Справочники.NSI_ГруппыПользователейВИБ.НайтиПоРеквизиту("СсылкаВИБ", Об.Пользователи.Пользователь,, Объект.Ссылка);
					Если Не ГруппаПользователей.Пустая() Тогда
						СтрокаПользователь = ОбъектГруппа.Пользователи.Добавить();
						СтрокаПользователь.Пользователь = ГруппаПользователей;
					КонецЕсли;
				КонецЕсли;
			КонецПопытки;
		КонецЕсли;	
		ОбъектГруппа.Записать();
		//Если Объект.ВидРолейИспользуемыйВИБ = Перечисления.NSI_ВидРолиВИБ.ГруппаДоступа И СоздаватьРольIDM Тогда
		//	РольИДМ = Справочники.NSI_РолиIDM.НайтиПоРеквизиту("ИмяРоли", ОбъектГруппа.Наименование, , Объект.Ссылка); 
		//	Если ЗначениеЗаполнено(РольИДМ) Тогда
		//		ОбРольИДМ = РольИДМ.ПолучитьОбъект();
		//	Иначе
		//		ОбРольИДМ = Справочники.NSI_РолиIDM.СоздатьЭлемент();
		//		ОбРольИДМ.ОсновнаяИБ = Объект.Ссылка;
		//		ОбРольИДМ.ИмяРоли = ОбъектГруппа.Наименование;
		//	КонецЕсли;
		//	ОбРольИДМ.АктивностьРоли = Истина;
		//	ОбРольИДМ.РолиВИБ.Очистить();
		//	НоваяРоль = ОбРольИДМ.РолиВИБ.Добавить();
		//	НоваяРоль.РольВИБ = ОбъектГруппа.Ссылка;  
		//	ОбРольИДМ.Записать();
		//КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ВидБДПриИзменении(Элемент)
	ВидБДПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура ВидБДПриИзмененииНаСервере()
	Если Объект.ВидБД = Перечисления.NSI_ВидыБД._1C8 Тогда
		Элементы.СтраницыБазПоВидуБД.ТекущаяСтраница = Элементы._1C8;
	ИначеЕсли Объект.ВидБД = Перечисления.NSI_ВидыБД.Oracle Тогда
		Элементы.СтраницыБазПоВидуБД.ТекущаяСтраница = Элементы.Oracle;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Если Не ЗначениеЗаполнено(Объект.ВидБД) Тогда
		Объект.ВидБД = Перечисления.NSI_ВидыБД._1C8;
	КонецЕсли;
	ВидБДПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьПодключение(Команда)
	Если Модифицированность Тогда
		Записать();
	КонецЕсли;
	Попытка
		ПроверитьПодключениеНаСервере();
		Сообщить("Проверка пройдена.");
	Исключение
		Сообщить("Проверка не пройдена.");
	КонецПопытки;
КонецПроцедуры

&НаСервере
Процедура ПроверитьПодключениеНаСервере()
	Прокси = NSI_МодульПовторногоИспользования.ПолучитьСоединениеПоИмениБазы(Объект.ИмяБазы);
КонецПроцедуры


&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	Если Не ВыполняетсяЗакрытие И ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Если ИзмененВидРолей(Объект.Ссылка, Объект.ВидРолейИспользуемыйВИБ) Тогда
			Отказ = Истина;
			ПоказатьВопрос(Новый ОписаниеОповещения("ПослеВопросаОбИзмененииРолей", ЭтотОбъект), "Изменен вид используемых ролей. 
			|Потребуется перезаполнение данных по ролям и учетным записям базы.
			|Нажмите ОК, чтобы продолжить и перезаполнить данные по ролям, Отмена - чтобы отказаться от записи объекта.", РежимДиалогаВопрос.ОКОтмена, ,, "ИЗМЕНЕН ВИД ИСПОЛЬЗУЕМЫХ РОЛЕЙ В БАЗЕ");
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПослеВопросаОбИзмененииРолей(РезультатВопроса, ДополнительныеПараметры) Экспорт
	Если РезультатВопроса = КодВозвратаДиалога.ОК Тогда
		ВыполняетсяЗакрытие = Истина;
		Записать();
		NSI_РаботаСПользователями.ОчиститьВсеРолиIDMСвязанныеСБазой(Объект.Ссылка);
		NSI_РаботаСПользователями.ЗаполнитьВсеРолиIDMСвязанныеСБазой(Объект.Ссылка);
		Если ЗакрываемФорму Тогда
			Закрыть();
		Иначе
			ВыполняетсяЗакрытие = Ложь;
		КонецЕсли;
	КонецЕсли;	
КонецПроцедуры


&НаСервереБезКонтекста
Функция ИзмененВидРолей(Ссылка, ВидРолей)
	Возврат Не Ссылка.ВидРолейИспользуемыйВИБ = ВидРолей;
КонецФункции

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	ЗакрываемФорму = Истина;
	Если Модифицированность Тогда
		Записать();
	Иначе
		Закрыть();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПолучитьВсеРолиУЗIDMНаСервере()
	NSI_РаботаСПользователями.ОбновитьРолиУЗИДМПоБазе(Объект.Ссылка);
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьВсеРолиУЗIDM(Команда)
	ПолучитьВсеРолиУЗIDMНаСервере();
КонецПроцедуры

ВыполняетсяЗакрытие = Ложь;
ЗакрываемФорму = Ложь;
