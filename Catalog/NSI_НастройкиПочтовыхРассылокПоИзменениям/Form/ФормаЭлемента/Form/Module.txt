&НаСервере
Перем СхемаКД;

&НаКлиенте
Процедура Команда1(Команда)
	ПолучитьКД();
КонецПроцедуры

&НаСервере
Процедура ПолучитьКД()
	ТипОбъекта = СтрЗаменить(Объект.ТипОбъекта, "DocumentRef","Документы");
	ТипОбъекта = СтрЗаменить(ТипОбъекта, "CatalogRef","Справочники");
	СтруктураДанных = ПодготовитьСтруктуруЗаписиОбъекта(ТипОбъекта);	
	СформироватьНаборыДанныхИзСтруктуры(СтруктураДанных);	
КонецПроцедуры

&НаСервере
Функция ПодготовитьСтруктуруЗаписиОбъекта(ТипОбъекта=Неопределено)
	Connector = NSI_МодульПовторногоИспользования.ПолучитьСоединениеПоИмениБазы(Объект.База.ИмяБазы);
	Если Не Connector = Неопределено Тогда
		XDTO = Connector.GetObjectTree(ТипОбъекта);
		Возврат СериализаторXDTO.ПрочитатьXDTO(XDTO);
	КонецЕсли;		
	//Если Объект = Неопределено Тогда
	//	Объект = Справочники.ЗапросыДанных.СоздатьЭлемент();
	//КонецЕсли;
	//ПростыеТипы = Новый ОписаниеТипов("Число, Строка, Булево, Дата");
	//СтруктураРеквизитов = Новый Структура;
	//Для Каждого Реквизит Из Объект.Метаданные().СтандартныеРеквизиты Цикл
	//	Если ПростыеТипы.СодержитТип(ТипЗнч(Объект[Реквизит.Имя])) Тогда
	//		СтруктураРеквизитов.Вставить(Реквизит.Имя, Объект[Реквизит.Имя]);
	//	Иначе
	//		СтруктураРеквизитов.Вставить(Реквизит.Имя, Строка(Объект[Реквизит.Имя]));
	//	КонецЕсли;
	//КонецЦикла;		
	//Для Каждого Реквизит Из Объект.Метаданные().Реквизиты Цикл		
	//	Если ПростыеТипы.СодержитТип(ТипЗнч(Объект[Реквизит.Имя])) Тогда
	//		СтруктураРеквизитов.Вставить(Реквизит.Имя, Объект[Реквизит.Имя]);
	//	Иначе
	//		СтруктураРеквизитов.Вставить(Реквизит.Имя, Строка(Объект[Реквизит.Имя]));
	//	КонецЕсли;
	//КонецЦикла;
	//Для Каждого ТЧ Из Объект.Метаданные().ТабличныеЧасти Цикл
	//	СтрокТЧ = Объект[ТЧ.Имя].Добавить();
	//	СтруктураСтроки = Новый Структура;
	//	Для Каждого Реквизит Из ТЧ.Реквизиты Цикл
	//		Если ПростыеТипы.СодержитТип(ТипЗнч(СтрокТЧ[Реквизит.Имя])) Тогда
	//			СтруктураСтроки.Вставить(Реквизит.Имя, СтрокТЧ[Реквизит.Имя]);
	//		Иначе
	//			СтруктураСтроки.Вставить(Реквизит.Имя, Строка(СтрокТЧ[Реквизит.Имя]));
	//		КонецЕсли;
	//	КонецЦикла;
	//	СтруктураРеквизитов.Вставить(ТЧ.Имя, СтруктураСтроки);
	//КонецЦикла;
	//Возврат СтруктураРеквизитов;
КонецФункции

&НаСервере
Функция СформироватьНаборыДанныхИзСтруктуры(СтруктураДанных)
	Дерево = РеквизитФормыВЗначение("ДеревоРеквизитов");
	Дерево.Строки.Очистить();
	Для Каждого Стр Из СтруктураДанных Цикл
		НоваяСтрока = Дерево.Строки.Добавить();
		НоваяСтрока.Реквизит = Стр.Имя;
		НоваяСтрока.Тип = Строка(ТипЗнч(Стр.Значение));
		НоваяСтрока.Представление = Стр.Синоним;
		Если ТипЗнч(Стр.Значение) = Тип("Массив") Тогда
			СтрокаТаблицы = Стр.Значение[0];
			Для Каждого Стр1 Из СтрокаТаблицы Цикл
				НоваяСтрока1 = НоваяСтрока.Строки.Добавить();
				НоваяСтрока1.Реквизит = Стр1.Имя;
				НоваяСтрока1.Представление = Стр1.Синоним;
				НоваяСтрока1.Тип = Строка(ТипЗнч(Стр1.Значение));
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	ЗначениеВРеквизитФормы(Дерево, "ДеревоРеквизитов");
КонецФункции


&НаКлиенте
Процедура ДеревоРеквизитовНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Перемещение;
	ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.Перемещение;
	Родитель = Элемент.ТекущиеДанные.ПолучитьРодителя();
	Если Родитель = Неопределено Тогда
		Родитель = "";
		РодительПредставление = "";
	Иначе
		РодительПредставление = Родитель.Представление;
		Родитель = Родитель.Реквизит;
	КонецЕсли;
	Реквизит = Элемент.ТекущиеДанные.Реквизит;
	ПараметрыПеретаскивания.Значение = Новый Структура("Реквизит, Представление, Тип, Родитель, РодительПредставление", Реквизит, Элемент.ТекущиеДанные.Представление, Элемент.ТекущиеДанные.Тип, Родитель, РодительПредставление);
КонецПроцедуры


&НаКлиенте                                                                                                                                                
Процедура СписокНастроекПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры


&НаКлиенте
Процедура СписокНастроекПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	Если Не ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Структура") Тогда
		Возврат;
	КонецЕсли; 
	СтандартнаяОбработка = Ложь;
	ОбработатьПеретаскиваниеНаСервере(Строка, ПараметрыПеретаскивания.Значение);
КонецПроцедуры

&НаСервере
Процедура ОбработатьПеретаскиваниеНаСервере(Строка, ЗначенияПеретаскивания)
	Если Строка = Неопределено Тогда
		Строк = Неопределено;                                                                                                                                   
	Иначе                                 
		Строк = СписокНастроек.НайтиПоИдентификатору(Строка);
	КонецЕсли;
	Если Строк = Неопределено Тогда
		СтрокиТекущие = СписокНастроек.ПолучитьЭлементы();
	Иначе
		Пока Не Строк = Неопределено Цикл
			Если Строк.Группа Тогда Прервать; КонецЕсли;
			Строк = Строк.ПолучитьРодителя();
			Если Строк = Неопределено Тогда Прервать; КонецЕсли;
			Пока Не Строк.Группа =Истина Цикл
				Строк = Строк.ПолучитьРодителя();
				Если Строк = Неопределено Тогда Прервать; КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		Если Строк = Неопределено Тогда
			СтрокиТекущие = СписокНастроек.ПолучитьЭлементы();
		Иначе
			СтрокиТекущие = Строк.ПолучитьЭлементы();	
		КонецЕсли;
	КонецЕсли;
	НоваяСтрока = СтрокиТекущие.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, ЗначенияПеретаскивания);
	Если Не НоваяСтрока.Группа Тогда
		НоваяСтрока.УсловиеСравнения = "=";
		НоваяСтрока.ГдеПроверять = "Стало";
	КонецЕсли;
	Если ЗначенияПеретаскивания.Родитель Тогда
		НоваяСтрока.УсловиеПоТЧ = "В любой строке";
	КонецЕсли;
	Если ЗначенияПеретаскивания.Родитель Тогда
		НоваяСтрока.ИндексКартинки = 2;
	КонецЕсли;
	Если Не ЗначенияПеретаскивания.Тип = "Не определено" Тогда
		ОграничениеТипа = Новый ОписаниеТипов(ЗначенияПеретаскивания.Тип);
		НоваяСтрока.ЗначениеСравнения = ОграничениеТипа.ПривестиЗначение();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьГруппу(Команда)
	ДобавитьГруппуНаСервере();
КонецПроцедуры

&НаСервере
Процедура ДобавитьГруппуНаСервере();
	ЗначенияПеретаскивания = Новый Структура("Группа, Реквизит, ИндексКартинки, Родитель, Тип", Истина, "ИЛИ", 1, Ложь, "Не определено");
	ОбработатьПеретаскиваниеНаСервере(Элементы.СписокНастроек.ТекущаяСтрока, ЗначенияПеретаскивания)
КонецПроцедуры


&НаКлиенте
Процедура СписокНастроекПриАктивизацииЯчейки(Элемент)
	Если Элементы.СписокНастроек.ТекущиеДанные = Неопределено Тогда Возврат КонецЕсли;
	ЯчейкаРеквизит = Элементы.СписокНастроек.ПодчиненныеЭлементы.СписокНастроекИмяРеквизита;
	ЯчейкаРеквизит.РежимВыбораИзСписка = Элементы.СписокНастроек.ТекущиеДанные.Группа;
	ЯчейкаРеквизит.ТолькоПросмотр = Не Элементы.СписокНастроек.ТекущиеДанные.Группа;
КонецПроцедуры


&НаКлиенте
Процедура СписокНастроекНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	
КонецПроцедуры


&НаКлиенте
Процедура ТипОбъектаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	СписокТиповМетаданных = Новый СписокЗначений;
	СписокТиповМетаданных.Добавить("Документы");
	СписокТиповМетаданных.Добавить("Справочники");
	ОткрытьФорму("Справочник.NSI_СписокВИБ.Форма.ФормаПодбораМетаданных", Новый Структура("БазаИБ, СписокТиповМетаданных, ЗакрыватьПриВыборе", Объект.База, СписокТиповМетаданных, Истина), Элемент); 
КонецПроцедуры


&НаКлиенте
Процедура ПроверитьУсловие(Команда)
	ИзменениеДляПроверки = ОткрытьФормуМодально("Справочник.NSI_ИзмененияОбъектовВнешнихБаз.ФормаВыбора");
	ПроверитьНаСервере(ИзменениеДляПроверки);
КонецПроцедуры

&НаСервере
Процедура ПроверитьНаСервере(ИзменениеДляПроверки)
	Сообщить(NSI_ОбщиеПроцедуры.ПроверитьНеобходимостьОповещения(Объект.Ссылка.Условие.Получить(), ИзменениеДляПроверки.ДанныеДоИзменения.Получить(), ИзменениеДляПроверки.ДанныеПослеИзменения.Получить(), ИзменениеДляПроверки.СтруктураИзменений.Получить()));
КонецПроцедуры


&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	Дерево = РеквизитФормыВЗначение("СписокНастроек");
	ТекущийОбъект.Условие = Новый ХранилищеЗначения(Дерево, Новый СжатиеДанных(9));
	Дерево = РеквизитФормыВЗначение("ДеревоРеквизитов");
	ТекущийОбъект.СтруктураМетаданных = Новый ХранилищеЗначения(Дерево, Новый СжатиеДанных(9));
	Дерево = РеквизитФормыВЗначение("ФиксироватьРеквизиты");
	ТекущийОбъект.СписокРеквизитовДляФиксации = Новый ХранилищеЗначения(Дерево, Новый СжатиеДанных(9));
КонецПроцедуры


&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
КонецПроцедуры


&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	Дерево = ТекущийОбъект.Условие.Получить();
	Если ТипЗнч(Дерево) = Тип("ДеревоЗначений") Тогда
		Попытка
			ЗначениеВРеквизитФормы(Дерево, "СписокНастроек");
		Исключение
		КонецПопытки;
	КонецЕсли;
	Дерево = ТекущийОбъект.СтруктураМетаданных.Получить();
	Если ТипЗнч(Дерево) = Тип("ДеревоЗначений") Тогда
		Попытка
		ЗначениеВРеквизитФормы(Дерево, "ДеревоРеквизитов");
		Исключение
		КонецПопытки;
	КонецЕсли;
	Дерево = ТекущийОбъект.СписокРеквизитовДляФиксации.Получить();
	Если ТипЗнч(Дерево) = Тип("ДеревоЗначений") Тогда
		Попытка
		ЗначениеВРеквизитФормы(Дерево, "ФиксироватьРеквизиты");
		Исключение
		КонецПопытки;
	КонецЕсли;
КонецПроцедуры


&НаКлиенте
Процедура СписокНастроекУсловиеСравненияПриИзменении(Элемент)
	Если Элементы.СписокНастроек.ТекущиеДанные.УсловиеСравнения = "Без условий" ИЛИ 
		Элементы.СписокНастроек.ТекущиеДанные.УсловиеСравнения = "Заполнено" ИЛИ
		Элементы.СписокНастроек.ТекущиеДанные.УсловиеСравнения = "Не заполнено" Тогда
		Элементы.СписокНастроек.ТекущиеДанные.ЗначениеСравнения = "";
		Элементы.СписокНастроек.ТекущиеДанные.УсловиеПоТЧ = "";
	КонецЕсли;
КонецПроцедуры


&НаКлиенте
Процедура СписокРеквизитовДляОповещенияПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры


&НаКлиенте
Процедура СписокРеквизитовДляОповещенияПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	СписокДляДобавления = ФиксироватьРеквизиты.ПолучитьЭлементы();
	ЭлементРодитель = Неопределено;
	Если ЗначениеЗаполнено(ПараметрыПеретаскивания.Значение.Родитель) Тогда
		СписокЭлементов = ФиксироватьРеквизиты.ПолучитьЭлементы();
		Для Каждого ЭлементСписка Из СписокЭлементов Цикл
			Если ЭлементСписка.Реквизит = ПараметрыПеретаскивания.Значение.Родитель Тогда
				ЭлементРодитель = ЭлементСписка;
				СписокДляДобавления = ЭлементРодитель.ПолучитьЭлементы();
			КонецЕсли; 
		КонецЦикла; 
		Если ЭлементРодитель=Неопределено Тогда
			ЭлементРодитель = СписокЭлементов.Добавить();
			ЭлементРодитель.Реквизит = ПараметрыПеретаскивания.Значение.Родитель;
			ЭлементРодитель.Представление = ПараметрыПеретаскивания.Значение.РодительПредставление;
			СписокДляДобавления = ЭлементРодитель.ПолучитьЭлементы();
		КонецЕсли;
	КонецЕсли;
	НоваяСтрока = Неопределено;
	Для Каждого ЭлементСписка Из СписокДляДобавления Цикл
			Если ЭлементСписка.Реквизит = ПараметрыПеретаскивания.Значение.Реквизит Тогда
				НоваяСтрока = ЭлементСписка;
			КонецЕсли;
	КонецЦикла;
	Если НоваяСтрока = Неопределено Тогда
		НоваяСтрока = СписокДляДобавления.Добавить();
	КонецЕсли;	
	ЗаполнитьЗначенияСвойств(НоваяСтрока, ПараметрыПеретаскивания.Значение);
	СтандартнаяОбработка = Ложь;	
КонецПроцедуры


&НаКлиенте
Процедура ОповеститьПоУсловию(Команда)
	ИзменениеДляПроверки = ОткрытьФормуМодально("Справочник.NSI_ИзмененияОбъектовВнешнихБаз.ФормаВыбора");
	ОповеститьНаСервере(ИзменениеДляПроверки);
КонецПроцедуры

Процедура ОповеститьНаСервере(ИзменениеСсылка)
	NSI_ОбщиеПроцедуры.ОбработатьПравилаОповещения(ИзменениеСсылка.ВнешняяБаза, ИзменениеСсылка.ТипСсылки, ИзменениеСсылка.ИДСсылки);
КонецПроцедуры


&НаКлиенте
Процедура ТипОбъектаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	ВыбранноеЗначение = СтрЗаменить(ВыбранноеЗначение, "Документы.", "DocumentRef.");
	ВыбранноеЗначение = СтрЗаменить(ВыбранноеЗначение, "Справочники.", "CatalogRef.");
КонецПроцедуры

