
&НаКлиенте
Процедура ОсновнойВидМДПриИзменении(Элемент)
	ПолучитьДеревоПолейПоВидуМД();
КонецПроцедуры

&НаСервере
Процедура ПолучитьДеревоПолейПоВидуМД(ВеткаДереваРеквизитов=Неопределено, ВидМД = Неопределено, НомерУровня = 0)
	Если НомерУровня>2 Тогда
		Возврат;
	КонецЕсли;
	Если ВидМД = Неопределено Тогда
		ВидМД = ОсновнойВидМД;
	КонецЕсли;
	Если ВеткаДереваРеквизитов = Неопределено Тогда
		ТекущаяВеткаДерева = РеквизитФормыВЗначение("ТекущееДеревоРеквизитов");
		ТекущаяВеткаДерева.Строки.Очистить();
	Иначе
		ТекущаяВеткаДерева = ВеткаДереваРеквизитов;
	КонецЕсли;
	ПрефиксПолногоИмени = ПолучитьПрефиксПолногоИмениДереваДокументов(ТекущаяВеткаДерева);
	ТаблицаПолей = РеквизитФормыВЗначение("ТаблицаПолейОтбора");
	Если ТаблицаПолей.Найти(ВидМД, "ВидМД")=Неопределено  Тогда
		ТаблицаОписанияПолей = NSI_РаботаСМастерДаннымиСерверПовторноеИспользование.ПолучитьОписаниеПолей(ВидМД);	
		Для Каждого СтрокаОписания Из ТаблицаОписанияПолей Цикл
			НоваяСтрокаОписанияПоля = ТаблицаПолей.Добавить();
			НоваяСтрокаОписанияПоля.ВидМД = ВидМД;
			НоваяСтрокаОписанияПоля.ИмяРеквизита = СтрокаОписания.ИмяПоля;
			НоваяСтрокаОписанияПоля.СинонимПоля = СтрокаОписания.СинонимПоля;
			Если ЗначениеЗаполнено(СтрокаОписания.ТипПоля) Тогда
				НоваяСтрокаОписанияПоля.ТипРеквизита = NSI_РаботаСМастерДаннымиСервер.ПрочитатьОбъектИзXML(СтрокаОписания.ТипПоля);
				Если НоваяСтрокаОписанияПоля.ТипРеквизита.СодержитТип(Тип("СправочникСсылка.NSI_МастерДанные")) ИЛИ 
					НоваяСтрокаОписанияПоля.ТипРеквизита.СодержитТип(Тип("СправочникСсылка.NSI_СписокВИБ")) Тогда
					НоваяСтрокаОписанияПоля.РасширениеТипа = СтрокаОписания.НастройкиПоля;
				КонецЕсли;
			КонецЕсли;
			НоваяСтрокаОписанияПоля.ПрименениеРеквизита = СтрокаОписания.ИспользованиеПоля;
		КонецЦикла;
		ЗначениеВРеквизитФормы(ТаблицаПолей, "ТаблицаПолейОтбора");
	КонецЕсли;
	ЛокальнаяТаблицаПолей = ТаблицаПолей.Скопировать(Новый Структура("ВидМД", ВидМД));
	ЛокальнаяТаблицаПолей.Сортировать("ИмяРеквизита");
	Для Каждого Поле Из ЛокальнаяТаблицаПолей Цикл
		НоваяЗаписьДерева = ТекущаяВеткаДерева.Строки.Добавить();
		НоваяЗаписьДерева.ИмяРеквизита = Поле.ИмяРеквизита;
		НоваяЗаписьДерева.СинонимПоля = Поле.СинонимПоля;
		НоваяЗаписьДерева.ПолноеИмяРеквизита = ?(ЗначениеЗаполнено(ПрефиксПолногоИмени), ПрефиксПолногоИмени+".", "")+Поле.ИмяРеквизита;
		НоваяЗаписьДерева.ТипРеквизита = Поле.ТипРеквизита;
		НоваяЗаписьДерева.РасширениеТипа = Поле.РасширениеТипа;
		НоваяЗаписьДерева.ВидМД = ВидМД;
		НоваяЗаписьДерева.ПрименениеРеквизита = Поле.ПрименениеРеквизита;
		Если ЗначениеЗаполнено(НоваяЗаписьДерева.РасширениеТипа) Тогда
			ВидМДРасширения = Справочники.NSI_ВидыМД.НайтиПоНаименованию(НоваяЗаписьДерева.РасширениеТипа);
			Если ЗначениеЗаполнено(ВидМДРасширения) Тогда
				ПолучитьДеревоПолейПоВидуМД(НоваяЗаписьДерева, ВидМДРасширения, НомерУровня+1);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Если НомерУровня=0 Тогда
		ЗначениеВРеквизитФормы(ТекущаяВеткаДерева, "ТекущееДеревоРеквизитов");
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ПолучитьПрефиксПолногоИмениДереваДокументов(ВеткаДерева)
	Если ТипЗнч(ВеткаДерева)=Тип("ДеревоЗначений") Тогда
		Возврат "";
	Иначе
		Если ВеткаДерева.Родитель=Неопределено Тогда
			Возврат ВеткаДерева.ИмяРеквизита;
		Иначе
			Возврат ПолучитьПрефиксПолногоИмениДереваДокументов(ВеткаДерева.Родитель)+"."+ВеткаДерева.ИмяРеквизита;
		КонецЕсли;
	КонецЕсли;
КонецФункции


&НаКлиенте                                                                       
Процедура Обновить(Команда)
	ПолучитьДеревоПолейПоВидуМД();
КонецПроцедуры

&НаКлиенте
Процедура ТекущееДеревоРеквизитовНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.Перемещение;
	ПараметрыПеретаскивания.Значение = Элемент.ТекущаяСтрока;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоУсловийПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	Если ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("ДанныеФормыЭлементДерева") Тогда
		СтандартнаяОбработка = Ложь;
		ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.Перемещение;
	ИначеЕсли ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Массив") Тогда
	    СтандартнаяОбработка = Ложь;
	    РеквизитДерево = ЭтаФорма["ДеревоУсловий"];
	    ИДНовыйРодитель = Строка;
	    // Если НовыйРодитель = Неопределено => Корень дерева
	    НовыйРодитель = ?(ИДНовыйРодитель = Неопределено, Неопределено,
	        РеквизитДерево.НайтиПоИдентификатору(ИДНовыйРодитель));

	    МассивИДПереносимыхЭлементов = ПараметрыПеретаскивания.Значение;

	    Для каждого ИДПереносимыйЭлемент из МассивИДПереносимыхЭлементов Цикл

	        ПереносимыйЭлемент = РеквизитДерево.НайтиПоИдентификатору(
	            ИДПереносимыйЭлемент);

	        Если НЕ ПроверитьВозможностьПереноса(ПереносимыйЭлемент,
	                    НовыйРодитель) Тогда
	            ПараметрыПеретаскивания.Действие=ДействиеПеретаскивания.Отмена;
	            Прервать;
	        КонецЕсли;
	    КонецЦикла;

	КонецЕсли;
КонецПроцедуры

&НаКлиенте                                                                                     
Процедура ДеревоУсловийПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)	
	СтандартнаяОбработка = Ложь;
	Если ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("ДанныеФормыЭлементДерева") Тогда
		ТекущаяСтрокаДереваРеквизитов = ПараметрыПеретаскивания.Значение;
		Если ТекущаяСтрокаДереваРеквизитов=Неопределено Тогда
			Возврат;                                                                       
		КонецЕсли;
		Если Строка = Неопределено Тогда
			НоваяСтрокаДереваУсловий = ДеревоУсловий.ПолучитьЭлементы().Добавить();
		Иначе                      
			СтрокаПереноса = ДеревоУсловий.НайтиПоИдентификатору(Строка);
			Если СтрокаПереноса.ГруппаУсловий Тогда
				НоваяСтрокаДереваУсловий = СтрокаПереноса.ПолучитьЭлементы().Добавить();
				Элементы.ДеревоУсловий.Развернуть(Строка, Истина);
			ИначеЕсли СтрокаПереноса.ПолучитьРодителя() = Неопределено Тогда
				НоваяСтрокаДереваУсловий = ДеревоУсловий.ПолучитьЭлементы().Добавить();
			Иначе
				НоваяСтрокаДереваУсловий = СтрокаПереноса.ПолучитьРодителя().ПолучитьЭлементы().Добавить();
			КонецЕсли;
		КонецЕсли;
		НоваяСтрокаДереваУсловий.Поле = ТекущаяСтрокаДереваРеквизитов.ПолноеИмяРеквизита;
		НоваяСтрокаДереваУсловий.Условие = "Равно";                                          
		НоваяСтрокаДереваУсловий.ОграничениеТипа = ТекущаяСтрокаДереваРеквизитов.ТипРеквизита;
		НоваяСтрокаДереваУсловий.РасширениеТипа = ТекущаяСтрокаДереваРеквизитов.РасширениеТипа;
		НоваяСтрокаДереваУсловий.СинонимПоля = ПолучитьСинонимПоляУсловия(ТекущаяСтрокаДереваРеквизитов);
		Элементы.ДеревоУсловий.ТекущаяСтрока = НоваяСтрокаДереваУсловий.ПолучитьИдентификатор();
	ИначеЕсли ТипЗнч(ПараметрыПеретаскивания.Значение)=Тип("Массив") Тогда
		
		СтандартнаяОбработка=Ложь;
		
		ТекущаяСтрока = ДеревоУсловий.НайтиПоИдентификатору(Строка);
		Если ТекущаяСтрока.ГруппаУсловий Тогда
			Приемник = ТекущаяСтрока;
		Иначе
			Если ТекущаяСтрока.ПолучитьРодителя() = Неопределено Тогда
				Приемник = Неопределено;
			Иначе
				Приемник = ТекущаяСтрока.ПолучитьРодителя();
			КонецЕсли;
		КонецЕсли;
	    
	    РеквизитДерево = ЭтаФорма["ДеревоУсловий"];

	    МассивИДИсточник = ПараметрыПеретаскивания.Значение;

	    Для Каждого ИДИсточник Из МассивИДИсточник Цикл
	        Источник = РеквизитДерево.НайтиПоИдентификатору(ИДИсточник);
	        НоваяСтрока = СкопироватьСтрокуДерева(РеквизитДерево,Приемник,Источник);
	        // Производится копирование в корень
	        // Для "красоты" развернем вновь созданную ветвь
	        Если Приемник = Неопределено и НоваяСтрока<>Неопределено Тогда
	            Элементы["ДеревоУсловий"].Развернуть(НоваяСтрока.ПолучитьИдентификатор(),
	                Истина);
	        КонецЕсли;
	    КонецЦикла;

	    // Для "красоты" развернем ветвь-родителя
	    Если НЕ Приемник = Неопределено Тогда
	        Элементы["ДеревоУсловий"].Развернуть(Приемник.ПолучитьИдентификатор(), Истина);
	    КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоУсловийПриАктивизацииЯчейки(Элемент)
	ТекущаяЯчейка = Элемент.ТекущийЭлемент;
	ТекДанные = Элемент.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если ТекущаяЯчейка.Имя = "ДеревоУсловийУсловие" Тогда
		ТекущаяЯчейка.СписокВыбора.Очистить();
		Если Не ТекДанные.ГруппаУсловий Тогда
			ТекущаяЯчейка.СписокВыбора.Добавить("Равно");
			ТекущаяЯчейка.СписокВыбора.Добавить("Не равно");
			ТекущаяЯчейка.СписокВыбора.Добавить("В списке");
			Если ТекДанные.ОграничениеТипа.СодержитТип(Тип("СправочникСсылка.NSI_МастерДанные")) Тогда
				ТекущаяЯчейка.СписокВыбора.Добавить("В группе");
			Иначе
				ТекущаяЯчейка.СписокВыбора.Добавить("Меньше");
				ТекущаяЯчейка.СписокВыбора.Добавить("Больше");
				ТекущаяЯчейка.СписокВыбора.Добавить("Меньше или равно");
				ТекущаяЯчейка.СписокВыбора.Добавить("Больше или равно");
				ТекущаяЯчейка.СписокВыбора.Добавить("Содержит");
			КонецЕсли;
		КонецЕсли;
		ТекущаяЯчейка.ТолькоПросмотр = ТекДанные.ГруппаУсловий;
	ИначеЕсли ТекущаяЯчейка.Имя = "ДеревоУсловийСинонимПоля" Тогда
		ТекущаяЯчейка.СписокВыбора.Очистить();
		Если ТекДанные.ГруппаУсловий Тогда
			ТекущаяЯчейка.СписокВыбора.Добавить("Группа И");
			ТекущаяЯчейка.СписокВыбора.Добавить("Группа ИЛИ");
			ТекущаяЯчейка.СписокВыбора.Добавить("Группа НЕ");
		 КонецЕсли;
		 ТекущаяЯчейка.ТолькоПросмотр = Не ТекДанные.ГруппаУсловий;
	ИначеЕсли ТекущаяЯчейка.Имя = "ДеревоУсловийЗначенияПоиска" Тогда
		Если ТекДанные.Условие = "В списке" Тогда
			СписокЗначений = Новый СписокЗначений;
			СписокЗначений.ТипЗначения = ТекДанные.ОграничениеТипа;
			ТекДанные.ЗначенияПоиска = СписокЗначений;
			УстановитьПараметрТипВыбора(ТекДанные.РасширениеТипа);
		ИначеЕсли ТекДанные.ГруппаУсловий Тогда
		Иначе
			ТекДанные.ЗначенияПоиска = ТекДанные.ОграничениеТипа.ПривестиЗначение(ТекДанные.ЗначенияПоиска);
		КонецЕсли;
		 ТекущаяЯчейка.ТолькоПросмотр = ТекДанные.ГруппаУсловий;
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УстановитьПараметрТипВыбора(ТипВыбора)
	ПараметрыСеанса.NSI_ТипВыбораМастерДанныхИзСписка = Лев(ТипВыбора, 100);
КонецПроцедуры


&НаКлиенте
Процедура ДобавитьГруппуУсловий(Команда)
	ТекСтрока = Элементы.ДеревоУсловий.ТекущаяСтрока;
	Если ТекСтрока=Неопределено Тогда
		НоваяСтрока = ДеревоУсловий.ПолучитьЭлементы().Добавить();
	Иначе
		ТекСтрока = ДеревоУсловий.НайтиПоИдентификатору(ТекСтрока);
		Если ТекСтрока.ГруппаУсловий Тогда
			НоваяСтрока = ТекСтрока.ПолучитьЭлементы().Добавить();
		Иначе
			Если ТекСтрока.ПолучитьРодителя() = Неопределено Тогда
				НоваяСтрока = ДеревоУсловий.ПолучитьЭлементы().Добавить();
			Иначе
				НоваяСтрока = ТекСтрока.ПолучитьРодителя().ПолучитьЭлементы().Добавить();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;		
	НоваяСтрока.ГруппаУсловий = Истина;
	НоваяСтрока.СинонимПоля = "Группа И";
	Элементы.ДеревоУсловий.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
КонецПроцедуры


&НаКлиенте
Процедура ДобавитьГруппуВерхнегоУровня(Команда)
	НоваяСтрока = ДеревоУсловий.ПолучитьЭлементы().Добавить();
	НоваяСтрока.ГруппаУсловий = Истина;
	НоваяСтрока.СинонимПоля = "Группа И";
	Элементы.ДеревоУсловий.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
КонецПроцедуры


&НаКлиенте
Процедура Сгруппировать(Команда)
	// Создаем группу
	МассивВыделенныхСтрок = Элементы.ДеревоУсловий.ВыделенныеСтроки;
	Если МассивВыделенныхСтрок.Количество()=0 Тогда
		Сообщить("Выделите строки дерева для группировки.");
		Возврат;
	КонецЕсли;
	НоваяГруппа = ДеревоУсловий.ПолучитьЭлементы().Добавить();
	НоваяГруппа.ГруппаУсловий = Истина;
	НоваяГруппа.СинонимПоля = "Группа И";
	Для Каждого НомерСтроки Из МассивВыделенныхСтрок Цикл
		НоваяСтрока = НоваяГруппа.ПолучитьЭлементы().Добавить();
		СтрокаДляПереноса = ДеревоУсловий.НайтиПоИдентификатору(НомерСтроки);
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДляПереноса);
		Если СтрокаДляПереноса.ПолучитьРодителя() = Неопределено Тогда
			ДеревоУсловий.ПолучитьЭлементы().Удалить(СтрокаДляПереноса);
		Иначе
			СтрокаДляПереноса.ПолучитьРодителя().ПолучитьЭлементы().Удалить(СтрокаДляПереноса);
		КонецЕсли;
	КонецЦикла;
	Элементы.ДеревоУсловий.Развернуть(НоваяГруппа.ПолучитьИдентификатор(), Истина);
КонецПроцедуры


&НаКлиенте
Процедура ТекущееДеревоРеквизитовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ТекущаяСтрокаДереваРеквизитов = ТекущееДеревоРеквизитов.НайтиПоИдентификатору(ВыбраннаяСтрока);
	НоваяСтрокаДереваУсловий = ДеревоУсловий.ПолучитьЭлементы().Добавить();
	НоваяСтрокаДереваУсловий.Поле = ТекущаяСтрокаДереваРеквизитов.ПолноеИмяРеквизита;
	НоваяСтрокаДереваУсловий.Условие = "Равно";                                          
	НоваяСтрокаДереваУсловий.ОграничениеТипа = ТекущаяСтрокаДереваРеквизитов.ТипРеквизита;
	НоваяСтрокаДереваУсловий.РасширениеТипа = ТекущаяСтрокаДереваРеквизитов.РасширениеТипа;
	НоваяСтрокаДереваУсловий.СинонимПоля = ПолучитьСинонимПоляУсловия(ТекущаяСтрокаДереваРеквизитов);
	Элементы.ДеревоУсловий.ТекущаяСтрока = НоваяСтрокаДереваУсловий.ПолучитьИдентификатор();
КонецПроцедуры

&НаКлиенте
Функция ПолучитьСинонимПоляУсловия(СтрокаДереваРеквизитов)
	Синоним = СтрокаДереваРеквизитов.СинонимПоля;
	РодительПоля = СтрокаДереваРеквизитов.ПолучитьРодителя();
	Если Не РодительПоля=Неопределено Тогда
		Синоним = ПолучитьСинонимПоляУсловия(РодительПоля)+"."+Синоним;
	КонецЕсли;
	Возврат Синоним;
КонецФункции

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Если ЗначениеЗаполнено(Параметры.ОсновнойВидМД) Тогда
		ОсновнойВидМД = Справочники.NSI_ВидыМД.НайтиПоНаименованию(Параметры.ОсновнойВидМД, Истина);
		Элементы.ГруппаВидаМД.Видимость = Ложь;
		ПолучитьДеревоПолейПоВидуМД();
	КонецЕсли;
	Если Параметры.Свойство("НаборУсловий") Тогда
		Если ЗначениеЗаполнено(Параметры.НаборУсловий) Тогда
			ДеревоОтбора = NSI_РаботаСМастерДаннымиСервер.ПрочитатьОбъектИзXML(Параметры.НаборУсловий);
			ПреобразоватьНаборУсловийВДеревоФормы(ДеревоОтбора);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПреобразоватьНаборУсловийВДеревоФормы(НаборУсловий)
	ДеревоУсловий.ПолучитьЭлементы().Очистить();
	ПреобразоватьВеткуУсловийВВеткуФормы(НаборУсловий, ДеревоУсловий);
КонецПроцедуры

&НаСервере
Процедура ПреобразоватьВеткуУсловийВВеткуФормы(НаборУсловий, ВеткаДерева)
	НаборЭлементовВетки = ВеткаДерева.ПолучитьЭлементы();
	СтрокиНабораУсловий = НаборУсловий.Строки;
	Для Каждого СтрокаДерева Из СтрокиНабораУсловий Цикл
		СтрокаУсловия = НаборЭлементовВетки.Добавить();
		Если ЗначениеЗаполнено(СтрокаДерева.ГруппаУсловий) Тогда
			СтрокаУсловия.ГруппаУсловий = Истина;
			СтрокаУсловия.СинонимПоля = ПолучитьИмяГруппыУсловийПоГруппеПоиска(СтрокаДерева.ГруппаУсловий);
			ПреобразоватьВеткуУсловийВВеткуФормы(СтрокаДерева, СтрокаУсловия);
		Иначе
			СтрокаУсловия.Поле = СтрокаДерева.Поле;
			СтрокаУсловия.СинонимПоля = СтрокаДерева.СинонимПоля;
			СтрокаУсловия.Условие = ПолучитьИмяУсловияПоУсловиюПоиска(СтрокаДерева.Условие);
			СтрокаУсловия.ЗначенияПоиска = СтрокаДерева.ЗначенияПоиска;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Функция ПолучитьИмяГруппыУсловийПоГруппеПоиска(ИмяГруппыПоиска)
	Если ИмяГруппыПоиска = "AND" Тогда
		Возврат "Группа И";
	ИначеЕсли ИмяГруппыПоиска = "OR" Тогда
		Возврат "Группа ИЛИ";
	ИначеЕсли ИмяГруппыПоиска = "NOT" Тогда
		Возврат "Группа НЕ";
	Иначе
		ВызватьИсключение "Не удалось преобразовать имя группы поиска";
	КонецЕсли;
КонецФункции 

&НаСервере
Функция ПолучитьИмяГруппыПоискаПоГруппеУсловий(ИмяГруппыУсловий)
	Если ИмяГруппыУсловий = "Группа И" Тогда
		Возврат "AND";
	ИначеЕсли ИмяГруппыУсловий = "Группа ИЛИ" Тогда
		Возврат "OR";
	ИначеЕсли ИмяГруппыУсловий = "Группа НЕ" Тогда
		Возврат "NOT";
	Иначе
		ВызватьИсключение "Не удалось преобразовать имя группы поиска";
	КонецЕсли;
КонецФункции

&НаСервере
Функция ПолучитьИмяУсловияПоУсловиюПоиска(УсловиеПоиска)
	Если УсловиеПоиска = "EQUAL" Тогда
		Возврат "Равно";
	ИначеЕсли УсловиеПоиска = "NOTEQUAL" Тогда
		Возврат "Не равно";
	ИначеЕсли УсловиеПоиска = "MORE" Тогда
		Возврат "Больше";
	ИначеЕсли УсловиеПоиска = "LESS" Тогда
		Возврат "Меньше";
	ИначеЕсли УсловиеПоиска = "MOREOREQUAL" Тогда
		Возврат "Больше или равно";
	ИначеЕсли УсловиеПоиска = "LESSOREQUAL" Тогда
		Возврат "Меньше или равно";
	ИначеЕсли УсловиеПоиска = "INLIST" Тогда
		Возврат "В списке";
	ИначеЕсли УсловиеПоиска = "INGROUP" Тогда
		Возврат "В группе";
	ИначеЕсли УсловиеПоиска = "LIKE" Тогда
		Возврат "Содержит";
	Иначе
		ВызватьИсключение "Не удалось преобразовать имя условия поиска";
	КонецЕсли;
КонецФункции

Функция ПолучитьИмяУсловияПоискаПоУсловиюФормы(УсловиеФормы)
	Если УсловиеФормы = "Равно" Тогда
		Возврат "EQUAL";
	ИначеЕсли УсловиеФормы = "Не равно" Тогда
		Возврат "NOTEQUAL";
	ИначеЕсли УсловиеФормы = "Больше" Тогда
		Возврат "MORE";
	ИначеЕсли УсловиеФормы = "Меньше" Тогда
		Возврат "LESS";
	ИначеЕсли УсловиеФормы = "Больше или равно" Тогда
		Возврат "MOREOREQUAL";
	ИначеЕсли УсловиеФормы = "Меньше или равно" Тогда
		Возврат "LESSOREQUAL";
	ИначеЕсли УсловиеФормы = "В списке" Тогда
		Возврат "INLIST";
	ИначеЕсли УсловиеФормы = "В группе" Тогда
		Возврат "INGROUP";
	ИначеЕсли УсловиеФормы = "Содержит" Тогда
		Возврат "LIKE";
	Иначе
		ВызватьИсключение "Не удалось преобразовать имя условия поиска";
	КонецЕсли;
КонецФункции

&НаСервере
Функция ПреобразоватьДеревоФормыВНаборУсловий()
	НаборУсловий = NSI_РаботаСМастерДаннымиПоиск.СоздатьПустоеДеревоПоиска();
	ПреобразоватьВеткуФормыВВеткуУсловий(НаборУсловий, ДеревоУсловий);
	Если НаборУсловий.Строки.Количество() = 0 Тогда
		СтрокаПустогоУсловия = НаборУсловий.Строки.Добавить();
		СтрокаПустогоУсловия.Поле = "GUID";
		СтрокаПустогоУсловия.Условие = "NOTEQUAL";
		СтрокаПустогоУсловия.ЗначенияПоиска = "0000";
	КонецЕсли;
	Возврат НаборУсловий;
КонецФункции

&НаСервере
Процедура ПреобразоватьВеткуФормыВВеткуУсловий(НаборУсловий, ВеткаДерева)
	НаборЭлементовВетки = ВеткаДерева.ПолучитьЭлементы();
	СтрокиНабораУсловий = НаборУсловий.Строки;
	Для Каждого СтрокаДерева Из НаборЭлементовВетки Цикл
		СтрокаУсловия = СтрокиНабораУсловий.Добавить();
		Если СтрокаДерева.ГруппаУсловий Тогда
			СтрокаУсловия.ГруппаУсловий = ПолучитьИмяГруппыПоискаПоГруппеУсловий(СтрокаДерева.СинонимПоля);
			ПреобразоватьВеткуФормыВВеткуУсловий(СтрокаУсловия, СтрокаДерева);
		Иначе
			СтрокаУсловия.Поле = СтрокаДерева.Поле;
			СтрокаУсловия.СинонимПоля = СтрокаДерева.СинонимПоля;
			СтрокаУсловия.Условие = ПолучитьИмяУсловияПоискаПоУсловиюФормы(СтрокаДерева.Условие);
			СтрокаУсловия.ЗначенияПоиска = СтрокаДерева.ЗначенияПоиска;
			СтрокаУсловия.ОграничениеТипа = СтрокаДерева.ОграничениеТипа;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ПротестироватьЗагрузкуУсловий(Команда)
	ПротестироватьЗагрузкуУсловийНаСервере();
КонецПроцедуры

&НаСервере
Процедура ПротестироватьЗагрузкуУсловийНаСервере()
	ДеревоПоиска = NSI_РаботаСМастерДаннымиПоиск.СоздатьПустоеДеревоПоиска();
	СтрокаГруппы = ДеревоПоиска.Строки.Добавить();
	СтрокаГруппы.ГруппаУсловий = "NOT";
	СтрокаГруппы = СтрокаГруппы.Строки.Добавить();
	СтрокаГруппы.ГруппаУсловий = "NOT";
	СтрокаГруппы = СтрокаГруппы.Строки.Добавить();
	СтрокаГруппы.ГруппаУсловий = "AND";
	СтрокаУсловия = СтрокаГруппы.Строки.Добавить();
	СтрокаУсловия.СинонимПоля = "ИНН";
	СтрокаУсловия.Поле = "ИНН";
	СтрокаУсловия.Условие = "EQUAL";
	СтрокаУсловия.ЗначенияПоиска = "3663091375";
	СтрокаУсловия = СтрокаГруппы.Строки.Добавить();
	СтрокаУсловия.СинонимПоля = "КПП";
	СтрокаУсловия.Поле = "КПП";
	СтрокаУсловия.Условие = "EQUAL";
	СтрокаУсловия.ЗначенияПоиска = "366301001";
	ПреобразоватьНаборУсловийВДеревоФормы(ДеревоПоиска);
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьУсловия(Команда)
	Ответ = ПолучитьНаборУсловийНаСервере();
	ЗакрыватьПриВыборе = Истина;
	ОповеститьОВыборе(Ответ);
КонецПроцедуры

&НаСервере
Функция ПолучитьНаборУсловийНаСервере()
	НаборУсловий = ПреобразоватьДеревоФормыВНаборУсловий();
	Возврат NSI_РаботаСМастерДаннымиСервер.ЗаписатьОбъектВXML(НаборУсловий);
КонецФункции

&НаСервере
Процедура ПротестироватьПоискНаСервере()
	НаборУсловий = ПреобразоватьДеревоФормыВНаборУсловий();
	СтруктураПоиска = NSI_РаботаСМастерДаннымиПоиск.ПреобразоватьДеревоПоискаВЗапросПоискаXDTO(НаборУсловий, ТекущаяДата());
	Ответ = NSI_РаботаСМастерДаннымиПоиск.НайтиДанныеПоУсловиюXDTO(ОсновнойВидМД, СтруктураПоиска);
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку();
	ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, Ответ);
	Сообщить(ЗаписьXML.Закрыть());
КонецПроцедуры

&НаКлиенте
Процедура ПротестироватьПоиск(Команда)
	ПротестироватьПоискНаСервере();
КонецПроцедуры


&НаКлиенте
Функция ПроверитьВозможностьПереноса(ПереносимыйЭлемент, Знач НовыйРодитель)

    Пока НЕ НовыйРодитель = Неопределено Цикл
        Если ПереносимыйЭлемент = НовыйРодитель Тогда
            Возврат Ложь;
        КонецЕсли;
        НовыйРодитель = НовыйРодитель.ПолучитьРодителя();
    КонецЦикла;

    Возврат Истина;

КонецФункции

&НаКлиенте
Функция СкопироватьСтрокуДерева(РеквизитДерево, Приемник, Источник)

    Перем НоваяСтрока, ОбратныйИндекс, КолПодчиненныхСтрок;

    // Источник может быть уже перенесен
    // Это происходит если выделены несколько элементов
    // одной и той же ветви дерева на разных уровнях иерархии
    Если Источник = Неопределено Тогда
        Возврат Неопределено;
    КонецЕсли;

    Если Приемник = Неопределено Тогда
        // Добавляем в корень
        НоваяСтрока = РеквизитДерево.ПолучитьЭлементы().Добавить();
    Иначе
        НоваяСтрока = Приемник.ПолучитьЭлементы().Добавить();
    КонецЕсли;

    ЗаполнитьЗначенияСвойств(НоваяСтрока, Источник);

    КолПодчиненныхСтрок = Источник.ПолучитьЭлементы().Количество();
    Для ОбратныйИндекс = 1 По КолПодчиненныхСтрок Цикл
        ПодчиненнаяСтрока = Источник.ПолучитьЭлементы()
            [КолПодчиненныхСтрок - ОбратныйИндекс];
        СкопироватьСтрокуДерева(РеквизитДерево, НоваяСтрока, ПодчиненнаяСтрока);
    КонецЦикла;

    Если Источник.ПолучитьРодителя() = Неопределено Тогда
        РеквизитДерево.ПолучитьЭлементы().Удалить(Источник);
    Иначе
        Источник.ПолучитьРодителя().ПолучитьЭлементы().Удалить(Источник);
    КонецЕсли;

    Возврат НоваяСтрока;

КонецФункции




