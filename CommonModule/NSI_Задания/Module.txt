
// { Менеджер заданий
Функция ЗапуститьМенеджераЗаданий() Экспорт
	ОстановитьМенеджераЗаданий();
	
	РегламентноеЗадание = РегламентныеЗадания.СоздатьРегламентноеЗадание(Метаданные.РегламентныеЗадания.NSI_МенеджерЗаданий);
	РегламентноеЗадание.Записать();
	
	Возврат РегламентноеЗадание.УникальныйИдентификатор;
КонецФункции

Процедура МенеджерЗаданий_Выполнение() Экспорт
	АктивныеИсполнители = ПолучитьАктивныхИсполнителей();
	ОсвободитьЗаданияБезАктивныхИсполнителей(АктивныеИсполнители);
	ОтменитьЗаданияСДостигнутымЛимитомПоМаксимальномуКоличествуПопытокВыполнения();
	СнятьЗаданияСПаузы();
	ЗапуститьНовыхИсполнителей(АктивныеИсполнители);
	СократитьИсториюВыполненияЗаданийДоГлубиныХраненияИзНастроек();
КонецПроцедуры

Процедура ЗапуститьНовыхИсполнителей(Знач АктивныеИсполнители)
	КоличесвоЗаданийВОчереди = ПолучитьКоличесвоЗаданийВОчереди();
	ОграничениеПоКоличествуИсполнителей = ПолучитьОграничениеНаКоличествоИсполнителей();
	КоличествоДобавляемыхИсполнителей = Мин(ОграничениеПоКоличествуИсполнителей - АктивныеИсполнители.Количество(), КоличесвоЗаданийВОчереди);
	Если КоличествоДобавляемыхИсполнителей > 0 Тогда
		Задания = ПолучитьЗаданияИзОчереди(КоличествоДобавляемыхИсполнителей);
		Для каждого КлючЗадания Из Задания Цикл
			КлючИдентификацииИсполнителя = СгенерироватьКлючИдентификацииИсполнителя();
			ЗапуститьИсполнителя(КлючИдентификацииИсполнителя, КлючЗадания);
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

Процедура СократитьИсториюВыполненияЗаданийДоГлубиныХраненияИзНастроек()
	ГлубинаХраненияИстории = ПолучитьГлубинуХраненияИстории();
	ПредопределенныеЗначенияГлубиныХраненияИстории = NSI_Задания.ПолучитьПредопределенныеЗначенияГлубиныХраненияИстории();
	Если ГлубинаХраненияИстории <> ПредопределенныеЗначенияГлубиныХраненияИстории.Бесконечная Тогда
		СократитьИсториюВыполненияЗаданий(ГлубинаХраненияИстории);
	КонецЕсли;
КонецПроцедуры

Процедура ОстановитьМенеджераЗаданий() Экспорт
	Отбор = Новый Структура("Метаданные", Метаданные.РегламентныеЗадания.NSI_МенеджерЗаданий);
	АктивныеРегламентныеЗадания = РегламентныеЗадания.ПолучитьРегламентныеЗадания(Отбор);
	Для каждого РегЗадание Из АктивныеРегламентныеЗадания Цикл
		РегЗадание.Удалить();
	КонецЦикла;
КонецПроцедуры

Функция ПолучитьОграничениеНаКоличествоИсполнителей() Экспорт
	ОграничениеНаКоличествоИсполнителей = Константы.NSI_ОграничениеНаКоличествоИсполнителей.Получить();
	
	Возврат ОграничениеНаКоличествоИсполнителей;
КонецФункции

Процедура УстановитьОграничениеПоКоличествуИсполнителей(Знач ОграничениеНаКоличествоИсполнителей) Экспорт
	Константы.NSI_ОграничениеНаКоличествоИсполнителей.Установить(ОграничениеНаКоличествоИсполнителей);
КонецПроцедуры

Функция ПолучитьГлубинуХраненияИстории() Экспорт
	ГлубинаХраненияИстории = Константы.NSI_ГлубинаХраненияИстории.Получить();
	
	Возврат ГлубинаХраненияИстории;
КонецФункции

Процедура УстановитьГлубинуХраненияИстории(Знач ГлубинаХраненияИстории) Экспорт
	Константы.NSI_ГлубинаХраненияИстории.Установить(ГлубинаХраненияИстории);
КонецПроцедуры
// } Менеджер заданий

// { Исполнитель заданий
Функция ЗапуститьИсполнителя(Знач КлючИдентификацииИсполнителя, Знач КлючЗадания) Экспорт
	Параметры = Новый Массив;
	Параметры.Добавить(КлючИдентификацииИсполнителя);
	Параметры.Добавить(КлючЗадания);
	Фоновое = ФоновыеЗадания.Выполнить("NSI_Задания.Исполнитель_Выполнение", Параметры, КлючИдентификацииИсполнителя, "Выполнение задания "+Строка(КлючЗадания));
КонецФункции

Процедура Исполнитель_Выполнение(Знач КлючИдентификацииИсполнителя, Знач КлючЗадания) Экспорт
	КлючИсполнителя = ИдентифицироватьИсполнителя(КлючИдентификацииИсполнителя);
	ДеталиЗадания = ВзятьЗаданиеВРаботу(КлючЗадания, КлючИсполнителя);
	Если ЗначениеЗаполнено(ДеталиЗадания) Тогда
		Попытка
			//НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
			Если ДеталиЗадания.ВозвращаетДанные Тогда
				Выполнить("Результат = "+ДеталиЗадания.ИмяМетода + ?(ЗначениеЗаполнено(ДеталиЗадания.Параметры), "(ДеталиЗадания.Параметры)", "()"));
			Иначе
				Выполнить(ДеталиЗадания.ИмяМетода + ?(ЗначениеЗаполнено(ДеталиЗадания.Параметры), "(ДеталиЗадания.Параметры)", "()"));
			КонецЕсли;
			//ЗафиксироватьТранзакцию();
			ОтметитьЗавершениеЗадания(КлючЗадания);
		Исключение
			//Если ТранзакцияАктивна() Тогда
				//ОтменитьТранзакцию();
				ЗаписатьОшибкуВыполнения(КлючЗадания, ОписаниеОшибки());
			//КонецЕсли;
		КонецПопытки;
	КонецЕсли;
КонецПроцедуры

Функция ИдентифицироватьИсполнителя(Знач КлючИдентификацииИсполнителя)
	Отбор = Новый Структура("Ключ", КлючИдентификацииИсполнителя);
	МассивФоновых = ФоновыеЗадания.ПолучитьФоновыеЗадания(Отбор);
	ТекущееФоновое = МассивФоновых[0];
	КлючИсполнителя = ТекущееФоновое.УникальныйИдентификатор;
	
	Возврат КлючИсполнителя;
КонецФункции

Функция ПолучитьАктивныхИсполнителей() Экспорт
	Отбор = Новый Структура("ИмяМетода", "NSI_Задания.Исполнитель_Выполнение");
	ВсеФоновыеЗадания = ФоновыеЗадания.ПолучитьФоновыеЗадания(Отбор);
	АктивныеИсполнители = Новый Массив;
	Для каждого Фоновое Из ВсеФоновыеЗадания Цикл
		Если Фоновое.Состояние = СостояниеФоновогоЗадания.Активно Тогда
			АктивныеИсполнители.Добавить(Фоновое);
		КонецЕсли;
	КонецЦикла;
	
	Возврат АктивныеИсполнители;
КонецФункции

Функция ПолучитьКоличествоАктивныхИсполнителей() Экспорт
	Возврат ПолучитьАктивныхИсполнителей().Количество();
КонецФункции

Процедура ОстановитьАктивныхИсполнителей() Экспорт
	АктивныеИсполнители = ПолучитьАктивныхИсполнителей();
	Для каждого АктивныйИсполнитель из АктивныеИсполнители цикл
		Если АктивныйИсполнитель.Состояние = СостояниеФоновогоЗадания.Активно Тогда
			 АктивныйИсполнитель.Отменить();
		КонецЕсли;	 
	КонецЦикла;
КонецПроцедуры
// } Исполнитель заданий

// { Работа с заданием
Функция ДобавитьЗадание(Знач ИмяМетода, Знач Параметры, Знач Описание = "") Экспорт
	Задание = ПодготовитьМенеджераЗаписиЗадания(ИмяМетода, Параметры, Описание);
	Задание.Состояние = Перечисления.NSI_СостоянияЗаданий.Ожидает;
	Задание.Записать();	
	Возврат Задание.Ключ;
КонецФункции

Функция ПодготовитьМенеджераЗаписиЗадания(Знач ИмяМетода, Знач Параметры, Знач Описание)
	Если ТипЗнч(Параметры) <> Тип("Структура") Тогда
		ВызватьИсключение ПолучитьВозможныеИсключения().ПараметрыЗаданияДолжныБытьСтруктурой;
	КонецЕсли;
	
	КлючЗадания = Новый УникальныйИдентификатор();
	Параметры.Вставить("КлючЗадания", КлючЗадания);
	
	Задание = РегистрыСведений.NSI_Задания.СоздатьМенеджерЗаписи();
	Задание.Период = ТекущаяДата();
	Задание.Ключ = КлючЗадания;
	Задание.ИмяМетода = ИмяМетода;
	Задание.Параметры = Новый ХранилищеЗначения(Параметры, Новый СжатиеДанных(9));
	Задание.Описание = Описание;
	Возврат Задание;
КонецФункции

Функция ДобавитьЗаданиеВнеОчереди(Знач ИмяМетода, Знач Параметры, Знач Описание = "") Экспорт
	Задание = ПодготовитьМенеджераЗаписиЗадания(ИмяМетода, Параметры, Описание);
	Задание.Состояние = Перечисления.NSI_СостоянияЗаданий.ОжидаетВыделенногоИсполнителя;
	Задание.Записать();
	
	КлючИдентификацииИсполнителя = СгенерироватьКлючИдентификацииИсполнителя();
	ЗапуститьИсполнителя(КлючИдентификацииИсполнителя, Задание.Ключ);
	
	Возврат Задание.Ключ;
КонецФункции

Функция ВзятьЗаданиеВРаботу(Знач КлючЗадания, Знач КлючИсполнителя)
	ДеталиЗадания = Неопределено;
	НаборЗаписей = ПолучитьЗаполненныйНаборЗаписейПоКлючуЗадания(КлючЗадания);
	Если НаборЗаписей.Количество() = 1 Тогда
		Задание = НаборЗаписей[0];
		
		ДеталиЗадания = Новый Структура("ИмяМетода, Параметры, ВозвращаетДанные");
		ДеталиЗадания.ИмяМетода = Задание.ИмяМетода;
		ДеталиЗадания.Параметры = Задание.Параметры.Получить();
		ДеталиЗадания.ВозвращаетДанные = Задание.ВозвращаетДанные;
		
		Задание.КлючИсполнителя = КлючИсполнителя;
		Задание.Состояние = Перечисления.NSI_СостоянияЗаданий.Выполняется;
		Задание.НачалоВыполнения = ТекущаяДата();
		Задание.КоличествоПопытокВыполения = Задание.КоличествоПопытокВыполения + 1;
		Задание.ТекстОшибки = "";
		
		НаборЗаписей.Записать();
	КонецЕсли;
	
	Возврат ДеталиЗадания;
КонецФункции

Процедура ОтметитьЗавершениеЗадания(Знач КлючЗадания, Знач ВозвращаемоеЗначение = Неопределено)
	НаборЗаписей = ПолучитьЗаполненныйНаборЗаписейПоКлючуЗадания(КлючЗадания);
	Если НаборЗаписей.Количество() = 1 Тогда
		Задание = НаборЗаписей[0];
		Задание.Состояние = Перечисления.NSI_СостоянияЗаданий.Выполнено;
		Задание.ЗавершениеВыполнения = ТекущаяДата();
		Если Не ВозвращаемоеЗначение=Неопределено Тогда
			Задание.ВозвращаетДанные = Истина;
			Задание.РезультатВыполнения = Новый ХранилищеЗначения(ВозвращаемоеЗначение, Новый СжатиеДанных(9));
		КонецЕсли;
		Задание.ТекстОшибки = "";
		НаборЗаписей.Записать();
	КонецЕсли;
КонецПроцедуры

Процедура ЗаписатьОшибкуВыполнения(Знач КлючЗадания, ТекстОшибки)
	НаборЗаписей = ПолучитьЗаполненныйНаборЗаписейПоКлючуЗадания(КлючЗадания);
	Если НаборЗаписей.Количество() = 1 Тогда
		Задание = НаборЗаписей[0];
		Задание.ТекстОшибки = ТекстОшибки;
		НаборЗаписей.Записать();
	КонецЕсли;
КонецПроцедуры

Функция ПолучитьСостояниеЗадания(Знач КлючЗадания) Экспорт
	Результат = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	NSI_Задания.Состояние
	|ИЗ
	|	РегистрСведений.NSI_Задания КАК NSI_Задания
	|ГДЕ
	|	NSI_Задания.Ключ = &КлючЗадания";
	Запрос.УстановитьПараметр("КлючЗадания", КлючЗадания);
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		Результат = РезультатЗапроса.Выгрузить()[0].Состояние;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

Функция ОжидатьСостояниеЗадания(Знач КлючЗадания, Знач ОжидаемоеСостояние, Знач Таймаут = 5) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Истина КАК ДождалисьСостояния,
	|	ВЫБОР КОГДА NSI_Задания.Состояние В (&СостоянияОшибок) ТОГДА ИСТИНА ИНАЧЕ ЛОЖЬ КОНЕЦ КАК ОшибкаВыполнения
	|ИЗ
	|	РегистрСведений.NSI_Задания КАК NSI_Задания
	|ГДЕ
	|	NSI_Задания.Ключ = &КлючЗадания
	|	И (NSI_Задания.Состояние В (&ОжидаемоеСостояние) ИЛИ NSI_Задания.Состояние В (&СостоянияОшибок))";
	Запрос.УстановитьПараметр("КлючЗадания", КлючЗадания);
	Запрос.УстановитьПараметр("ОжидаемоеСостояние", ОжидаемоеСостояние);
	МассивОшибок = Новый Массив;
	МассивОшибок.Добавить(СостояниеФоновогоЗадания.Отменено);
	МассивОшибок.Добавить(СостояниеФоновогоЗадания.ЗавершеноАварийно);
	Запрос.УстановитьПараметр("СостоянияОшибок", МассивОшибок);
	
	ВремяВРаботе = 0;
	ДождалисьСостояния = Ложь;
	Пока ВремяВРаботе < Таймаут Цикл
		РезультатЗапроса = Запрос.Выполнить();
		Если Не РезультатЗапроса.Пустой() Тогда
			Выборка = РезультатЗапроса.Выбрать();
			Выборка.Следующий();
			Если Не Выборка.ОшибкаВыполнения Тогда
				ДождалисьСостояния = Истина;
			Иначе
				ВызватьИсключение "Ошибка выполнения задания "+КлючЗадания;
			КонецЕсли;
			Прервать;
		КонецЕсли;		
		ВремяВРаботе = ВремяВРаботе + Спать(1);
	КонецЦикла;
	
	Возврат ДождалисьСостояния;
КонецФункции

Функция ОжидатьИзмененияСостояния(Знач КлючЗадания, Знач ТекущееСостояние, Знач Таймаут = 5) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Истина КАК СостояниеИзменилось
	|ИЗ
	|	РегистрСведений.NSI_Задания КАК NSI_Задания
	|ГДЕ
	|	NSI_Задания.Ключ = &КлючЗадания
	|	И NSI_Задания.Состояние <> &ТекущееСостояние";
	Запрос.УстановитьПараметр("КлючЗадания", КлючЗадания);
	Запрос.УстановитьПараметр("ТекущееСостояние", ТекущееСостояние);
	
	ВремяВРаботе = 0;
	СостояниеИзменилось = Ложь;
	Пока ВремяВРаботе < Таймаут Цикл
		РезультатЗапроса = Запрос.Выполнить();
		Если Не РезультатЗапроса.Пустой() Тогда
			СостояниеИзменилось = Истина;
			Прервать;
		КонецЕсли;
		
		ВремяВРаботе = ВремяВРаботе + Спать(1);
	КонецЦикла;
	
	Возврат СостояниеИзменилось;
КонецФункции

Функция ОтменитьЗадание(Знач КлючЗадания) Экспорт
	Успех = Ложь;
	НаборЗаписей = ПолучитьЗаполненныйНаборЗаписейПоКлючуЗадания(КлючЗадания);
	Если НаборЗаписей.Количество() = 1 Тогда
		Задание = НаборЗаписей[0];
		Если Задание.Состояние = Перечисления.NSI_СостоянияЗаданий.Ожидает Или Задание.Состояние = Перечисления.NSI_СостоянияЗаданий.НаПаузе Тогда
			Успех = Истина;
			Задание.Состояние = Перечисления.NSI_СостоянияЗаданий.Отменено;
			Задание.ЗавершениеВыполнения = ТекущаяДата();
			НаборЗаписей.Записать();
		КонецЕсли;
	КонецЕсли;
	
	Возврат Успех;
КонецФункции
// } Работа с заданием

// { Работа с множествами заданий
Функция ПолучитьКоличествоЗаданийВСостоянии(Знач Состояние)
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Количество(*) КАК Количество
	|ИЗ
	|	РегистрСведений.NSI_Задания КАК NSI_Задания
	|ГДЕ
	|	NSI_Задания.Состояние = &Состояние";
	Запрос.УстановитьПараметр("Состояние", Состояние);
	РезультатЗапроса = Запрос.Выполнить();
	КоличествоЗаданий = РезультатЗапроса.Выгрузить()[0].Количество;
	
	Возврат КоличествоЗаданий;
КонецФункции

Функция ПолучитьКоличесвоЗаданийВОчереди() Экспорт
	КоличесвоЗаданийВОчереди = ПолучитьКоличествоЗаданийВСостоянии(Перечисления.NSI_СостоянияЗаданий.Ожидает);
	
	Возврат КоличесвоЗаданийВОчереди;
КонецФункции

Функция ПолучитьКоличествоЗаданийНаПаузе() Экспорт
	КоличествоЗаданийНаПаузе = ПолучитьКоличествоЗаданийВСостоянии(Перечисления.NSI_СостоянияЗаданий.НаПаузе);
	
	Возврат КоличествоЗаданийНаПаузе;
КонецФункции

Функция ПолучитьВсеЗаданияВСостоянии(Знач Состояние)
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	NSI_Задания.Ключ
	|ИЗ
	|	РегистрСведений.NSI_Задания КАК NSI_Задания
	|ГДЕ
	|	NSI_Задания.Состояние = &Состояние";
	Запрос.УстановитьПараметр("Состояние", Состояние);
	РезультатЗапроса = Запрос.Выполнить();
	ВсеЗаданияСоСтатусом = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Ключ");
	
	Возврат ВсеЗаданияСоСтатусом;
КонецФункции

Функция ПолучитьВсеЗаданияИзОчереди()
	ВсеЗаданияИзОчереди = ПолучитьВсеЗаданияВСостоянии(Перечисления.NSI_СостоянияЗаданий.Ожидает);
	
	Возврат ВсеЗаданияИзОчереди;
КонецФункции

Функция ПолучитьВсеЗаданияНаПаузе()
	ВсеЗаданияНаПаузе = ПолучитьВсеЗаданияВСостоянии(Перечисления.NSI_СостоянияЗаданий.НаПаузе);
	
	Возврат ВсеЗаданияНаПаузе;
КонецФункции

Функция ПолучитьЗаданияИзОчереди(Знач КоличествоЗаданий)
	ИнформацияПоОграничениямНаКоличествоИсполнителей = ПолучитьИнформациюПоОграничениямНаКоличествоИсполнителейМетодовОбработчиков();
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	NSI_Задания.Ключ,
	|	NSI_Задания.ИмяМетода
	|ИЗ
	|	РегистрСведений.NSI_Задания КАК NSI_Задания
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.NSI_НастройкиМетодовОбработчиков КАК NSI_НастройкиМетодовОбработчиков
	|		ПО NSI_Задания.ИмяМетода = NSI_НастройкиМетодовОбработчиков.ИмяМетода
	|ГДЕ
	|	NSI_Задания.Состояние = ЗНАЧЕНИЕ(Перечисление.NSI_СостоянияЗаданий.Ожидает)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЕСТЬNULL(NSI_НастройкиМетодовОбработчиков.Приоритет, 0) УБЫВ,
	|	NSI_Задания.КоличествоПопытокВыполения,
	|	NSI_Задания.Период";
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	ВыбранныеЗадания = Новый Массив;
	Пока Выборка.Следующий() Цикл
		ДеталиПоОграничениям = ИнформацияПоОграничениямНаКоличествоИсполнителей.Получить(Выборка.ИмяМетода);
		Если ДеталиПоОграничениям = Неопределено Тогда
			ВыбранныеЗадания.Добавить(Выборка.Ключ);
		ИначеЕсли ДеталиПоОграничениям.МаксимальноеКоличествоИсполнителей > ДеталиПоОграничениям.КоличествоАктивныхЗаданий Тогда
			ВыбранныеЗадания.Добавить(Выборка.Ключ);
			ДеталиПоОграничениям.КоличествоАктивныхЗаданий = ДеталиПоОграничениям.КоличествоАктивныхЗаданий + 1;
		КонецЕсли;
		
		Если ВыбранныеЗадания.Количество() = КоличествоЗаданий Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ВыбранныеЗадания;
КонецФункции

Функция ПолучитьИнформациюПоОграничениямНаКоличествоИсполнителейМетодовОбработчиков()
	ИнформацияПоОграничениямНаКоличествоИсполнителей = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	NSI_НастройкиМетодовОбработчиков.ИмяМетода,
	|	NSI_НастройкиМетодовОбработчиков.МаксимальноеКоличествоИсполнителей
	|ИЗ
	|	РегистрСведений.NSI_НастройкиМетодовОбработчиков КАК NSI_НастройкиМетодовОбработчиков
	|ГДЕ
	|	NSI_НастройкиМетодовОбработчиков.МаксимальноеКоличествоИсполнителей > 0";
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		ДеталиПоОграничениям = Новый Структура("МаксимальноеКоличествоИсполнителей, КоличествоАктивныхЗаданий", Выборка.МаксимальноеКоличествоИсполнителей, 0);
		ИнформацияПоОграничениямНаКоличествоИсполнителей.Вставить(Выборка.ИмяМетода, ДеталиПоОграничениям);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	NSI_Задания.ИмяМетода,
	|	КОЛИЧЕСТВО(*) КАК КоличествоАктивныхЗаданий
	|ИЗ
	|	РегистрСведений.NSI_Задания КАК NSI_Задания
	|ГДЕ
	|	NSI_Задания.Состояние = ЗНАЧЕНИЕ(Перечисление.NSI_СостоянияЗаданий.Выполняется)
	|
	|СГРУППИРОВАТЬ ПО
	|	NSI_Задания.ИмяМетода";
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		ДеталиПоОграничениям = ИнформацияПоОграничениямНаКоличествоИсполнителей.Получить(Выборка.ИмяМетода);
		Если ДеталиПоОграничениям <> Неопределено Тогда
			ДеталиПоОграничениям.КоличествоАктивныхЗаданий = Выборка.КоличествоАктивныхЗаданий;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ИнформацияПоОграничениямНаКоличествоИсполнителей;
КонецФункции

Процедура ОтменитьВсеЗаданияВОчереди() Экспорт
	ВсеЗаданияИзОчереди = ПолучитьВсеЗаданияИзОчереди();
	Для каждого КлючЗадания Из ВсеЗаданияИзОчереди Цикл
		ОтменитьЗадание(КлючЗадания);
	КонецЦикла;
	ВсеЗаданияНаПаузе = ПолучитьВсеЗаданияНаПаузе();
	Для каждого КлючЗадания Из ВсеЗаданияНаПаузе Цикл
		ОтменитьЗадание(КлючЗадания);
	КонецЦикла;
КонецПроцедуры

Процедура ОсвободитьЗаданияБезАктивныхИсполнителей(Знач АктивныеИсполнители)
	МассивУИИсполнителей = Новый Массив();
	Для каждого Исполнитель Из АктивныеИсполнители Цикл
		МассивУИИсполнителей.Добавить(Исполнитель.УникальныйИдентификатор);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	NSI_Задания.Период,
	|	NSI_Задания.Ключ,
	|	NSI_Задания.ИмяМетода,
	|	NSI_Задания.Параметры,
	|	NSI_Задания.НачалоВыполнения,
	|	NSI_Задания.КоличествоПопытокВыполения
	|ИЗ
	|	РегистрСведений.NSI_Задания КАК NSI_Задания
	|ГДЕ
	|	NSI_Задания.Состояние = ЗНАЧЕНИЕ(Перечисление.NSI_СостоянияЗаданий.Выполняется)
	|	И НЕ NSI_Задания.КлючИсполнителя В (&МассивУИИсполнителей)";
	Запрос.УстановитьПараметр("МассивУИИсполнителей", МассивУИИсполнителей);
	
	ПустойУникальныйИдентификатой = ПустойУникальныйИдентификатор();
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		Задание = РегистрыСведений.NSI_Задания.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(Задание, Выборка);
		Задание.КлючИсполнителя = ПустойУникальныйИдентификатой;
		НастройкиМетодаОбработчика = ПолучитьНастройкиМетодаОбработчика(Задание.ИмяМетода);
		Если Задание.НачалоВыполнения + НастройкиМетодаОбработчика.ПаузаПередНовойПопыткой > ТекущаяДата() Тогда
			Задание.Состояние = Перечисления.NSI_СостоянияЗаданий.НаПаузе;
		Иначе
			Задание.Состояние = Перечисления.NSI_СостоянияЗаданий.Ожидает;
		КонецЕсли;
		Задание.Записать();
	КонецЦикла;
КонецПроцедуры

Функция ДождатьсяВыполнения(Знач КлючиЗаданий, Знач Таймаут = 5) Экспорт
	ВремяВРаботе = 0;
	ДождалисьВыполнения = Ложь;
	Для каждого КлючЗадания Из КлючиЗаданий Цикл
		НачалоОжидания = ТекущаяДата();
		ДождалисьВыполнения = ОжидатьСостояниеЗадания(КлючЗадания, Перечисления.NSI_СостоянияЗаданий.Выполнено, Таймаут - ВремяВРаботе);
		Если Не ДождалисьВыполнения Тогда
			Прервать;
		КонецЕсли;
		ВремяВРаботе = ВремяВРаботе + (ТекущаяДата() - НачалоОжидания);
	КонецЦикла;
	
	Возврат ДождалисьВыполнения;
КонецФункции

Процедура ОтменитьЗаданияСДостигнутымЛимитомПоМаксимальномуКоличествуПопытокВыполнения()
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	NSI_Задания.Ключ
	|ИЗ
	|	РегистрСведений.NSI_Задания КАК NSI_Задания
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.NSI_НастройкиМетодовОбработчиков КАК NSI_НастройкиМетодовОбработчиков
	|		ПО NSI_Задания.ИмяМетода = NSI_НастройкиМетодовОбработчиков.ИмяМетода
	|ГДЕ
	|	NSI_Задания.Состояние В (ЗНАЧЕНИЕ(Перечисление.NSI_СостоянияЗаданий.Ожидает), ЗНАЧЕНИЕ(Перечисление.NSI_СостоянияЗаданий.НаПаузе))
	|	И NSI_НастройкиМетодовОбработчиков.МаксимальноеКоличествоПопытокВыполнения > 0
	|	И NSI_Задания.КоличествоПопытокВыполения >= NSI_НастройкиМетодовОбработчиков.МаксимальноеКоличествоПопытокВыполнения";
	РезультатЗапроса = Запрос.Выполнить();
	ЗаданияДляОтмены = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Ключ");
	Для каждого КлючЗадания Из ЗаданияДляОтмены Цикл
		ОтменитьЗадание(КлючЗадания);
	КонецЦикла;
КонецПроцедуры

Процедура СнятьЗаданияСПаузы()
	ВсеЗаданияНаПаузе = ПолучитьВсеЗаданияНаПаузе();
	Для каждого КлючЗадания Из ВсеЗаданияНаПаузе Цикл
		НаборЗаписей = ПолучитьЗаполненныйНаборЗаписейПоКлючуЗадания(КлючЗадания);
		Задание = НаборЗаписей[0];
		НастройкиМетодаОбработчика = ПолучитьНастройкиМетодаОбработчика(Задание.ИмяМетода);
		Если Задание.НачалоВыполнения + НастройкиМетодаОбработчика.ПаузаПередНовойПопыткой <= ТекущаяДата() Тогда
			Задание.Состояние = Перечисления.NSI_СостоянияЗаданий.Ожидает;
			НаборЗаписей.Записать();
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры
// } Работа с множествами заданий

// { Служебные
Функция ПолучитьВозможныеИсключения() Экспорт
	ВозможныеИсключения = Новый Структура();
	ВозможныеИсключения.Вставить("ПараметрыЗаданияДолжныБытьСтруктурой", "Параметры задания должны иметь тип <Структура>");
	ВозможныеИсключения.Вставить("НастройкиМетодаОбработчикаДолжныБытьСтруктурой", "Настройки метода-обработчика должны иметь тип <Структура>");
	
	Возврат Новый ФиксированнаяСтруктура(ВозможныеИсключения);
КонецФункции

Функция ПолучитьПредопределенныеЗначенияГлубиныХраненияИстории() Экспорт
	ПредопределенныеЗначенияГлубиныХраненияИстории = Новый Структура();
	ПредопределенныеЗначенияГлубиныХраненияИстории.Вставить("Бесконечная", 0);
	ПредопределенныеЗначенияГлубиныХраненияИстории.Вставить("День", 1);
	ПредопределенныеЗначенияГлубиныХраненияИстории.Вставить("Неделя", 7);
	ПредопределенныеЗначенияГлубиныХраненияИстории.Вставить("Месяц", 30);
	
	Возврат Новый ФиксированнаяСтруктура(ПредопределенныеЗначенияГлубиныХраненияИстории);
КонецФункции

Функция ПустойУникальныйИдентификатор() Экспорт
	Возврат Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000");
КонецФункции

Функция Спать(Знач Секунды) Экспорт
	Команда = "ping -n " + Формат(Секунды + 1, "ЧДЦ=0; ЧГ=") + " -w 2000 0.0.0.1";
	ЗапуститьПриложение(Команда, , Истина);
	
	Возврат Секунды;
КонецФункции

Функция ПолучитьПрефиксКлючаИсполнителей()
	Возврат "NSI_";
КонецФункции

Функция СгенерироватьКлючИдентификацииИсполнителя()
	Возврат ПолучитьПрефиксКлючаИсполнителей() + Строка(Новый УникальныйИдентификатор());
КонецФункции

Функция ПолучитьЗаполненныйНаборЗаписейПоКлючуЗадания(Знач КлючЗадания) Экспорт
	НаборЗаписей = РегистрыСведений.NSI_Задания.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Ключ.Установить(КлючЗадания);
	НаборЗаписей.Прочитать();
	
	Возврат НаборЗаписей;
КонецФункции

Функция ПолучитьОдинДень() Экспорт
	ОдинДень = 24 * 60 * 60;
	
	Возврат ОдинДень;
КонецФункции

Процедура СократитьИсториюВыполненияЗаданий(Знач ТребуемаяГлубинаИсторииВДнях) Экспорт
	МинимальныйПериодИстории = ТекущаяДата() - ПолучитьОдинДень() * ТребуемаяГлубинаИсторииВДнях;
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	NSI_Задания.Ключ
	|ИЗ
	|	РегистрСведений.NSI_Задания КАК NSI_Задания
	|ГДЕ
	|	NSI_Задания.Период < &МинимальныйПериодИстории
	|	И NSI_Задания.Состояние В (ЗНАЧЕНИЕ(Перечисление.NSI_СостоянияЗаданий.Выполнено), ЗНАЧЕНИЕ(Перечисление.NSI_СостоянияЗаданий.Отменено))";
	Запрос.УстановитьПараметр("МинимальныйПериодИстории", МинимальныйПериодИстории);
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	НаборЗаписей = РегистрыСведений.NSI_Задания.СоздатьНаборЗаписей();
	Пока Выборка.Следующий() Цикл
		НаборЗаписей.Отбор.Ключ.Установить(Выборка.Ключ);
		НаборЗаписей.Записать();
	КонецЦикла;
КонецПроцедуры

Функция ПолучитьНастройкиМетодаОбработчика(Знач ИмяМетода) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	NSI_НастройкиМетодовОбработчиков.МаксимальноеКоличествоПопытокВыполнения,
	|	NSI_НастройкиМетодовОбработчиков.ПаузаПередНовойПопыткой,
	|	NSI_НастройкиМетодовОбработчиков.МаксимальноеКоличествоИсполнителей,
	|	NSI_НастройкиМетодовОбработчиков.Приоритет
	|ИЗ
	|	РегистрСведений.NSI_НастройкиМетодовОбработчиков КАК NSI_НастройкиМетодовОбработчиков
	|ГДЕ
	|	NSI_НастройкиМетодовОбработчиков.ИмяМетода = &ИмяМетода";
	Запрос.УстановитьПараметр("ИмяМетода", ИмяМетода);
	РезультатЗапроса = Запрос.Выполнить();
	Результат = Новый Структура("МаксимальноеКоличествоПопытокВыполнения, ПаузаПередНовойПопыткой, МаксимальноеКоличествоИсполнителей, Приоритет", 0, 0, 0, 0);
	Если Не РезультатЗапроса.Пустой() Тогда
		ЗаполнитьЗначенияСвойств(Результат, РезультатЗапроса.Выгрузить()[0]);
	КонецЕсли;
	
	Возврат Новый ФиксированнаяСтруктура(Результат);
КонецФункции

Процедура СохранитьНастройкиМетодаОбработчика(Знач ИмяМетода, Знач НовыеНастройки) Экспорт
	Если ТипЗнч(НовыеНастройки) <> Тип("Структура") Тогда
		ВызватьИсключение ПолучитьВозможныеИсключения().НастройкиМетодаОбработчикаДолжныБытьСтруктурой;
	КонецЕсли;
	МенеджерЗаписи = РегистрыСведений.NSI_НастройкиМетодовОбработчиков.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.ИмяМетода = ИмяМетода;
	МенеджерЗаписи.Прочитать();
	ЗаполнитьЗначенияСвойств(МенеджерЗаписи, НовыеНастройки);
	Если Не МенеджерЗаписи.Выбран() Тогда
		МенеджерЗаписи.ИмяМетода = ИмяМетода;
	КонецЕсли;
	МенеджерЗаписи.Записать();
КонецПроцедуры
// }
