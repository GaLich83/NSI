Функция ПолучитьПустуюСтруктуруМетодаЗапроса() Экспорт
	ПустойЭлемент = Справочники.NSI_ИсточникиЗапросовМД.СоздатьЭлемент();
	ТаблицаЗначенийНастройки = ПустойЭлемент.НастройкиЗапросов.Выгрузить();
	СтруктураМетодаЗапроса = Новый Структура;
	Для Каждого Колонка Из ТаблицаЗначенийНастройки.Колонки Цикл
		Если Колонка.Имя = "НомерСтроки" Тогда
			Продолжить;
		КонецЕсли;
		СтруктураМетодаЗапроса.Вставить(Колонка.Имя, Колонка.ТипЗначения.ПривестиЗначение(Неопределено));
	КонецЦикла;
	Возврат СтруктураМетодаЗапроса;
КонецФункции

Функция ПолучитьОписаниеМетодаЗапросаПоИсточнику(ИсточникЗапросаМД, ИмяМетода) Экспорт
	Если ЗначениеЗаполнено(ИсточникЗапросаМД) Тогда
		СтрокаМетода = ИсточникЗапросаМД.НастройкиЗапросов.Найти(ИмяМетода, "ИмяМетодаЗапроса");
		Если СтрокаМетода = Неопределено Тогда
			ВызватьИсключение "Метод не описан";
		КонецЕсли;
		СтруктураМетода = ПолучитьПустуюСтруктуруМетодаЗапроса();
		ЗаполнитьЗначенияСвойств(СтруктураМетода, СтрокаМетода);
		Возврат СтруктураМетода;
	Иначе
		ВызватьИсключение "Источник не найден";
	КонецЕсли;	
КонецФункции

Функция ПроверитьРаботуМетода(СтруктураМетодаЗапроса, ПроверяемаяФункция, СистемаИсточник) Экспорт
	ТЗПараметры = NSI_РаботаСМастерДаннымиСервер.ПрочитатьОбъектИзXML(СтруктураМетодаЗапроса.СписокПараметровОжидаемыхОтИсточникаЗапроса);
	Параметры = Новый Структура;
	Для Каждого СтрокаПараметров Из ТЗПараметры Цикл
		Параметры.Вставить(СтрокаПараметров.ИмяРеквизита, СтрокаПараметров.ДанныеПроверки);
	КонецЦикла;
	Ссылка = СистемаИсточник;
	Выполнить(СтруктураМетодаЗапроса[ПроверяемаяФункция]);
	Сообщить("Проверка метода завершена");
КонецФункции

Функция ВыполнитьМетод(СтруктураМетодаЗапроса, ФункцияМетода, Параметры, СистемаИсточник = Неопределено) Экспорт
	ПроверитьПереданныйСписокПараметров(Параметры, NSI_РаботаСМастерДаннымиСервер.ПрочитатьОбъектИзXML(СтруктураМетодаЗапроса.СписокПараметровОжидаемыхОтИсточникаЗапроса));
	Результат = Неопределено;
	Ссылка = СистемаИсточник;
	Выполнить(СтруктураМетодаЗапроса[ФункцияМетода]);
	Возврат Результат;
КонецФункции

Функция ПроверитьПереданныйСписокПараметров(ПереданныеПараметры, ТЗПараметры)
	Для Каждого СтрокаПараметров Из ТЗПараметры Цикл
		ЗначениеПараметра = Неопределено;
		ПереданныеПараметры.Свойство(СтрокаПараметров.ИмяРеквизита, ЗначениеПараметра);
		Если Не СтрокаПараметров.ТипРеквизита.ПривестиЗначение(ЗначениеПараметра)=ЗначениеПараметра Тогда
			ВызватьИсключение "Тип переданного значения параметра "+СтрокаПараметров.Ключ+" не соответствует установленному типу для метода.";
		КонецЕсли;
	КонецЦикла;
КонецФункции

Функция ВыполнитьВызовМетодаОбработкиДанныхВнешнейСистемы(СистемаИсточник, ИмяМетода, Параметры) Экспорт
	Ответ = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("mdm", "GetMasterDataByMethodResponse"));
	ИсточникМД = Справочники.NSI_ИсточникиЗапросовМД.НайтиПоКоду(СистемаИсточник);
	Если ИсточникМД.Пустая() Тогда
		ВернутьОшибкуВебСервиса(Ответ.Errors, "UnknownSourceSystem", "Описание базы-источника данных не найдено.");
		Возврат Ответ;  
	КонецЕсли;
	Попытка
		СтруктураМетодаЗапроса = NSI_РаботаСМастерДаннымиРаботаСВнешнимиСистемами.ПолучитьОписаниеМетодаЗапросаПоИсточнику(ИсточникМД, ИмяМетода);
	Исключение
		ВернутьОшибкуВебСервиса(Ответ.Errors, "UnknownMethod", "Описание метода "+ИмяМетода+" базы-источника данных не найдено.");
		Возврат Ответ;
	КонецПопытки;
	// Проверка валидности переданных в метод параметров;
	Результат = Неопределено;
	Попытка
		Результат = NSI_РаботаСМастерДаннымиРаботаСВнешнимиСистемами.ВыполнитьМетод(СтруктураМетодаЗапроса, "ПроверкаВалидностиЗапроса", Параметры, ИсточникМД);
	Исключение
		ВернутьОшибкуВебСервиса(Ответ.Errors, "UnspecifiedError", ОписаниеОшибки());
		Возврат Ответ;
	КонецПопытки;
	Если Не Результат = Истина Тогда
		ВернутьОшибкуВебСервиса(Ответ.Errors, "UnspecifiedError", "Переданные в метод параметры невалидны.");
		Возврат Ответ;
	КонецЕсли;
	// Функция для принятия решения об асинхроне
	Результат = Неопределено;
	Попытка
		Результат = NSI_РаботаСМастерДаннымиРаботаСВнешнимиСистемами.ВыполнитьМетод(СтруктураМетодаЗапроса, "УсловиеПринятияРешенияОбАсинхроне", Параметры, ИсточникМД);
	Исключение
		ВернутьОшибкуВебСервиса(Ответ.Errors, "UnspecifiedError", ОписаниеОшибки());
		Возврат Ответ;
	КонецПопытки;
	Если Результат = Истина Тогда
		// Здесь должен быть вызов метода для асинхронной работы с переданными данными, пока же ставим Ложь;
		Результат = Ложь;
	Иначе
		Результат = Ложь;
	КонецЕсли;
	ВключенАсинхронныйРежим = Результат;
	Результат = Неопределено;
	Попытка
		Если ВключенАсинхронныйРежим Тогда
			//NSI_РаботаСМастерДаннымиРаботаСВнешнимиСистемами.ВыполнитьМетод(СтруктураМетодаЗапроса, "ОписаниеАсинхронногоЗапроса");
			//Ответ.AsyncTicket = НомерТикетаАсинхронногоЗапроса;
			Возврат Ответ;
		Иначе
			Результат = NSI_РаботаСМастерДаннымиРаботаСВнешнимиСистемами.ВыполнитьМетод(СтруктураМетодаЗапроса, "ОписаниеСинхронногоЗапроса", Параметры, ИсточникМД);
			Если Не ЗначениеЗаполнено(Результат) Тогда
				ВернутьОшибкуВебСервиса(Ответ.Errors, "DataNotFound", "Метод вернул пустой результат запроса");
				Возврат Ответ;
			Иначе
				Если ТипЗнч(Результат)=Тип("ТаблицаЗначений") Тогда
					ТаблицаРезультата = Результат;
				Иначе
					ТаблицаРезультата = Новый ТаблицаЗначений;
					ТаблицаРезультата.Колонки.Добавить("Ссылка", Новый ОписаниеТипов("СправочникСсылка.NSI_МастерДанные"));
					Если ТипЗнч(Результат)=Тип("СправочникСсылка.NSI_МастерДанные") Тогда
						НоваяСтрока = ТаблицаРезультата.Добавить();
						НоваяСтрока.Ссылка = Результат;
					ИначеЕсли ТипЗнч(Результат)=Тип("Массив") Тогда
						Для Каждого СсылкаРезультат Из Результат Цикл
							НоваяСтрока = ТаблицаРезультата.Добавить();
							НоваяСтрока.Ссылка = СсылкаРезультат;
						КонецЦикла;
					ИначеЕсли ТипЗнч(Результат)=Тип("СписокЗначений") Тогда
						Для Каждого СсылкаРезультат Из Результат Цикл
							НоваяСтрока = ТаблицаРезультата.Добавить();
							НоваяСтрока.Ссылка = СсылкаРезультат.Значение;
						КонецЦикла;
					Иначе
						ВернутьОшибкуВебСервиса(Ответ.Errors, "DataNotFound", "Неизвестный формат результата выполнения метода.");
						Возврат Ответ;
					КонецЕсли;
				КонецЕсли;
				СтруктураАлиасовПолей = ПолучитьСтруктуруАлиасовПолей(ИсточникМД, ИмяМетода);
				Ответ.DataResponse = NSI_РаботаСМастерДаннымиПоиск.СформироватьОтветПоСпискуМастерДанных(ТаблицаРезультата,,СтруктураАлиасовПолей);
			КонецЕсли;
		КонецЕсли;
	Исключение
		ВернутьОшибкуВебСервиса(Ответ.Errors, "UnspecifiedError", ОписаниеОшибки());
		Возврат Ответ;
	КонецПопытки;
	Возврат Ответ;
КонецФункции

Функция ВернутьОшибкуВебСервиса(СписокОшибок, КодОшибки, ОписаниеОшибки) Экспорт
	Ошибка = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("mdm", "ErrorData"));
	Ошибка.Code = КодОшибки;
	Ошибка.Description = ОписаниеОшибки;
	СписокОшибок.Добавить(Ошибка);
КонецФункции

Функция СоздатьПараметрыKeysПоСтруктуре(Фабрика, Структура) Экспорт
	Keys = Фабрика.Создать(Фабрика.Тип("mdm", "Keys"));
	Для Каждого СтрокаСтруктуры Из Структура Цикл
		Ключ = Фабрика.Создать(Фабрика.Тип("mdm", "KeyValue"));
		Ключ.Key = СтрокаСтруктуры.Ключ;
		Ключ.Value = СтрокаСтруктуры.Значение;
		Keys.Key.Добавить(Ключ);
	КонецЦикла;
	Возврат Keys;
КонецФункции

Функция ПолучитьСтруктуруАлиасовПолей(ИсточникЗапроса=Неопределено, ИмяМетода=Неопределено) Экспорт
	СтруктураПодмены = Новый Структура;
	Если ТипЗнч(ИсточникЗапроса)=Тип("СправочникСсылка.NSI_ИсточникиЗапросовМД") Тогда
		ТаблицаАлиасов = ИсточникЗапроса.НаборПодменыЗаголовковМастерДанных.Выгрузить(Новый Структура("ИмяИспользуемогоМетода", ""));
		Для Каждого Строк Из ТаблицаАлиасов Цикл
			СтруктураПодмены.Вставить(Строк.ИсходноеИмяЭлемента, Строк.РезультирующееИмяЭлемента);
		КонецЦикла;
		Если ЗначениеЗаполнено(ИмяМетода) Тогда
			ДополнениеДляМетода = ИсточникЗапроса.НаборПодменыЗаголовковМастерДанных.Выгрузить(Новый Структура("ИмяИспользуемогоМетода", ИмяМетода));
			Для Каждого Строк Из ДополнениеДляМетода Цикл
				СтруктураПодмены.Вставить(Строк.ИсходноеИмяЭлемента, Строк.РезультирующееИмяЭлемента);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	Возврат СтруктураПодмены;
КонецФункции

Процедура ЗапуститьОповещенияВнешнихСервисовОбИзмененииМД(ПереданныеПараметры) Экспорт
	УстановитьПривилегированныйРежим(Истина);
	Если Не ПереданныеПараметры.Свойство("GUID") Тогда
		ВызватьИсключение "GUID мастер-данных не передан.";
	КонецЕсли;
	СсылкаНаМастерДанные = NSI_РаботаСМастерДаннымиПоиск.ВернутьСуществующуюСсылку(ПереданныеПараметры.GUID, "NSI_МастерДанные");
	Если СсылкаНаМастерДанные = Неопределено Тогда
		ВызватьИсключение "Мастер-данных с указанным GUID в базе не существует.";
	КонецЕсли;
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	NSI_НастройкиАвтоматическихОповещенийОбИзмененииМД.Ссылка,
	                      |	NSI_НастройкиАвтоматическихОповещенийОбИзмененииМД.ВнешнийСервис,
	                      |	NSI_НастройкиАвтоматическихОповещенийОбИзмененииМД.МетодОповещения,
	                      |	NSI_НастройкиАвтоматическихОповещенийОбИзмененииМД.ОграничениеОбластиОповещений,
	                      |	NSI_НастройкиАвтоматическихОповещенийОбИзмененииМД.Владелец КАК ВидМД
	                      |ИЗ
	                      |	Справочник.NSI_НастройкиАвтоматическихОповещенийОбИзмененииМД КАК NSI_НастройкиАвтоматическихОповещенийОбИзмененииМД
	                      |ГДЕ
	                      |	NSI_НастройкиАвтоматическихОповещенийОбИзмененииМД.Владелец = &Владелец");
	Запрос.УстановитьПараметр("Владелец", СсылкаНаМастерДанные.Владелец);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ПараметрыПроверки = Новый Структура("ВнешнийСервис, МетодОповещения, ОграничениеОбластиОповещений, ВидМД");
		ЗаполнитьЗначенияСвойств(ПараметрыПроверки, Выборка);
		ПараметрыПроверки.Вставить("GUID", ПереданныеПараметры.GUID);
		NSI_Задания.ДобавитьЗадание("NSI_РаботаСМастерДаннымиРаботаСВнешнимиСистемами.ОповеститьСервисОбИзмененииМД", ПараметрыПроверки, "Оповещаем сервис "+Выборка.ВнешнийСервис+" о изменении МД ("+СсылкаНаМастерДанные+"), метод оповещения: "+Выборка.МетодОповещения);
	КонецЦикла;
КонецПроцедуры

Процедура ОповеститьСервисОбИзмененииМД(ПереданныеПараметры) Экспорт
	Если ПереданныеПараметры.Свойство("ОграничениеОбластиОповещений") И ЗначениеЗаполнено(ПереданныеПараметры.ОграничениеОбластиОповещений) Тогда
		ДеревоОграничений = NSI_РаботаСМастерДаннымиСервер.ПрочитатьОбъектИзXML(ПереданныеПараметры.ОграничениеОбластиОповещений);
	Иначе
		ДеревоОграничений = NSI_РаботаСМастерДаннымиПоиск.СоздатьПустоеДеревоПоиска();
	КонецЕсли;
	ДеревоПоиска = NSI_РаботаСМастерДаннымиПоиск.СоздатьПустоеДеревоПоиска();
	СтрокаГруппы = ДеревоПоиска.Строки.Добавить();
	СтрокаГруппы.ГруппаУсловий = "AND";
	СтрокаGUID = СтрокаГруппы.Строки.Добавить();
	СтрокаGUID.Поле = "GUID";
	СтрокаGUID.Условие = "EQUAL";
	СтрокаGUID.ЗначенияПоиска = ПереданныеПараметры.GUID;
	Для Каждого СтрокиОграничений Из ДеревоОграничений.Строки Цикл
		СкопироватьСтрокуДерева(ДеревоПоиска, СтрокаГруппы, СтрокиОграничений);
	КонецЦикла;
	ПроверкаМастерДанных = NSI_РаботаСМастерДаннымиПоиск.НайтиДанныеПоУсловиюXDTO(ПереданныеПараметры.ВидМД, NSI_РаботаСМастерДаннымиПоиск.ПреобразоватьДеревоПоискаВЗапросПоискаXDTO(ДеревоПоиска, ТекущаяДата()));
	Если ПроверкаМастерДанных.MasterData.Количество()>0 Тогда
		СтруктураПараметров = Новый Структура("GUID", ПереданныеПараметры.GUID);
		// Надо добавить параметры метода.
		Справочники.NSI_СписокВнешнихСервисов.ВыполнитьМетодСервиса(ПереданныеПараметры.ВнешнийСервис, ПереданныеПараметры.МетодОповещения, СтруктураПараметров);
	КонецЕсли;
КонецПроцедуры

Функция СкопироватьСтрокуДерева(РеквизитДерево, Приемник, Источник)

    Перем НоваяСтрока, ОбратныйИндекс, КолПодчиненныхСтрок;

	ЭтоРеквизитФормы = Не ТипЗнч(РеквизитДерево)=Тип("ДеревоЗначений");
    // Источник может быть уже перенесен
    // Это происходит если выделены несколько элементов
    // одной и той же ветви дерева на разных уровнях иерархии
    Если Источник = Неопределено Тогда
        Возврат Неопределено;
    КонецЕсли;

    Если Приемник = Неопределено Тогда
        // Добавляем в корень
		Если ЭтоРеквизитФормы Тогда
			НоваяСтрока = РеквизитДерево.ПолучитьЭлементы().Добавить();
		Иначе
			НоваяСтрока = РеквизитДерево.Строки.Добавить();
		КонецЕсли;        
	Иначе
		Если ЭтоРеквизитФормы Тогда
			НоваяСтрока = Приемник.ПолучитьЭлементы().Добавить();
		Иначе
			НоваяСтрока = Приемник.Строки.Добавить();
		КонецЕсли;
    КонецЕсли;

    ЗаполнитьЗначенияСвойств(НоваяСтрока, Источник);

	Если ЭтоРеквизитФормы Тогда
    	КолПодчиненныхСтрок = Источник.ПолучитьЭлементы().Количество();
	Иначе
		КолПодчиненныхСтрок = Источник.Строки.Количество();
	КонецЕсли;
    Для ОбратныйИндекс = 1 По КолПодчиненныхСтрок Цикл
        ПодчиненнаяСтрока = Источник.ПолучитьЭлементы()
            [КолПодчиненныхСтрок - ОбратныйИндекс];
        СкопироватьСтрокуДерева(РеквизитДерево, НоваяСтрока, ПодчиненнаяСтрока);
    КонецЦикла;

	Если ЭтоРеквизитФормы Тогда
		Если Источник.ПолучитьРодителя() = Неопределено Тогда
			РеквизитДерево.ПолучитьЭлементы().Удалить(Источник);
	    Иначе
	        Источник.ПолучитьРодителя().ПолучитьЭлементы().Удалить(Источник);
		КонецЕсли;
	Иначе
		//Если Источник.Родитель = Неопределено Тогда
		//	РеквизитДерево.Строки.Удалить(Источник);
		//Иначе
		//    Источник.Родитель.Строки.Удалить(Источник);
		//КонецЕсли;
	КонецЕсли;
	

    Возврат НоваяСтрока;

КонецФункции




