//Процедура ЗаписатьЛогОтчета(ИмяОтчета, ИмяОбъектаНастройки, Знач Настройки, ФормаОтчета, ПараметрыФормыЛога=Неопределено, КомандаПриОткрытии =  "") Экспорт
//	Если Не NSI_ПривилегированныйПовторноеИспользование.ПолучитьКонстанту("NSI_ВключитьЛогированиеОтчетов") Тогда
//		Возврат;
//	КонецЕсли;
//	УстановитьПривилегированныйРежим(Истина);
//	Если ПараметрыФормыЛога=Неопределено Тогда
//		ПараметрыФормыЛога = Новый Структура;
//	КонецЕсли;
//	Если ТипЗнч(Настройки)= Тип("КомпоновщикНастроекКомпоновкиДанных") Тогда
//		Настройки = Настройки.ПолучитьНастройки();
//	КонецЕсли;
//	ДеревоОтборов = ПолучитьДеревоОтборов(Настройки);
//	СтруктураПараметров = ПолучитьСписокПараметров(Настройки);
//	ЗаписьРегистра = РегистрыСведений.NSI_ЛогированиеОтчетов.СоздатьМенеджерЗаписи();
//	ЗаписьРегистра.ИДОтчета = Новый УникальныйИдентификатор();
//	ЗаписьРегистра.ДатаФормирования = ТекущаяДата();
//	ЗаписьРегистра.ИмяОтчета = ИмяОтчета;
//	ЗаписьРегистра.Компьютер = ПараметрыСеанса.NSI_ИмяКлиентскойМашины;
//	ЗаписьРегистра.Пользователь = ПараметрыСеанса.NSI_ТекущийПользователь.Имя;
//	ЗаписьРегистра.СписокОтборов = Новый ХранилищеЗначения(ДеревоОтборов, Новый СжатиеДанных(9));
//	ЗаписьРегистра.СписокПараметров = Новый ХранилищеЗначения(СтруктураПараметров, Новый СжатиеДанных(9));
//	ЗаписьРегистра.ХранилищеНеобработанныхНастроек = СохранитьНеобработаннуюНастройкуОтчета(Настройки, ТипЗнч(Настройки) = Тип("ДинамическийСписок"));
//	ЗаписьРегистра.ФормаОтчета = ФормаОтчета;
//	//ЗаписьРегистра.ПараметрыФормы = Новый ХранилищеЗначения(ЗначениеВСтрокуВнутр(ПараметрыФормыЛога),Новый СжатиеДанных(9));
//	ЗаписьРегистра.КомандаПриОткрытии = КомандаПриОткрытии;
//	ЗаписьРегистра.ИмяОбъектаНастройки = ИмяОбъектаНастройки;
//	ЗаписьРегистра.Записать();
//	Если NSI_ПривилегированныйПовторноеИспользование.ПолучитьКонстанту("NSI_ОтсылатьРезультатыЛогированияВНСИ") Тогда
//		МассивПараметров = Новый Массив;
//		МассивПараметров.Добавить(ЗаписьРегистра.ИДОтчета);
//		Если ФоновыеЗадания.ПолучитьФоновыеЗадания(Новый Структура("Состояние", СостояниеФоновогоЗадания.Активно)).Количество()<=10 Тогда
//			ФоновыеЗадания.Выполнить("NSI_Логирование.ОтправитьЛогОтчетаВНСИ", МассивПараметров,,"Пересылка лога отчета в НСИ "+Строка(ЗаписьРегистра.ИДОтчета));
//		КонецЕсли;                     
//	КонецЕсли;
//КонецПроцедуры

Функция ПолучитьДеревоОтборов(Настройки) Экспорт
	ДеревоОтборов = Новый ДеревоЗначений;
	ДеревоОтборов.Колонки.Добавить("Группа", Новый ОписаниеТипов("Строка"), "Группа");
	ДеревоОтборов.Колонки.Добавить("Использование", Новый ОписаниеТипов("Булево"), "Использование");
	ДеревоОтборов.Колонки.Добавить("ЛевоеЗначение", Новый ОписаниеТипов("Строка"), "Левое значение");
	ДеревоОтборов.Колонки.Добавить("ВидСравнения", Новый ОписаниеТипов("Строка"), "Вид сравнения");
	ДеревоОтборов.Колонки.Добавить("ПравоеЗначение", Новый ОписаниеТипов("Строка"), "Правое значение");
	ДеревоОтборов.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка"), "Представление");
	Для Каждого Элемент Из Настройки.Отбор.Элементы Цикл
		Если Не Элемент.Использование Тогда Продолжить; КонецЕсли;
		Если ТипЗнч(Элемент)=Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			НоваяГруппа = ДеревоОтборов.Строки.Добавить();
			Если Элемент.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ Тогда
				НоваяГруппа.Группа = "И";
			ИначеЕсли Элемент.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли Тогда
				НоваяГруппа.Группа = "ИЛИ";
			Иначе НоваяГруппа.Группа = "НЕ"; КонецЕсли;
			ЗаполнитьСтрокиВнутриГруппы(НоваяГруппа, Элемент.Элементы);
			Если НоваяГруппа.Строки.Количество()=0 Тогда
				ДеревоОтборов.Строки.Удалить(НоваяГруппа);
			КонецЕсли;
		Иначе
			НоваяСтрока = ДеревоОтборов.Строки.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Элемент);
		КонецЕсли;
	КонецЦикла;
	Возврат ДеревоОтборов;
КонецФункции

Процедура ЗаполнитьСтрокиВнутриГруппы(Группа, ЭлементыГруппы)
	Для Каждого Элемент Из ЭлементыГруппы Цикл
		Если Не Элемент.Использование Тогда Продолжить; КонецЕсли;
		Если ТипЗнч(Элемент)=Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			НоваяГруппа = Группа.Строки.Добавить();
			Если Элемент.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ Тогда
				НоваяГруппа.Группа = "И";
			ИначеЕсли Элемент.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли Тогда
				НоваяГруппа.Группа = "ИЛИ";
			Иначе НоваяГруппа.Группа = "НЕ"; КонецЕсли;
			ЗаполнитьСтрокиВнутриГруппы(НоваяГруппа, Элемент.Элементы);
			Если НоваяГруппа.Строки.Количество()=0 Тогда
				Группа.Строки.Удалить(НоваяГруппа);
			КонецЕсли;
		Иначе
			НоваяСтрока = Группа.Строки.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Элемент);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Функция ПолучитьСписокПараметров(Настройки) Экспорт
	Параметры = Новый Соответствие;
	Если ТипЗнч(Настройки) = Тип("ДинамическийСписок") Тогда
		ЭлементыПараметров = Настройки.Параметры;
	Иначе
		ЭлементыПараметров = Настройки.ПараметрыДанных;
	КонецЕсли;
	Для Каждого ЭлементПараметр Из ЭлементыПараметров.Элементы Цикл
		Если Не ЭлементПараметр.Использование Тогда
			Продолжить;
		КонецЕсли;
		Параметры.Вставить(Строка(ЭлементПараметр.Параметр), ЭлементПараметр.Значение);
	КонецЦикла;
	Возврат Параметры;
КонецФункции

//Процедура ОтправитьЛогОтчетаВНСИ(ИДОтчета) Экспорт
//	УстановитьПривилегированныйРежим(Истина);
//	НаборИзменений = РегистрыСведений.NSI_ЛогированиеОтчетов.СоздатьНаборЗаписей();
//	НаборИзменений.Отбор.ИДОтчета.Установить(ИДОтчета, Истина);
//	НаборИзменений.Прочитать();
//	БазаНСИ = NSI.ПодключитьНСИ();
//	БылиОшибки = Ложь;
//	Для Каждого Запись Из НаборИзменений Цикл
//		Попытка
//			БазаНСИ.AddRecordOfReportsJob(NSI.ПолучитьИмяДаннойБазы(), Запись.ДатаФормирования, Запись.ИмяОтчета, Запись.Пользователь, Запись.Компьютер, СериализаторXDTO.ЗаписатьXDTO(Запись.СписокПараметров), СериализаторXDTO.ЗаписатьXDTO(Запись.СписокОтборов), СериализаторXDTO.ЗаписатьXDTO(Запись.ХранилищеНеобработанныхНастроек), Запись.ФормаОтчета, СериализаторXDTO.ЗаписатьXDTO(Запись.ПараметрыФормы), Запись.КомандаПриОткрытии, Запись.ИмяОбъектаНастройки);
//		Исключение
//			БылиОшибки = Истина;
//		КонецПопытки
//	КонецЦикла;
//	Если БылиОшибки Тогда Возврат; КонецЕсли;
//	НаборИзменений.Очистить();
//	НаборИзменений.Записать();
//КонецПроцедуры

Функция СохранитьНеобработаннуюНастройкуОтчета(Настройки, ЭтоДС=Ложь) Экспорт
	Если ЭтоДС Тогда
		СтруктураНастройки = Новый Структура;
		ЗаписьXML = Новый ЗаписьXML;
		ЗаписьXML.УстановитьСтроку();
		СериализаторXDTO.ЗаписатьXML(ЗаписьXML, Настройки.Группировка, "GroupItems" , "http://v8.1c.ru/8.1/data-composition-system/settings");
		СтруктураНастройки.Вставить("GroupItems", ЗаписьXML.Закрыть());
		ЗаписьXML = Новый ЗаписьXML;
		ЗаписьXML.УстановитьСтроку();
		СериализаторXDTO.ЗаписатьXML(ЗаписьXML, Настройки.Отбор, "Filter" , "http://v8.1c.ru/8.1/data-composition-system/settings");
		СтруктураНастройки.Вставить("Filter", ЗаписьXML.Закрыть());
		ЗаписьXML = Новый ЗаписьXML;
		ЗаписьXML.УстановитьСтроку();
		СериализаторXDTO.ЗаписатьXML(ЗаписьXML, Настройки.УсловноеОформление, "ConditionalAppearance" , "http://v8.1c.ru/8.1/data-composition-system/settings");
		СтруктураНастройки.Вставить("ConditionalAppearance", ЗаписьXML.Закрыть());
		ЗаписьXML = Новый ЗаписьXML;
		ЗаписьXML.УстановитьСтроку();
		СериализаторXDTO.ЗаписатьXML(ЗаписьXML, СтруктураНастройки, "Structure" , "http://v8.1c.ru/8.1/data/core");
		ЗначениеНастройки = ЗаписьXML.Закрыть(); 
	Иначе	
		ЗаписьXML = Новый ЗаписьXML;
		ЗаписьXML.УстановитьСтроку();
		СериализаторXDTO.ЗаписатьXML(ЗаписьXML, Настройки, "Settings" , "http://v8.1c.ru/8.1/data-composition-system/settings");
		ЗначениеНастройки = ЗаписьXML.Закрыть();
	КонецЕсли;
	Возврат Новый ХранилищеЗначения(ЗначениеНастройки, Новый СжатиеДанных(9));
КонецФункции

//Функция УстановитьНастройкиЭлементаФормы(ОбъектНастроек, XDTOНастроек) Экспорт 
//	ЧтениеXML			= Новый ЧтениеXML;
//	ЧтениеXML.УстановитьСтроку(XDTOНастроек);
//	Настройки = СериализаторXDTO.ПрочитатьXML(ЧтениеXML);
//	Если ТипЗнч(ОбъектНастроек) = Тип("ДинамическийСписок") Тогда
//		ЭлементыНастройки = ОбъектНастроек.Отбор.Элементы;
//		УдаляемыеЭлементыНастройки = Новый Массив;
//		Для Каждого ЭлементОтбора Из ЭлементыНастройки Цикл
//			Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных")
//				И ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный Тогда
//				Продолжить;
//			КонецЕсли; 
//			УдаляемыеЭлементыНастройки.Добавить(ЭлементОтбора);
//		КонецЦикла;
//		Для каждого ЭлементНастройки Из УдаляемыеЭлементыНастройки Цикл
//			ЭлементыНастройки.Удалить(ЭлементНастройки);
//		КонецЦикла; 
//		ЧтениеXML			= Новый ЧтениеXML;
//		ЧтениеXML.УстановитьСтроку(Настройки.Filter);
//		Источник = СериализаторXDTO.ПрочитатьXML(ЧтениеXML);
//		NSI_ПроцедурыРаботыСоСпискамиСервер.УдалитьПредопределенныеЭлементыНастройки(Источник);
//		NSI_ПроцедурыРаботыСоСпискамиСервер.СкопироватьНастройку(ОбъектНастроек.Отбор, Источник);
//		ОбъектНастроек.Группировка.Элементы.Очистить();
//		ЧтениеXML			= Новый ЧтениеXML;
//		ЧтениеXML.УстановитьСтроку(Настройки.GroupItems);
//		Источник = СериализаторXDTO.ПрочитатьXML(ЧтениеXML);
//		NSI_ПроцедурыРаботыСоСпискамиСервер.УдалитьПредопределенныеЭлементыНастройки(Источник);
//		NSI_ПроцедурыРаботыСоСпискамиСервер.СкопироватьНастройку(ОбъектНастроек.Группировка, Источник);		
//		ОбъектНастроек.УсловноеОформление.Элементы.Очистить();
//		ЧтениеXML			= Новый ЧтениеXML;
//		ЧтениеXML.УстановитьСтроку(Настройки.ConditionalAppearance);
//		Источник = СериализаторXDTO.ПрочитатьXML(ЧтениеXML);
//		NSI_ПроцедурыРаботыСоСпискамиСервер.УдалитьПредопределенныеЭлементыНастройки(Источник);
//		NSI_ПроцедурыРаботыСоСпискамиСервер.СкопироватьНастройку(ОбъектНастроек.УсловноеОформление, Источник);
//	Иначе
//		ОбъектНастроек.ЗагрузитьНастройки(Настройки);
//	КонецЕсли;
//	Возврат ОбъектНастроек;
//КонецФункции

//Функция ПроверитьНеобходимостьЗаписиИзменений(Источник, Отказ)
//	Если Отказ Тогда
//		Возврат Неопределено;
//	КонецЕсли;
//	Тип = XMLТипЗнч(Источник.Ссылка);
//	Если Тип = Неопределено Тогда
//		Возврат Неопределено;
//	КонецЕсли;
//	СтрокТип = Тип.ИмяТипа;
//	Если Найти(СтрокТип, "ИдентификаторыОбъектовМетаданных")>0 Тогда
//		Возврат Неопределено;
//	КонецЕсли;
//	Если Не NSI_ПривилегированныйПовторноеИспользование.ПолучитьКонстанту("NSI_ВключитьМеханизмЛогирования") Тогда
//		Возврат Неопределено;
//	КонецЕсли;
//	СтрокТип = СтрЗаменить(СтрокТип,"DocumentRef.", "Документы__");
//	СтрокТип = СтрЗаменить(СтрокТип,"CatalogRef.", "Справочники__");
//	
//	НайденноеПравилоЛогирования = Неопределено;
//	ПараметрыСеанса.NSI_ТипыОтслеживаемыхИзменяемыхОбъектов.Свойство(СтрокТип, НайденноеПравилоЛогирования);
//	Если Не НайденноеПравилоЛогирования=Неопределено Тогда
//		Возврат НайденноеПравилоЛогирования;
//	КонецЕсли;
//	Возврат Неопределено;
//КонецФункции

Процедура НСИ_ЗаписьИсходногоДокументаПередЗаписью(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	//ПравилоЛогирования = ПроверитьНеобходимостьЗаписиИзменений(Источник, Отказ);
	//Если ПравилоЛогирования=Неопределено Тогда Возврат; КонецЕсли;
	//СтруктураЛогирования = ЗначениеИзСтрокиВнутр(ПравилоЛогирования);
	ТипОбъекта = XMLТипЗнч(Источник.Ссылка).ИмяТипа;
	ИмяДокумента = СтрЗаменить(ТипОбъекта, "DocumentRef.", "");
	Если Не ЗначениеЗаполнено(Источник.Ссылка) Тогда 
		УИД = Новый УникальныйИдентификатор();
		Источник.УстановитьСсылкуНового(Документы[ИмяДокумента].ПолучитьСсылку(УИД));
	Иначе
		УИД = Источник.Ссылка.УникальныйИдентификатор();
	КонецЕсли;
	ТаблицаОбъекта = ПодготовитьСтруктуруЗаписиОбъекта(Источник.Ссылка);
	МенеджерЗаписи = РегистрыСведений.NSI_ИзмененныеОбъекты.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.ИДПакета = УИД;
	МенеджерЗаписи.Порядок = 1;
	МенеджерЗаписи.ТипОбъекта = ТипОбъекта;
	МенеджерЗаписи.ДоИзменения = Новый ХранилищеЗначения(ТаблицаОбъекта, Новый СжатиеДанных(9));
	МенеджерЗаписи.Записать();
КонецПроцедуры

Процедура НСИ_ЗаписьИсходногоСправочникаПередЗаписью(Источник, Отказ) Экспорт
	//ПравилоЛогирования = ПроверитьНеобходимостьЗаписиИзменений(Источник, Отказ);
	//Если ПравилоЛогирования=Неопределено Тогда Возврат; КонецЕсли;
	//УстановитьПривилегированныйРежим(Истина);
	//СтруктураЛогирования = ЗначениеИзСтрокиВнутр(ПравилоЛогирования);
	ТипОбъекта = XMLТипЗнч(Источник.Ссылка).ИмяТипа;
	ИмяСправочника = СтрЗаменить(ТипОбъекта, "CatalogRef.", "");
	Если Не ЗначениеЗаполнено(Источник.Ссылка) Тогда 
		УИД = Новый УникальныйИдентификатор();
		Источник.УстановитьСсылкуНового(Справочники[ИмяСправочника].ПолучитьСсылку(УИД));
	Иначе
		УИД = Источник.Ссылка.УникальныйИдентификатор();
	КонецЕсли;
	МенеджерЗаписи = РегистрыСведений.NSI_ИзмененныеОбъекты.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.ИДПакета = УИД;
	МенеджерЗаписи.Порядок = 1;
	ТаблицаОбъекта = ПодготовитьСтруктуруЗаписиОбъекта(Источник.Ссылка);
	МенеджерЗаписи.ТипОбъекта = ТипОбъекта;
	МенеджерЗаписи.ДоИзменения = Новый ХранилищеЗначения(ТаблицаОбъекта, Новый СжатиеДанных(9));
	МенеджерЗаписи.Записать();
КонецПроцедуры


Процедура НСИ_ЗаписьРезультирующегоОбъектаПриЗаписи(Источник, Отказ) Экспорт
	//ПравилоЛогирования = ПроверитьНеобходимостьЗаписиИзменений(Источник, Отказ);
	//Если ПравилоЛогирования=Неопределено Тогда Возврат; КонецЕсли;
	//УстановитьПривилегированныйРежим(Истина);
	//СтруктураЛогирования = ЗначениеИзСтрокиВнутр(ПравилоЛогирования);
	УИД = Источник.Ссылка.УникальныйИдентификатор();
	Выборка = РегистрыСведений.NSI_ИзмененныеОбъекты.Выбрать(Новый Структура("ИДПакета", УИД), "Порядок Возр"); 
	НовыйУИД = Новый УникальныйИдентификатор();
	Если Выборка.Следующий() Тогда
		НоваяЗапись = РегистрыСведений.NSI_ИзмененныеОбъекты.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(НоваяЗапись, Выборка);
		СтруктураОбъекта = ПодготовитьСтруктуруЗаписиОбъекта(Источник.Ссылка);
		НоваяЗапись.ПослеИзменения = Новый ХранилищеЗначения(СтруктураОбъекта, Новый СжатиеДанных(9));
		НоваяЗапись.ИДПакета = НовыйУИД;
		НоваяЗапись.СсылкаНаИзмененныйОбъект = Источник.Ссылка;
		НоваяЗапись.ДатаИзменения = ТекущаяДата();
		НоваяЗапись.Компьютер = ИмяКомпьютера();
		НоваяЗапись.Автор = ИмяПользователя();
		НоваяЗапись.Записать();
		Выборка.ПолучитьМенеджерЗаписи().Удалить();
		МассивПараметров = Новый Массив;
		МассивПараметров.Добавить(НовыйУИД);
		МассивПараметров.Добавить(Источник.Ссылка);
		//ВыполнитьСравнениеДвухОбъектов(НовыйУИД, Источник.Ссылка);
		ФоновыеЗадания.Выполнить("NSI_Логирование.ВыполнитьСравнениеДвухОбъектов", МассивПараметров,,"Обработка изменений по объекту "+Строка(Источник));
		//ПослатьДанныеОбИзмененияхВНСИ(НовыйУИД);
	КонецЕсли;
КонецПроцедуры

Процедура ПослатьДанныеОбИзмененияхВНСИ(ИДИзменения) Экспорт
	УстановитьПривилегированныйРежим(Истина);
	НаборИзменений = РегистрыСведений.NSI_ИзмененныеОбъекты.СоздатьНаборЗаписей();
	НаборИзменений.Отбор.ИДПакета.Установить(ИДИзменения, Истина);
	НаборИзменений.Прочитать();
	БылиОшибки = Ложь;
	Для Каждого Запись Из НаборИзменений Цикл
		Попытка
			НоваяЗапись							= Справочники.NSI_ИзмененияОбъектовВнешнихБаз.СоздатьЭлемент();
			НоваяЗапись.ВнешняяБаза				= Справочники.NSI_СписокВИБ.ЭтаБаза;
			НоваяЗапись.Наименование			= "Изменение "+Строка(Запись.СсылкаНаИзмененныйОбъект)+" от "+Запись.ДатаИзменения;
			НоваяЗапись.ДатаИзменения			= Запись.ДатаИзменения;
			НоваяЗапись.ТипСсылки				= Запись.ТипОбъекта;
			НоваяЗапись.ИДСсылки				= Строка(Запись.СсылкаНаИзмененныйОбъект.УникальныйИдентификатор());
			НоваяЗапись.ДанныеДоИзменения		= Запись.ДоИзменения;
			НоваяЗапись.ДанныеПослеИзменения	= Запись.ПослеИзменения;
			НоваяЗапись.СтруктураИзменений		= Запись.СписокИзмененныхРеквизитов;
			НоваяЗапись.Автор					= Запись.Автор;
			НоваяЗапись.Компьютер				= Запись.Компьютер;
			НоваяЗапись.Записать();
		Исключение
			БылиОшибки = Истина;    
		КонецПопытки
	КонецЦикла;
	Если БылиОшибки Тогда Возврат; КонецЕсли;
	НаборИзменений.Очистить();
	НаборИзменений.Записать();  
КонецПроцедуры

Процедура ВыполнитьСравнениеДвухОбъектов(ИДИзменения, Ссылка) Экспорт
	УстановитьПривилегированныйРежим(Истина);
	НаборИзменений = РегистрыСведений.NSI_ИзмененныеОбъекты.СоздатьНаборЗаписей();
	НаборИзменений.Отбор.ИДПакета.Установить(ИДИзменения, Истина);
	НаборИзменений.Прочитать();
	ТаблицаИзменений = СоздатьПустуюТаблицуИзменений();
	МассивПорядковДляУдаления = Новый Массив;
	Для Каждого Изменение Из НаборИзменений Цикл
		ДоИзменения = Изменение.ДоИзменения.Получить();
		ПослеИзменения = Изменение.ПослеИзменения.Получить();
		Для Каждого ЗначениеДо Из ДоИзменения Цикл
			ЗначениеПослеСтрока = ПослеИзменения.Найти(ЗначениеДо.Имя, "Имя");
			Если ЗначениеПослеСтрока = Неопределено Тогда
				ЗначениеПосле = "<удалено>";
			Иначе
				ЗначениеПосле = ЗначениеПослеСтрока.Значение;
			КонецЕсли;
			
			Если ТипЗнч(ЗначениеДо.Значение) = Тип("Массив") Тогда
				ИзменениеРеквизита = Новый Массив;
				Если ТипЗнч(ЗначениеПосле) = Тип("Массив") Тогда
					КоличествоЭлементовПосле = ЗначениеПосле.Количество();
				Иначе
					КоличествоЭлементовПосле = -1;
				КонецЕсли;
				НомерСтрокиТЧ = 0;
				ТаблицаИзмененийТЧ = СоздатьПустуюТаблицуРеквизитов();
				Для Каждого СтрокМассиваДо Из ЗначениеДо.Значение Цикл
					ТаблицаИзмененийМассива = СоздатьПустуюТаблицуИзменений();
					Если НомерСтрокиТЧ > КоличествоЭлементовПосле - 1 Тогда
						Для Каждого РеквизитСтрокиДо Из СтрокМассиваДо Цикл
							ВставитьСтрокуИзмененийВТаблицу(ТаблицаИзмененийМассива, РеквизитСтрокиДо.Имя, РеквизитСтрокиДо.Синоним, РеквизитСтрокиДо.Значение, "<удалено>");
						КонецЦикла;
					Иначе
						СтрокМассиваПосле = ЗначениеПосле[НомерСтрокиТЧ];
						Для Каждого РеквизитСтрокиДо Из СтрокМассиваДо Цикл
							СтрокаПосле = СтрокМассиваПосле.Найти(РеквизитСтрокиДо.Имя, "Имя");
							Если СтрокаПосле = Неопределено Тогда
								ЗначениеРеквизитаСтрокиПосле = "<удалено>";
							Иначе
								ЗначениеРеквизитаСтрокиПосле = СтрокаПосле.Значение;
							КонецЕсли;
							Если Не РеквизитСтрокиДо.Значение = ЗначениеРеквизитаСтрокиПосле Тогда
								ВставитьСтрокуИзмененийВТаблицу(ТаблицаИзмененийМассива, РеквизитСтрокиДо.Имя, РеквизитСтрокиДо.Синоним, РеквизитСтрокиДо.Значение, ЗначениеРеквизитаСтрокиПосле);
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
					Если ТаблицаИзмененийМассива.Количество()>0 Тогда
						ВставитьСтрокуРеквизитовВТаблицу(ТаблицаИзмененийТЧ, Строка(НомерСтрокиТЧ), ЗначениеДо.Синоним+"["+Строка(НомерСтрокиТЧ)+"]", ТаблицаИзмененийМассива);
					КонецЕсли;
					НомерСтрокиТЧ = НомерСтрокиТЧ + 1;
				КонецЦикла;
				Для НомерСтрокиТЧ = НомерСтрокиТЧ По ЗначениеПосле.ВГраница() Цикл
					ТаблицаИзмененийМассива = СоздатьПустуюТаблицуИзменений();
					ЗначениеРеквизитаСтрокиПосле = ЗначениеПосле[НомерСтрокиТЧ];
					Для Каждого РеквизитСтрокиПосле Из ЗначениеРеквизитаСтрокиПосле Цикл
						ВставитьСтрокуИзмененийВТаблицу(ТаблицаИзмененийМассива, РеквизитСтрокиПосле.Имя, РеквизитСтрокиПосле.Синоним, "<Новый>", РеквизитСтрокиПосле.Значение);
					КонецЦикла;
					Если ТаблицаИзмененийМассива.Количество()>0 Тогда
						ВставитьСтрокуРеквизитовВТаблицу(ТаблицаИзмененийТЧ, Строка(НомерСтрокиТЧ), ЗначениеДо.Синоним+"["+Строка(НомерСтрокиТЧ)+"]", ТаблицаИзмененийМассива);
					КонецЕсли;
				КонецЦикла;
				Если ТаблицаИзмененийТЧ.Количество()>0 Тогда
					ВставитьСтрокуИзмененийВТаблицу(ТаблицаИзменений, ЗначениеДо.Имя, ЗначениеДо.Синоним, ТаблицаИзмененийТЧ, "", Истина);
				КонецЕсли;
			Иначе
				Если Не ЗначениеПосле = ЗначениеДо.Значение Тогда
					ВставитьСтрокуИзмененийВТаблицу(ТаблицаИзменений, ЗначениеДо.Имя, ЗначениеДо.Синоним, ЗначениеДо.Значение, ЗначениеПосле);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		Изменение.СписокИзмененныхРеквизитов = Новый ХранилищеЗначения(ТаблицаИзменений, Новый СжатиеДанных(9));
		Если ТаблицаИзменений.Количество()=0 Тогда
			МассивПорядковДляУдаления.Добавить(Изменение.Порядок);	
		КонецЕсли;
	КонецЦикла;
	НаборИзменений.Записать();
	Для Каждого ПорядокСтрокиДляУдаления Из МассивПорядковДляУдаления Цикл
		Менеджер = РегистрыСведений.NSI_ИзмененныеОбъекты.СоздатьМенеджерЗаписи();
		Менеджер.ИДПакета = ИДИзменения;
		Менеджер.Порядок = ПорядокСтрокиДляУдаления;
		Менеджер.Удалить();
	КонецЦикла;
	МассивПараметров = Новый Массив;
	МассивПараметров.Добавить(ИДИзменения);
	ФоновыеЗадания.Выполнить("NSI_Логирование.ПослатьДанныеОбИзмененияхВНСИ", МассивПараметров,,"Пересылка изменений в НСИ "+Строка(ИДИзменения));
КонецПроцедуры

Функция СоздатьПустуюТаблицуРеквизитов() Экспорт
	ПростыеТипы = Новый ОписаниеТипов("Число, Строка, Булево, Дата, Массив, ТаблицаЗначений");
	ТипСтрока = Новый ОписаниеТипов("Строка");
	ТаблицаРеквизитов = Новый ТаблицаЗначений;
	ТаблицаРеквизитов.Колонки.Добавить("Имя", ТипСтрока);
	ТаблицаРеквизитов.Колонки.Добавить("Синоним", ТипСтрока);
	ТаблицаРеквизитов.Колонки.Добавить("Значение", ПростыеТипы);
	Возврат ТаблицаРеквизитов;
КонецФункции

Функция СоздатьПустуюТаблицуИзменений() Экспорт
	ПростыеТипы = Новый ОписаниеТипов("Число, Строка, Булево, Дата, ТаблицаЗначений");
	ТипСтрока = Новый ОписаниеТипов("Строка");
	ТипБулево = Новый ОписаниеТипов("Булево");
	ТаблицаРеквизитов = Новый ТаблицаЗначений;
	ТаблицаРеквизитов.Колонки.Добавить("Имя", ТипСтрока);
	ТаблицаРеквизитов.Колонки.Добавить("Синоним", ТипСтрока);
	ТаблицаРеквизитов.Колонки.Добавить("До", ПростыеТипы);
	ТаблицаРеквизитов.Колонки.Добавить("После", ПростыеТипы);
	ТаблицаРеквизитов.Колонки.Добавить("ЭтоТаблица", ТипБулево);
	Возврат ТаблицаРеквизитов;
КонецФункции
 
Функция ВставитьСтрокуРеквизитовВТаблицу(ТЗ, Имя, Синоним, Значение) Экспорт
	НоваяСтрока = ТЗ.Добавить();
	НоваяСтрока.Имя = Имя;
	НоваяСтрока.Синоним = Синоним;
	НоваяСтрока.Значение = Значение;
КонецФункции

Функция ВставитьСтрокуИзмененийВТаблицу(ТЗ, Имя, Синоним, ЗначениеДо, ЗначениеПосле, ЭтоТаблица = Ложь) Экспорт
	НоваяСтрока = ТЗ.Добавить();
	НоваяСтрока.Имя = Имя;
	НоваяСтрока.Синоним = Синоним;
	НоваяСтрока.До = ЗначениеДо;
	НоваяСтрока.После = ЗначениеПосле;
	НоваяСтрока.ЭтоТаблица = ЭтоТаблица;
КонецФункции

Функция ПодготовитьСтруктуруЗаписиОбъекта(Объект) Экспорт 
	ПростыеТипы = Новый ОписаниеТипов("Число, Строка, Булево, Дата");
	ТаблицаРеквизитов = СоздатьПустуюТаблицуРеквизитов();
	Для Каждого Реквизит Из Объект.Метаданные().СтандартныеРеквизиты Цикл
		//Если СтруктураЛогирования.ОграничениеЛогируемыхДанных Тогда
		//	ЛогируемыйРеквизит = СтруктураЛогирования.ЛогируемыеРеквизиты.НайтиПоЗначению(Реквизит.Имя);
		//	Если ЛогируемыйРеквизит = Неопределено Тогда Продолжить; КонецЕсли;
		//	Если Не ЛогируемыйРеквизит.Пометка Тогда Продолжить; КонецЕсли;
		//КонецЕсли;
		Если Найти("Предопределенный, Ссылка, МоментВремени", Реквизит.Имя)>0 Тогда Продолжить; КонецЕсли;
		Если ПростыеТипы.СодержитТип(ТипЗнч(Объект[Реквизит.Имя])) Тогда
			ВставитьСтрокуРеквизитовВТаблицу(ТаблицаРеквизитов, Реквизит.Имя, Реквизит.Представление(), Объект[Реквизит.Имя]);
		Иначе
			ВставитьСтрокуРеквизитовВТаблицу(ТаблицаРеквизитов, Реквизит.Имя, Реквизит.Представление(), Строка(Объект[Реквизит.Имя]));
		КонецЕсли;                                                 
	КонецЦикла;		
	Для Каждого Реквизит Из Объект.Метаданные().Реквизиты Цикл
		//Если СтруктураЛогирования.ОграничениеЛогируемыхДанных Тогда
		//	ЛогируемыйРеквизит = СтруктураЛогирования.ЛогируемыеРеквизиты.НайтиПоЗначению(Реквизит.Имя);
		//	Если ЛогируемыйРеквизит = Неопределено Тогда Продолжить; КонецЕсли;
		//	Если Не ЛогируемыйРеквизит.Пометка Тогда Продолжить; КонецЕсли;
		//КонецЕсли;
		Если ПростыеТипы.СодержитТип(ТипЗнч(Объект[Реквизит.Имя])) Тогда
			ВставитьСтрокуРеквизитовВТаблицу(ТаблицаРеквизитов, Реквизит.Имя, Реквизит.Представление(), Объект[Реквизит.Имя]);
		Иначе
			ВставитьСтрокуРеквизитовВТаблицу(ТаблицаРеквизитов, Реквизит.Имя, Реквизит.Представление(), Строка(Объект[Реквизит.Имя]));
		КонецЕсли;
	КонецЦикла;
	Для Каждого ТЧ Из Объект.Метаданные().ТабличныеЧасти Цикл
		МассивСтрокТЧ = Новый Массив;
		Для Каждого СтрокТЧ Из Объект[ТЧ.Имя] Цикл
			//Если СтруктураЛогирования.ОграничениеЛогируемыхДанных Тогда
			//	ЛогируемыйРеквизит = СтруктураЛогирования.ЛогируемыеРеквизиты.НайтиПоЗначению(ТЧ.Имя);
			//	Если ЛогируемыйРеквизит = Неопределено Тогда Продолжить; КонецЕсли;
			//	Если Не ЛогируемыйРеквизит.Пометка Тогда Продолжить; КонецЕсли;
			//КонецЕсли;
			ТаблицаСтроки = СоздатьПустуюТаблицуРеквизитов();
			Для Каждого Реквизит Из ТЧ.Реквизиты Цикл
				Если ПростыеТипы.СодержитТип(ТипЗнч(СтрокТЧ[Реквизит.Имя])) Тогда
					ВставитьСтрокуРеквизитовВТаблицу(ТаблицаСтроки, Реквизит.Имя, Реквизит.Представление(), СтрокТЧ[Реквизит.Имя]);
				Иначе
					ВставитьСтрокуРеквизитовВТаблицу(ТаблицаСтроки, Реквизит.Имя, Реквизит.Представление(), Строка(СтрокТЧ[Реквизит.Имя]));
				КонецЕсли;
			КонецЦикла;
			МассивСтрокТЧ.Добавить(ТаблицаСтроки);
		КонецЦикла;                                 
		ВставитьСтрокуРеквизитовВТаблицу(ТаблицаРеквизитов, ТЧ.Имя, ТЧ.Представление(), МассивСтрокТЧ);
	КонецЦикла;
	ТаблицаДопРеквизитов = СоздатьПустуюТаблицуРеквизитов();
	Попытка
		Если Справочники.ТипВсеСсылки().СодержитТип(ТипЗнч(Объект)) ИЛИ Документы.ТипВсеСсылки().СодержитТип(ТипЗнч(Объект)) Тогда
			Об = Объект.ПолучитьОбъект();
		Иначе
			Об = Объект;
		КонецЕсли;
		ТаблицаДопРеквизитов = Об.ДополнитьСтруктуруИзмененийВычисляемымиРеквизитами();
	Исключение
	КонецПопытки;
	Для Каждого Реквизит Из ТаблицаДопРеквизитов Цикл
		ВставитьСтрокуРеквизитовВТаблицу(ТаблицаРеквизитов, Реквизит.Имя, Реквизит.Синоним, Реквизит.Значение);
	КонецЦикла;
	Возврат ТаблицаРеквизитов;
КонецФункции


Функция ОповеститьОбИзмененияхПоОбъекту(Объект) Экспорт
	
	//БазаНСИ = NSI.ПодключитьНСИ();
	//Попытка 
	//	БазаНСИ.NotifyAboutChanges(NSI.ПолучитьИмяДаннойБазы(), Строка(XMLТипЗнч(Объект.Ссылка).ИмяТипа), Строка(Объект.Ссылка.УникальныйИдентификатор()));
	//Исключение
	//	Ошибка = Истина; // Добавить оповещение об ошибке
	//КонецПопытки
КонецФункции

Функция ПолучитьСписокИзмененийОбъекта(Ссылка, МассивТребуемыхРеквизитов=Неопределено, ДатаНачала=Неопределено, ДатаОкончания=Неопределено) Экспорт
	//НСИ = NSI.ПодключитьНСИ();
	Если ТипЗнч(МассивТребуемыхРеквизитов)=Тип("Массив") Тогда
		Массив = МассивТребуемыхРеквизитов;
	ИначеЕсли ТипЗнч(МассивТребуемыхРеквизитов)=Тип("СписокЗначений") Тогда
		Массив = МассивТребуемыхРеквизитов.ВыгрузитьЗначения();
	ИначеЕсли ТипЗнч(МассивТребуемыхРеквизитов)=Тип("ТаблицаЗначений") Тогда
		Массив = МассивТребуемыхРеквизитов.ВыгрузитьКолонку("Реквизит");
	Иначе                                       
		Массив = Новый Массив;
	КонецЕсли;
	Ответ = NSI_ОбщиеПроцедуры.ПолучитьДанныеПоИзменениямРеквизитовВоВнешнейБазе(Справочники.NSI_СписокВИБ.ЭтаБаза, Строка(XMLТипЗнч(Ссылка).ИмяТипа), Строка(Ссылка.УникальныйИдентификатор()), Массив, ДатаНачала, ?(ЗначениеЗаполнено(ДатаОкончания), КонецДня(ДатаОкончания), '30000101'));
	Возврат Ответ;
КонецФункции


Функция ПолучитьОтчетПоИсторииИзменений(Ссылка, МассивТребуемыхРеквизитов=Неопределено, ДатаНачала=Неопределено, ДатаОкончания=Неопределено) Экспорт
	CSS = "<style type=""text/css"">
	|body {font-family=""Calibri"";}
   	|.head {
    |	background: #17375D; /* Цвет фона */
	|	color: #fff;
	|	text-align: center;
   	|}
	|table {border-collapse: collapse; border: 1px solid #17375D; }
	|td { border: 1px solid #17375D; }
	|.first_col {padding-left: 20px;}
	|.table_part {color: #000;  background: #DEF;  font-weight: bold;} 
	|.row_num {background: #eee; padding-left: 10px;} 
	|.data {text-align: center;} 
   	|.date {
   	|	background: #DBE5F1; /* Цвет фона */
	|	color: #000;
	|	font-weight: bold;
   	|}
	|</style>";
	Попытка
		ТаблицаИзменений = ПолучитьСписокИзмененийОбъекта(Ссылка, МассивТребуемыхРеквизитов, ДатаНачала, ДатаОкончания);
	Исключение
		ТаблицаИзменений = Неопределено;
	КонецПопытки;
	ТаблицаИзменений = ДополнитьСписокИзмененийЛокальнойИсторией(ТаблицаИзменений, Ссылка, МассивТребуемыхРеквизитов, ДатаНачала, ДатаОкончания);
		Шапка = "История изменений<br>по <b>"+Ссылка+"</b>";
	 	СтруктураДляВывода = Новый Структура;	
		
		Таблица = "";
		ТекущаяДатаИзменений = 00010101;
		ТаблицаИзменений.Сортировать("ДатаИзменения Убыв");
		Для каждого стр Из ТаблицаИзменений Цикл
			Таблица = Таблица + "<tr><TD class = ""date"">Дата изменения: "+Формат(стр.ДатаИзменения, "ДЛФ=DT")+"</TD><TD class = ""date"">Автор: "+стр.Автор+"</TD><TD class = ""date"">Компьютер: "+стр.Компьютер+"</TD></tr>";
			ХТМЛТаблицаРеквизитов = "";
			Для Каждого Реквизит Из стр.Реквизиты Цикл
				ХТМЛТаблицаРеквизитов = ХТМЛТаблицаРеквизитов + "<tr>
				|<TD>"+СокрЛП(Реквизит.Синоним)+"</TD>
				|<TD  class = ""data"">"+СтрЗаменить(СокрЛП(Реквизит.До),Символы.ПС, "<br>")+"</TD>
				|<TD  class = ""data"">"+СтрЗаменить(СокрЛП(Реквизит.После),Символы.ПС, "<br>")+"</TD>
				|</tr>";	
			КонецЦикла;
			ХТМЛТаблицаТЧ = "";
			Для Каждого ТЧ Из стр.ТабличныеЧасти Цикл
				ХТМЛТаблицаТЧ = ХТМЛТаблицаТЧ + "<tr><TD class = ""table_part"" colspan=3>"+СокрЛП(ТЧ.Синоним)+"</TD></tr>";
				Для Каждого СтрокаТЧ Из ТЧ.Значение Цикл;
					ХТМЛТаблицаТЧ = ХТМЛТаблицаТЧ + "<tr><TD class = ""row_num"" colspan=3>"+СокрЛП(СтрокаТЧ.Синоним)+"</TD></tr>";
					Для Каждого РеквизитСтрокиТЧ Из СтрокаТЧ.Значение Цикл
						//Если СписокРеквизитовТЧДляОповещения.Найти(РеквизитСтрокиТЧ.Имя)=Неопределено Тогда
						//	Продолжить;
						//КонецЕсли;
						ХТМЛТаблицаТЧ = ХТМЛТаблицаТЧ + "<tr>
							|<TD class = ""first_col"">"+СокрЛП(РеквизитСтрокиТЧ.Синоним)+"</TD>
							|<TD  class = ""data"">"+СтрЗаменить(СокрЛП(РеквизитСтрокиТЧ.До),Символы.ПС, "<br>")+"</TD>
							|<TD  class = ""data"">"+СтрЗаменить(СокрЛП(РеквизитСтрокиТЧ.После),Символы.ПС, "<br>")+"</TD>
							|</tr>";
					КонецЦикла;
				КонецЦикла;
			КонецЦикла;
			Таблица = Таблица+ХТМЛТаблицаРеквизитов+ХТМЛТаблицаТЧ;	
		КонецЦикла;
			
		Результат="<HTML>"+CSS+Шапка+
			"<br/><br/>
			|<table padding = 0 cellspacing = 0 margin = 0 style=""width: 75%; border: solid 1px;"">
			|<tr class = ""head"">
			|<td>&nbsp;</td><td>Старое значение</td><td>Новое значение</td>
			|</tr>
			|"+Таблица+"
			|</table>";

		//НавигационнаяСсылка = ИзменениеПосле.Найти("НавигационнаяСсылка", "Имя");
		//Если Не НавигационнаяСсылка = Неопределено Тогда
		//	ИмяСервера = ПоследнееИзменение.ВнешняяБаза.ИмяHTTPСервера;
		//	НавСсылка = "<НавигационнаяСсылка>" + НавигационнаяСсылка.Значение + "<ПредставлениеОбъекта>" + ИзменениеПослеСсылка.Значение + "</НавигационнаяСсылка>";
		//	Гиперссылка = РаботаСОповещениями.ПреобразоватьВГиперСсылку(НавСсылка, ИмяСервера, Истина, Вложения);
		//	Результат = Результат + "<br>Ссылка на сделку в CRM: "+Гиперссылка;
		//КонецЕсли;
		//Если ЗначениеЗаполнено(НавигационнаяСсылкаПоКонтрактации) Тогда
		//	БазаУУСсылка = МодульПовторногоИспользования.ПолучитьСсылкуИБПоИмениБазы(БазаУУ);
		//	ИмяСервера = БазаУУСсылка.ИмяHTTPСервера;
		//	Гиперссылка = РаботаСОповещениями.ПреобразоватьВГиперСсылку(НавигационнаяСсылкаПоКонтрактации, ИмяСервера, Истина, Вложения);
		//	Результат = Результат + "<br><br>Ссылка на контрактацию в УУ: "+Гиперссылка;
		//КонецЕсли;

		Результат = Результат +	"</HTML>";
			
	Если ТаблицаИзменений.Количество()=0 Тогда
		Результат = "<HTML>Изменений не зафиксировано</HTML>";
	КонецЕсли;
	Возврат Результат;
	
КонецФункции

Функция ДополнитьСписокИзмененийЛокальнойИсторией(ТаблицаИзмененийНСИ=Неопределено, Ссылка, МассивТребуемыхРеквизитов, ДатаНачала='00010101', ДатаОкончания='30000101') Экспорт
	Если ТаблицаИзмененийНСИ=Неопределено Тогда
		ТаблицаИзмененийНСИ = Новый ТаблицаЗначений;
		ТаблицаИзмененийНСИ.Колонки.Добавить("ДатаИзменения");
		ТаблицаИзмененийНСИ.Колонки.Добавить("Автор");
		ТаблицаИзмененийНСИ.Колонки.Добавить("Компьютер");
		ТаблицаИзмененийНСИ.Колонки.Добавить("Реквизиты");
		ТаблицаИзмененийНСИ.Колонки.Добавить("ТабличныеЧасти");	
	КонецЕсли;
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	NSI_ИзмененныеОбъекты.СписокИзмененныхРеквизитов,
	                      |	NSI_ИзмененныеОбъекты.ДатаИзменения,
	                      |	NSI_ИзмененныеОбъекты.Компьютер,
	                      |	NSI_ИзмененныеОбъекты.Автор
	                      |ИЗ
	                      |	РегистрСведений.NSI_ИзмененныеОбъекты КАК NSI_ИзмененныеОбъекты
	                      |ГДЕ
	                      |	NSI_ИзмененныеОбъекты.СсылкаНаИзмененныйОбъект = &СсылкаНаИзмененныйОбъект
	                      |	И NSI_ИзмененныеОбъекты.ДатаИзменения >= &ДатаНачала
	                      |	И NSI_ИзмененныеОбъекты.ДатаИзменения <= &ДатаОкончания");
	Запрос.УстановитьПараметр("СсылкаНаИзмененныйОбъект", Ссылка);
	Запрос.УстановитьПараметр("ДатаНачала", ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", ДатаОкончания);
	МассивИзменений = Запрос.Выполнить().Выгрузить();
	ТаблицаИзмененийНСИ = СобратьИзмененияПоМассиву(ТаблицаИзмененийНСИ, МассивИзменений, МассивТребуемыхРеквизитов, ДатаНачала, ДатаОкончания);
	Возврат ТаблицаИзмененийНСИ;
КонецФункции

Функция ПолучитьТаблицуИзменений(Ссылка, МассивТребуемыхРеквизитов, ДатаНачала='00010101', ДатаОкончания='30000101') Экспорт
	Попытка
		ТаблицаИзменений = ПолучитьСписокИзмененийОбъекта(Ссылка, МассивТребуемыхРеквизитов, ДатаНачала, ДатаОкончания);
	Исключение
		ТаблицаИзменений = Неопределено;
	КонецПопытки;
	ТаблицаИзменений = ДополнитьСписокИзмененийЛокальнойИсторией(ТаблицаИзменений, Ссылка, МассивТребуемыхРеквизитов, ДатаНачала, ДатаОкончания);
	Возврат ТаблицаИзменений;
КонецФункции


Функция СобратьИзмененияПоМассиву(ТаблицаИзменений, МассивИзменений, МассивТребуемыхРеквизитов =  Неопределено, ДатаНачала, ДатаОкончания) Экспорт
	Для Каждого ИзменениеСсылка Из МассивИзменений Цикл
		Изменение = ТаблицаИзменений.Добавить();
		Изменение.ДатаИзменения = ИзменениеСсылка.ДатаИзменения;
		Изменение.Автор = ИзменениеСсылка.Автор;
		Изменение.Компьютер = ИзменениеСсылка.Компьютер;
		РеквизитыИзменения = Новый ТаблицаЗначений;
		РеквизитыИзменения.Колонки.Добавить("Имя");
		РеквизитыИзменения.Колонки.Добавить("Синоним");
		РеквизитыИзменения.Колонки.Добавить("До");
		РеквизитыИзменения.Колонки.Добавить("После");
		
		ТабличныеЧастиИзменения = Новый ТаблицаЗначений;
		ТабличныеЧастиИзменения.Колонки.Добавить("Имя");
		ТабличныеЧастиИзменения.Колонки.Добавить("Синоним");
		ТабличныеЧастиИзменения.Колонки.Добавить("Значение");
		
		СписокИзменений = ИзменениеСсылка.СписокИзмененныхРеквизитов.Получить();
		
		Если ТипЗнч(СписокИзменений) = Тип("ТаблицаЗначений") Тогда
			Для Каждого Реквизит Из СписокИзменений Цикл
				Если Реквизит.ЭтоТаблица Тогда
					Если ЗначениеЗаполнено(МассивТребуемыхРеквизитов) И Не МассивТребуемыхРеквизитов.Найти(Реквизит.Имя)=Неопределено Тогда
						Продолжить;
					КонецЕсли;
					//Ц = 0;
					ТЧИзменения = ТабличныеЧастиИзменения.Добавить();
					ТЧИзменения.Имя = Реквизит.Имя;
					ТЧИзменения.Синоним = Реквизит.Синоним;				
					СтрокиТЧ = Новый ТаблицаЗначений;
					СтрокиТЧ.Колонки.Добавить("Имя");
					СтрокиТЧ.Колонки.Добавить("Синоним");
					СтрокиТЧ.Колонки.Добавить("Значение");
					//Сообщить(Реквизит.Синоним+" = ТЧ {");
					Для Каждого Строк Из Реквизит.До Цикл
						НоваяСтрока = СтрокиТЧ.Добавить();
						НоваяСтрока.Имя = Строк.Имя;
						НоваяСтрока.Синоним = Строк.Синоним;
						РеквизитыСтрокиИзменения = Новый ТаблицаЗначений;
						РеквизитыСтрокиИзменения.Колонки.Добавить("Имя");
						РеквизитыСтрокиИзменения.Колонки.Добавить("Синоним");
						РеквизитыСтрокиИзменения.Колонки.Добавить("До");
						РеквизитыСтрокиИзменения.Колонки.Добавить("После");
						Если ТипЗнч(Строк.Значение) = Тип("ТаблицаЗначений") Тогда
							//Сообщить("  "+Строк.Синоним); 						
							Для Каждого СтрокРеквизит Из Строк.Значение Цикл
								НовыйРеквизитСтрокиИзменения = РеквизитыСтрокиИзменения.Добавить();
								НовыйРеквизитСтрокиИзменения.Имя = СтрокРеквизит.Имя;
								НовыйРеквизитСтрокиИзменения.Синоним = СтрокРеквизит.Синоним;
								НовыйРеквизитСтрокиИзменения.До = СтрокРеквизит.До;
								НовыйРеквизитСтрокиИзменения.После = СтрокРеквизит.После;
								//Сообщить("    "+СтрокРеквизит.Синоним+". До: "+Строка(СтрокРеквизит.До)+", после: "+Строка(СтрокРеквизит.После));
							КонецЦикла;
						КонецЕсли;
						НоваяСтрока.Значение = РеквизитыСтрокиИзменения;
						//Ц = Ц+1;
					КонецЦикла;
					ТЧИзменения.Значение = СтрокиТЧ;
					//Сообщить("}");
				Иначе
					Если ЗначениеЗаполнено(МассивТребуемыхРеквизитов) И МассивТребуемыхРеквизитов.Найти(Реквизит.Имя)=Неопределено Тогда
						Продолжить;
					КонецЕсли;
					НовыйРеквизитСтрокиИзменения = РеквизитыИзменения.Добавить();
					НовыйРеквизитСтрокиИзменения.Имя = Реквизит.Имя;
					НовыйРеквизитСтрокиИзменения.Синоним = Реквизит.Синоним;
					НовыйРеквизитСтрокиИзменения.До = Реквизит.До;
					НовыйРеквизитСтрокиИзменения.После = Реквизит.После;
					//Сообщить(Реквизит.Синоним+". До: "+Строка(Реквизит.До)+", после: "+Строка(Реквизит.После));
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		Изменение.Реквизиты = РеквизитыИзменения;
		Изменение.ТабличныеЧасти = ТабличныеЧастиИзменения;
	КонецЦикла;
	Возврат ТаблицаИзменений;
КонецФункции

Процедура ЗаписатьДанныеВТаблицуИзмененийНСИ(МенеджерЗаписи) Экспорт

КонецПроцедуры

