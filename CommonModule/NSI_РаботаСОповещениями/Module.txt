
Процедура ПодготовкаОповещенийКОтправке() Экспорт
	ОтборПоСтатусу = Новый Структура("Статус", Перечисления.NSI_СтатусыСобытийОповещений.Создано);
	Выборка = РегистрыСведений.NSI_РегистрацияСобытийОповещения.Выбрать(ОтборПоСтатусу);
	Пока Выборка.Следующий() Цикл
		Менеджер = Выборка.ПолучитьМенеджерЗаписи();
		Менеджер.ПротоколОшибок = "";
		ПараметрыОповещения = Менеджер.ПараметрыОповещения.Получить();
		Попытка
			АдресатОповещения = Справочники.ШаблоныОповещений.ВычислениеЗначения(Менеджер.ШаблонОповещения.АлгоритмВычисленияАдресата, ПараметрыОповещения);
		Исключение
			//Инфо = ИнформацияОбОшибке();
			Менеджер.ПротоколОшибок = Менеджер.ПротоколОшибок + "Ошибка вычисления адресата:" + Символы.ПС + ОписаниеОшибки() + Символы.ПС;
			Менеджер.Записать();
			Продолжить;
		КонецПопытки;
		Попытка
			Вложения = Новый ТаблицаЗначений;
			Вложения.Колонки.Добавить("Ключ");
			Вложения.Колонки.Добавить("Значение");
			Вложения = Справочники.ШаблоныОповещений.ВычислениеЗначения(Менеджер.ШаблонОповещения.АлгоритмФормированияВложений, ПараметрыОповещения);
		Исключение
			Менеджер.ПротоколОшибок = Менеджер.ПротоколОшибок + "Ошибка вычисления вложений:" + Символы.ПС + ОписаниеОшибки() + Символы.ПС;
			Менеджер.Записать();
			Продолжить;
		КонецПопытки;
		Попытка
			ТемаСообщения = Справочники.ШаблоныОповещений.ВычислениеЗначения(Менеджер.ШаблонОповещения.ТемаСообщения, ПараметрыОповещения);
		Исключение
			Менеджер.ПротоколОшибок = Менеджер.ПротоколОшибок + "Ошибка формирования темы:" + Символы.ПС + ОписаниеОшибки() + Символы.ПС;			
			Менеджер.Записать();
			Продолжить;
		КонецПопытки;	
		Попытка
			ТелоСообщения = Справочники.ШаблоныОповещений.ВычислениеЗначения(Менеджер.ШаблонОповещения.ТелоСообщения, ПараметрыОповещения, , Вложения);
		Исключение
			Менеджер.ПротоколОшибок = Менеджер.ПротоколОшибок + "Ошибка формирования темы:" + Символы.ПС + ОписаниеОшибки() + Символы.ПС;			
			Менеджер.Записать();
			Продолжить;
		КонецПопытки;		
		Если ТипЗнч(АдресатОповещения) = Тип("Строка") Тогда
			МассивАдресатов = Новый Массив;
			МассивАдресатов.Добавить(АдресатОповещения);
		Иначе
			МассивАдресатов = АдресатОповещения;
		КонецЕсли;
		Ц=0;
		Для Каждого Адресат Из МассивАдресатов Цикл
			Ц = Ц + 1;
			СтрокаОповещения = РегистрыСведений.NSI_ОповещенияКОтправке.СоздатьМенеджерЗаписи();
			СтрокаОповещения.Адрес = Адресат;
			СтрокаОповещения.Объект = Менеджер.Объект;
			СтрокаОповещения.ШаблонОповещения = Менеджер.ШаблонОповещения;
			СтрокаОповещения.НомерСообщения = Ц;
			СтрокаОповещения.ИД = Менеджер.ИД;
			СтрокаОповещения.ТемаСообщения = ТемаСообщения;
			СтрокаОповещения.ТелоСообщения = ТелоСообщения;
			СтрокаОповещения.ДатаСоздания = ТекущаяДата();
			СтрокаОповещения.Статус = Перечисления.NSI_СтатусыСобытийОповещений.КОтправлению;
			СтрокаОповещения.Вложения = Новый ХранилищеЗначения(Вложения, Новый СжатиеДанных(9));
			СтрокаОповещения.Записать();
			Попытка
				СтрокаОповещения.Записать();
			Исключение
				Менеджер.ПротоколОшибок = Менеджер.ПротоколОшибок + "Ошибка записи оповещения "+Ц+":" + Символы.ПС + ОписаниеОшибки() + Символы.ПС;			
				Менеджер.Записать();
				Продолжить;
			КонецПопытки;
		КонецЦикла;
		Если Не ЗначениеЗаполнено(Менеджер.ПротоколОшибок) Тогда
			Менеджер.Статус = Перечисления.NSI_СтатусыСобытийОповещений.Отправлено;
		КонецЕсли;
		Менеджер.Записать();
	КонецЦикла;
КонецПроцедуры

Функция ПолучитьФайлНавигационнойСсылки(НавСсылка,ИмяСервераНTTP,ИмяФайла) Экспорт		
	 ИмяФайла = "tmp" + Строка(Новый УникальныйИдентификатор()) + ".v8s"; 
	 ИмяФайлаСПолнымПутем = КаталогВременныхФайлов() + ИмяФайла;
     Файл = Новый ЗаписьТекста(ИмяФайлаСПолнымПутем);     	 
	 Файл.Записать("%Path1C% /ClearCache /WS""" + ИмяСервераНTTP + """ /C"+НавСсылка);     
     Файл.Закрыть();
     Возврат Новый ДвоичныеДанные(ИмяФайлаСПолнымПутем);
КонецФункции
 
Функция ПреобразоватьВГиперСсылку(знач СтрокаСНавСсылкой, ИмяСервераНTTP, СсылкаДляТонкогоКлиента, Вложения=Неопределено) Экспорт
	Если Вложения = Неопределено Тогда Вложения = Новый Структура; КонецЕсли;
	СтрокаСНавСсылкой = СтрЗаменить(СтрокаСНавСсылкой,"<НавигационнаяСсылка>","");
	ПерваяПозицияПослеСсылки = Найти(СтрокаСНавСсылкой, "<ПредставлениеОбъекта>");
	НавСсылка = Лев(СтрокаСНавСсылкой,ПерваяПозицияПослеСсылки-1);
	СтрокаСНавСсылкой = СтрЗаменить(СтрокаСНавСсылкой,НавСсылка+"<ПредставлениеОбъекта>","");	
	ПредставлениеОбъекта = СтрЗаменить(СтрокаСНавСсылкой,"</НавигационнаяСсылка>","");	
	Если СсылкаДляТонкогоКлиента Тогда
		ИмяФайлаЯрлыка = "";
		ДанныеФайлаЯрлыка = ПолучитьФайлНавигационнойСсылки(НавСсылка,ИмяСервераНTTP,ИмяФайлаЯрлыка);		
		НовоеВложение = Вложения.Добавить();
		НовоеВложение.Ключ = ИмяФайлаЯрлыка;
		НовоеВложение.Значение = ДанныеФайлаЯрлыка;
		ГиперСсылка = "<a href=""" + ИмяФайлаЯрлыка + """>" + ПредставлениеОбъекта + "</a>"			
	Иначе	
		Ссылка = СтрЗаменить(НавСсылка,"""","'");	
		Ссылка = """"+ИмяСервераНTTP+"#"+Ссылка+"""";
		ГиперСсылка = "<a href="+ Ссылка +">" + ПредставлениеОбъекта + "</a>";		
	КонецЕсли;	
	Возврат ГиперСсылка;
КонецФункции

Процедура ОтправкаОповещений() Экспорт
	ОтборПоСтатусу = Новый Структура("Статус", Перечисления.NSI_СтатусыСобытийОповещений.КОтправлению);
	Выборка = РегистрыСведений.NSI_ОповещенияКОтправке.Выбрать(ОтборПоСтатусу);
	Пока Выборка.Следующий() Цикл
		Если Выборка.ТелоСообщения = "<не отправлять>" Тогда Продолжить КонецЕсли;
		Менеджер = Выборка.ПолучитьМенеджерЗаписи();
		Менеджер.ПротоколОшибок = "";
		ПараметрыПисьма = Новый Структура;
	
		Если ЗначениеЗаполнено(Менеджер.Адрес) Тогда
			ПараметрыПисьма.Вставить("Кому", Менеджер.Адрес);
		КонецЕсли;
	
		Если ЗначениеЗаполнено(Менеджер.АдресОтвета) Тогда
			ПараметрыПисьма.Вставить("АдресОтвета", Менеджер.АдресОтвета);
		КонецЕсли;
	
		Если ЗначениеЗаполнено(Менеджер.ТемаСообщения) Тогда
			ПараметрыПисьма.Вставить("Тема", Менеджер.ТемаСообщения);
		КонецЕсли;
	
		Если ЗначениеЗаполнено(Менеджер.ТелоСообщения) Тогда
			ПараметрыПисьма.Вставить("Тело", СтрЗаменить(Менеджер.ТелоСообщения, Символы.ПС, ""));
		КонецЕсли;
		
		ПараметрыПисьма.Вставить("Вложения", Менеджер.Вложения.Получить());
		
		Попытка
			ОтправитьПочтовоеСообщение(ПараметрыПисьма);
		Исключение
			Менеджер.ПротоколОшибок = ОписаниеОшибки();
		КонецПопытки;
		Если Не ЗначениеЗаполнено(Менеджер.ПротоколОшибок) Тогда
			Менеджер.Статус = Перечисления.NSI_СтатусыСобытийОповещений.Отправлено;
		КонецЕсли;
		Менеджер.Записать();
	КонецЦикла;
КонецПроцедуры

// Функция для отправки сообщений. Проверяет корректность заполнения учетной
// записи и вызывает функцию реализующую механику отправки
//
// см. параметры функции ОтправитьСообщение
//
Функция ОтправитьПочтовоеСообщение(знач ПараметрыПисьма) Экспорт
	
		Если ПараметрыПисьма = Неопределено Тогда
		ВызватьИсключение НСтр("ru = 'Не заданы параметры отправки.'");
	КонецЕсли;
	
	Кому = "";
	Если ПараметрыПисьма.Свойство("Кому", Кому) Тогда
		Если ТипЗнч(Кому) = Тип("Строка") Тогда
			ПараметрыПисьма.Кому = РазобратьСтрокуСПочтовымиАдресами(Кому);
		КонецЕсли;
	Иначе
		ВызватьИсключение НСтр("ru = 'Не указан ни один получатель письма.'");
	КонецЕсли;
	
	Копии = "";
	Если ПараметрыПисьма.Свойство("Копии", Копии) Тогда
		Если ТипЗнч(Копии) = Тип("Строка") Тогда
			ПараметрыПисьма.Копии = РазобратьСтрокуСПочтовымиАдресами(Копии);
		КонецЕсли;
	КонецЕсли;
	
	СлепыеКопии = "";
	Если ПараметрыПисьма.Свойство("СлепыеКопии", СлепыеКопии) Тогда
		Если ТипЗнч(СлепыеКопии) = Тип("Строка") Тогда
			ПараметрыПисьма.СлепыеКопии = РазобратьСтрокуСПочтовымиАдресами(СлепыеКопии);
		КонецЕсли;
	КонецЕсли;
	
	АдресОтвета = Неопределено;
	
	// проверяем правильную заполненность АдресаОтвета
	Если ПараметрыПисьма.Свойство("АдресОтвета", АдресОтвета) Тогда
		ПараметрыПисьма.АдресОтвета = РазобратьСтрокуСПочтовымиАдресами(АдресОтвета);
	КонецЕсли;
	
	Вложения = Неопределено;
	
	Если ПараметрыПисьма.Свойство("Вложения", Вложения) Тогда
		Если Не ПараметрыПисьма.Вложения = Неопределено Тогда
			Для Каждого Вложение Из Вложения Цикл
				Если ЭтоАдресВременногоХранилища(Вложение.Значение) Тогда
					Вложения.Вставить(Вложение.Ключ, ПолучитьИзВременногоХранилища(Вложение.Значение));
				КонецЕсли;
			КонецЦикла;
			ПараметрыПисьма.Вложения = Вложения;
		КонецЕсли;
	КонецЕсли;
	
	//(26@expert20.ru (Прокофьев А.) 11.08.11
	// Задача: CRM. Добавить параметр "ТипТекста", если он явно не указан в параметрах
	Если НЕ ПараметрыПисьма.Свойство("ТипТекста") 
		И ПараметрыПисьма.Свойство("Тело") 
		И Найти(ПараметрыПисьма.Тело, "<HTML>") > 0 Тогда
		ПараметрыПисьма.Вставить("ТипТекста", "HTML");	
	КонецЕсли; 
	//26@expert20.ru)
		
	Возврат ОтправитьСообщение(ПараметрыПисьма);
	
КонецФункции

// Сдвигает маркер позиции пока встречается символ Символ
// возвращает номер позиции в строке, на которое установился маркер
//
Функция ПропуститьПробелы(знач Строка,
                          знач ТекущийИндекс,
                          знач ПропускаемыйСимвол)
	
	Результат = ТекущийИндекс;
	
	// убираем лишние пробелы если они есть
	Пока ТекущийИндекс < СтрДлина(Строка) Цикл
		Если Сред(Строка, ТекущийИндекс, 1) <> ПропускаемыйСимвол Тогда
			Возврат ТекущийИндекс;
		КонецЕсли;
		ТекущийИндекс = ТекущийИндекс + 1;
	КонецЦикла;
	
	Возврат ТекущийИндекс;
	
КонецФункции


Функция ОтправитьСообщение(знач ПараметрыПисьма) Экспорт
	
	// Объявление переменных перед первым использованием в качестве
	// параметра метода Свойство структуры ПараметрыПисьма.
	// Переменные содержат значения переданных в функцию параметров.
	Перем Кому, Тема, Тело, Вложения, АдресОтвета, ТипТекста, Копии, СлепыеКопии;
	
	Если Не ПараметрыПисьма.Свойство("Тема", Тема) Тогда
		Тема = "";
	КонецЕсли;
	
	Если Не ПараметрыПисьма.Свойство("Тело", Тело) Тогда
		Тело = "";
	КонецЕсли;
	
	Кому = ПараметрыПисьма.Кому;
	
	Если ТипЗнч(Кому) = Тип("Строка") Тогда
		Кому = РазобратьСтрокуСПочтовымиАдресами(Кому);
	КонецЕсли;
	
	ПараметрыПисьма.Свойство("Вложения", Вложения);
	
	Письмо = Новый ИнтернетПочтовоеСообщение;
	Письмо.Тема = Тема;
	
	// формируем адрес получателя	
	Для Каждого ПочтовыйАдресПолучателя Из Кому Цикл
		Получатель = Письмо.Получатели.Добавить(ПочтовыйАдресПолучателя.Адрес);
		Получатель.ОтображаемоеИмя = ПочтовыйАдресПолучателя.Представление;
	КонецЦикла;
	
	Если ПараметрыПисьма.Свойство("Копии", Копии) Тогда
		// формируем адрес получателя поля Копии
		Для Каждого ПочтовыйАдресПолучателяКопии Из Копии Цикл
			Получатель = Письмо.Копии.Добавить(ПочтовыйАдресПолучателяКопии.Адрес);
			Получатель.ОтображаемоеИмя = ПочтовыйАдресПолучателяКопии.Представление;
		КонецЦикла;
	КонецЕсли;
	
	Если ПараметрыПисьма.Свойство("СлепыеКопии", СлепыеКопии) Тогда
		// формируем адрес получателя поля Копии
		Для Каждого ПочтовыйАдресПолучателяСлепыеКопии Из СлепыеКопии Цикл
			Получатель = Письмо.СлепыеКопии.Добавить(ПочтовыйАдресПолучателяСлепыеКопии.Адрес);
			Получатель.ОтображаемоеИмя = ПочтовыйАдресПолучателяСлепыеКопии.Представление;
		КонецЦикла;
	КонецЕсли;
	
	// формируем адрес ответа, если необходимо
	Если ПараметрыПисьма.Свойство("АдресОтвета", АдресОтвета) Тогда
		Для Каждого ПочтовыйАдресОтвета Из АдресОтвета Цикл
			ПочтовыйАдресОбратный = Письмо.ОбратныйАдрес.Добавить(ПочтовыйАдресОтвета.Адрес);
			ПочтовыйАдресОбратный.ОтображаемоеИмя = ПочтовыйАдресОтвета.Представление;
		КонецЦикла;
	КонецЕсли;
	
	// добавляем к письму имя отправителя
	Письмо.ИмяОтправителя              = "1C@sminex.com";
	Письмо.Отправитель.ОтображаемоеИмя = "1C@sminex.com";
	Письмо.Отправитель.Адрес           = "1C@sminex.com";
	
	// добавляем вложения к письму
	Если Вложения <> Неопределено Тогда
		Для Каждого ЭлементВложение Из Вложения Цикл
			Письмо.Вложения.Добавить(ЭлементВложение.Значение, ЭлементВложение.Ключ);
		КонецЦикла;
	КонецЕсли;

	// Установим строку с идентификаторами оснований
	Если ПараметрыПисьма.Свойство("ИдентификаторыОснований") Тогда
		Письмо.УстановитьПолеЗаголовка("References", ПараметрыПисьма.ИдентификаторыОснований);
	КонецЕсли;
	
	// добавляем текст
	Текст = Письмо.Тексты.Добавить(Тело);
	Если ПараметрыПисьма.Свойство("ТипТекста", ТипТекста) Тогда
		Если ТипЗнч(ТипТекста) = Тип("Строка") Тогда
			Если      ТипТекста = "HTML" Тогда
				Текст.ТипТекста = ТипТекстаПочтовогоСообщения.HTML;
			ИначеЕсли ТипТекста = "RichText" Тогда
				Текст.ТипТекста = ТипТекстаПочтовогоСообщения.РазмеченныйТекст;
			Иначе
				Текст.ТипТекста = ТипТекстаПочтовогоСообщения.ПростойТекст;
			КонецЕсли;
		ИначеЕсли ТипЗнч(ТипТекста) = Тип("ПеречислениеСсылка.ТипыТекстовЭлектронныхПисем") Тогда
			Если      ТипТекста = Перечисления.ТипыТекстовЭлектронныхПисем.HTML
				  ИЛИ ТипТекста = Перечисления.ТипыТекстовЭлектронныхПисем.HTMLСКартинками Тогда
				Текст.ТипТекста = ТипТекстаПочтовогоСообщения.HTML;
			ИначеЕсли ТипТекста = Перечисления.ТипыТекстовЭлектронныхПисем.РазмеченныйТекст Тогда
				Текст.ТипТекста = ТипТекстаПочтовогоСообщения.РазмеченныйТекст;
			Иначе
				Текст.ТипТекста = ТипТекстаПочтовогоСообщения.ПростойТекст;
			КонецЕсли;
		Иначе
			Текст.ТипТекста = ТипТекста;
		КонецЕсли;
	Иначе
		Текст.ТипТекста = ТипТекстаПочтовогоСообщения.ПростойТекст;
	КонецЕсли;

	// Зададим важность
	Важность = Неопределено;
	Если ПараметрыПисьма.Свойство("Важность", Важность) Тогда
		Письмо.Важность = Важность;
	КонецЕсли;
	
	// Зададим кодировку
	Кодировка = Неопределено;
	Если ПараметрыПисьма.Свойство("Кодировка", Кодировка) Тогда
		Письмо.Кодировка = Кодировка;
	КонецЕсли;

	Профиль = СформироватьИнтернетПрофиль();
	
	Соединение = Новый ИнтернетПочта;
	
	Соединение.Подключиться(Профиль);
	
	Соединение.Послать(Письмо, ОбработкаТекстаИнтернетПочтовогоСообщения.НеОбрабатывать);
	
	Соединение.Отключиться();
	
	Возврат Письмо.ИдентификаторСообщения;
	
КонецФункции

// Функция проверяет что введенная строка с e-mail адресами введена правильно
//
// Формат строки:
// Z = ИмяПользователя|[Имя Пользователя] [<]пользователь@почтовый_сервер[>], Строка = Z[<разделитель*>Z]..
// 
//   прим.: разделитель* - имеется в виду любой разделитель адресов
//
// Параметры:
// СтрокаАдресов - строка - правильная строка с почтовыми адресами
//
// Возвращаемое значение:
// Структура
// ключ Статус - булево - успех или неуспех преобразования
// в случае успеха содержит ключ Значение:
//           Массив структур, где
//                  Адрес- e-mail получателя
//                  Представление   - имя получателя
// в случае неуспеха содержит ключ СообщениеОбОшибке - строка
//
//  ВАЖНО: Функция возвращает массив структур, в которых одно поле (любое)
//         может быть незаполнено. Может использоваться различными
//         подсистемами для собственного сопоставления имени пользователя
//         некому e-mail адресу. Поэтому, необходимо перед непосредственной
//         отправкой проверить, что поле почтового адреса заполнено.
//
Функция РазобратьСтрокуСПочтовымиАдресами(знач СтрокаАдресов) Экспорт
	
	Результат = Новый Массив;
	
	НедопустимыеСимволы = "!#$%^&*()+`~|\/=";
	СимволыРазделители = ";,";
	
	Индекс = 1;               // номер обрабатываемого символа
	Накопитель = "";          // накопитель символов, после анализа перемещается либо в полное имя
	                          // либо в почтовый адрес
	ПолноеИмяАдресата = "";   // переменная, накапливающая имя адресата
	ПочтовыйАдрес = "";       // переменная, накапливающая e-mail адрес
	// 1 - формирование полного имени: ожидаются любые допустимые символы имени адресата
	// 2 - формирование почтового адреса: ожидаются любые допустимые символы email адреса
	// 3 - завершение формирования очередного почтового адреса - ожидаются символы разделители либо пробелы
	СтадияРазбора = 1; 
	
	СообщениеНедопустимыеСимволы = НСтр("ru = 'Недопустимые символы в почтовом адресе.'");
	СообщениеНеверныйФорматПочтовогоАдреса = НСтр("ru = 'Неверный формат почтового адреса.'");
	
	Пока Индекс <= СтрДлина(СтрокаАдресов) Цикл
		
		Символ = Сред(СтрокаАдресов, Индекс, 1);
		
		Если      Символ = " " Тогда
			Индекс = ? ((ПропуститьПробелы(СтрокаАдресов, Индекс, " ") - 1) > Индекс,
			             ПропуститьПробелы(СтрокаАдресов, Индекс, " ") - 1,
			             Индекс);
			Если      СтадияРазбора = 1 Тогда
				ПолноеИмяАдресата = ПолноеИмяАдресата + Накопитель + " ";
			ИначеЕсли СтадияРазбора = 2 Тогда
				ПочтовыйАдрес = Накопитель;
				СтадияРазбора = 3;
			КонецЕсли;
			Накопитель = "";
		ИначеЕсли Символ = "@" Тогда
			Если      СтадияРазбора = 1 Тогда
				СтадияРазбора = 2;
				
				Для ИндексПоискаНС = 1 По СтрДлина(Накопитель) Цикл
					Если Найти(НедопустимыеСимволы, Сред(Накопитель, ИндексПоискаНС, 1)) > 0 Тогда
						ВызватьИсключение СообщениеНедопустимыеСимволы;
					КонецЕсли;
				КонецЦикла;
				
				Накопитель = Накопитель + Символ;
			ИначеЕсли СтадияРазбора = 2 Тогда
				ВызватьИсключение СообщениеНеверныйФорматПочтовогоАдреса;
			ИначеЕсли СтадияРазбора = 3 Тогда
				ВызватьИсключение СообщениеНеверныйФорматПочтовогоАдреса;
			КонецЕсли;
		ИначеЕсли Найти(СимволыРазделители, Символ) > 0 Тогда
			
			Если      СтадияРазбора = 1 Тогда
				ПолноеИмяАдресата = ПолноеИмяАдресата + Накопитель;
			ИначеЕсли СтадияРазбора = 2 Тогда
				ПочтовыйАдрес = Накопитель;
			КонецЕсли;
			
			СтадияРазбора = 1;
			
			Если НЕ (ПустаяСтрока(ПолноеИмяАдресата) И ПустаяСтрока(ПочтовыйАдрес)) Тогда
				Результат.Добавить(ПроверитьИПодготовитьПочтовыйАдрес(ПолноеИмяАдресата, ПочтовыйАдрес));
			КонецЕсли;
			
			ПочтовыйАдрес = "";
			ПолноеИмяАдресата = "";
			Накопитель = "";
		Иначе
			Если СтадияРазбора = 2 ИЛИ СтадияРазбора = 3 Тогда
				Если Найти(НедопустимыеСимволы, Символ) > 0 Тогда
					ВызватьИсключение СообщениеНедопустимыеСимволы;
				КонецЕсли;
			КонецЕсли;
			
			Накопитель = Накопитель + Символ;
		КонецЕсли;
		
		Индекс = Индекс + 1;
	КонецЦикла;
	
	Если      СтадияРазбора = 1 Тогда
		ПолноеИмяАдресата = ПолноеИмяАдресата + Накопитель;
	ИначеЕсли СтадияРазбора = 2 Тогда
		ПочтовыйАдрес = Накопитель;
	КонецЕсли;

	Если НЕ (ПустаяСтрока(ПолноеИмяАдресата) И ПустаяСтрока(ПочтовыйАдрес)) Тогда
		Результат.Добавить(ПроверитьИПодготовитьПочтовыйАдрес(ПолноеИмяАдресата, ПочтовыйАдрес));
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Проверяет, что почтовый адрес не содержит символов обрамления
// если символы обрамления вставлены правильно убирает их
// Параметры:
//  ПолноеИмяАдресата - строка - имя получателя
//  ПочтовыйАдрес     - строка - email адрес
// Возвращаемое значение:
//  Структура:
//   Ключ статус - булево - успех или неуспех операции
//   СообщениеОбОшибке - в случае неуспеха операции содержит сообщение об ошибке
//   Значение - структура - в случае успеха операции содержит записанную структуру почтового
//                          адреса: ключи - Адрес, Представление (строки)
//
Функция ПроверитьИПодготовитьПочтовыйАдрес(знач ПолноеИмяАдресата, знач ПочтовыйАдрес)
	
	НедопустимыйСимволВИмениАдресата = НСтр("ru = 'Недопустимый символ в имени адресата.'");
	НедопустимыйСимволВПочтовомАдресе = НСтр("ru = 'Недопустимый символ в почтовом адресе.'");
	СимволыОбрамления = "<>[]";
	
	ПочтовыйАдрес     = СокрЛП(ПочтовыйАдрес);
	ПолноеИмяАдресата = СокрЛП(ПолноеИмяАдресата);
	
	Если Лев(ПолноеИмяАдресата, 1) = "<" Тогда
		Если Прав(ПолноеИмяАдресата, 1) = ">" Тогда
			ПолноеИмяАдресата = Сред(ПолноеИмяАдресата, 2, СтрДлина(ПолноеИмяАдресата)-2);
		Иначе
			ВызватьИсключение НедопустимыйСимволВИмениАдресата;
		КонецЕсли;
	ИначеЕсли Лев(ПолноеИмяАдресата, 1) = "[" Тогда
		Если Прав(ПолноеИмяАдресата, 1) = "]" Тогда
			ПолноеИмяАдресата = Сред(ПолноеИмяАдресата, 2, СтрДлина(ПолноеИмяАдресата)-2);
		Иначе
			ВызватьИсключение НедопустимыйСимволВИмениАдресата;
		КонецЕсли;
	КонецЕсли;
	
	Если Лев(ПочтовыйАдрес, 1) = "<" Тогда
		Если Прав(ПочтовыйАдрес, 1) = ">" Тогда
			ПочтовыйАдрес = Сред(ПочтовыйАдрес, 2, СтрДлина(ПочтовыйАдрес)-2);
		Иначе
			ВызватьИсключение НедопустимыйСимволВПочтовомАдресе;
		КонецЕсли;
	ИначеЕсли Лев(ПочтовыйАдрес, 1) = "[" Тогда
		Если Прав(ПочтовыйАдрес, 1) = "]" Тогда
			ПочтовыйАдрес = Сред(ПочтовыйАдрес, 2, СтрДлина(ПочтовыйАдрес)-2);
		Иначе
			ВызватьИсключение НедопустимыйСимволВПочтовомАдресе;
		КонецЕсли;
	КонецЕсли;
	
	Для Индекс = 1 По СтрДлина(СимволыОбрамления) Цикл
		Если Найти(ПолноеИмяАдресата, Сред(СимволыОбрамления, Индекс, 1)) <> 0
		 ИЛИ Найти(ПочтовыйАдрес,     Сред(СимволыОбрамления, Индекс, 1)) <> 0 Тогда
			ВызватьИсключение НедопустимыйСимволВПочтовомАдресе;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Новый Структура("Адрес, Представление", ПочтовыйАдрес,ПолноеИмяАдресата);
	
КонецФункции

// По переданной ссылке на учетную запись формирует профиль почтового соединения
//
// Параметры
// УчетнаяЗапись - СправочникСсылка.УчетнаяЗаписьЭлектроннойПочты - 
//                 параметры профиля в виде соответствия
//
// Возвращаемое значение
// Почтовый профиль (тип ИнтернетПочтовыйПрофиль)
//
Функция СформироватьИнтернетПрофиль() Экспорт
	
	Профиль = Новый ИнтернетПочтовыйПрофиль;
	
	//Профиль.Пользователь = // Настроить профиль почты
	Профиль = Новый ИнтернетПочтовыйПрофиль;
	Профиль.АдресСервераSMTP = "insmtp.sminex.com";
	//Профиль.АдресСервераPOP3 = "pop.sminex.com";
	Профиль.ПортSMTP 		 = 25;
	
	Профиль.ВремяОжидания = 60;
	
	Профиль.АутентификацияSMTP = СпособSMTPАутентификации.ПоУмолчанию;
	Профиль.ПользовательSMTP = "1C@sminex.com";
	Профиль.ПарольSMTP = "1CDataXchng";
	Профиль.АутентификацияSMTP = СпособSMTPАутентификации.ПоУмолчанию;
	Профиль.POP3ПередSMTP = Ложь;	
		
	Возврат Профиль;
	
КонецФункции


Функция ПолучитьЗначениеРеквизита(ТаблицаРеквизитов, Имя) Экспорт
	СтрокаРеквизита = ТаблицаРеквизитов.Найти(Имя, "Имя");
	Если СтрокаРеквизита = Неопределено Тогда
		Возврат "";
	Иначе
		Возврат СтрокаРеквизита.Значение;
	КонецЕсли;
КонецФункции

// В переменной параметры передаем следующую структуру параметров:
// КодВнешнегоСервиса: код внешнего сервиса, 
// ИмяМетода: символьное имя метода
// ПараметрыМетода: структуру параметров метода
Функция ЗапуститьМетодВнешнегоСервиса(ПереданныеПараметры) Экспорт
	Если Не ТипЗнч(ПереданныеПараметры)=Тип("Структура") Тогда
		ВызватьИсключение "В параметры должна быть передана структура соответствующего вида";
	КонецЕсли;
	КодВнешнегоСервиса = "";
	ПереданныеПараметры.Свойство("КодВнешнегоСервиса", КодВнешнегоСервиса);
	Если Не ЗначениеЗаполнено(КодВнешнегоСервиса) Тогда
		ВызватьИсключение "В параметры должен быть передан код внешнего сервиса";
	КонецЕсли;
	ЗапросВнешнегоСервиса = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                                     |	NSI_СписокВнешнихСервисов.Ссылка
	                                     |ИЗ
	                                     |	Справочник.NSI_СписокВнешнихСервисов КАК NSI_СписокВнешнихСервисов
	                                     |ГДЕ
	                                     |	NSI_СписокВнешнихСервисов.Код = &Код");
	ЗапросВнешнегоСервиса.УстановитьПараметр("Код", КодВнешнегоСервиса);
	Выборка = ЗапросВнешнегоСервиса.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ВнешнийСервис = Выборка.Ссылка;
	Иначе
		ВызватьИсключение "Внешний сервис с указанным кодом не существует или недоступен для данного пользователя";
	КонецЕсли;
	// Найдем метод сервиса
	ИмяМетода = "";
	ПереданныеПараметры.Свойство("ИмяМетода", ИмяМетода);
	Если Не ЗначениеЗаполнено(ИмяМетода) Тогда
		ВызватьИсключение "В параметры должно быть передано имя метода внешнего сервиса.";
	КонецЕсли;
	СтрокаМетода = ВнешнийСервис.МетодыСервисов.Найти(ИмяМетода, "ИмяМетода");
	Если СтрокаМетода=Неопределено Тогда
		ВызватьИсключение "Указанный метод сервиса не найден.";
	КонецЕсли;
	// Проверим соответствие переданных параметров сервиса заданным
	ПереданныеПараметрыМетода = Неопределено;
	ПереданныеПараметры.Свойство("ПараметрыМетода", ПереданныеПараметрыМетода);
	СписокПараметровМетода = СтрокаМетода.ПараметрыМетода.Получить();
	Параметры = Новый Структура;
	Для Каждого ТребуемыйПараметр Из СписокПараметровМетода Цикл
		ТипТребуемогоПараметра = NSI_РаботаСМастерДаннымиСервер.ПрочитатьОбъектИзXML(ТребуемыйПараметр.ТипПараметра);
		НеприведенныйПараметр = Неопределено;
		Если Не ПереданныеПараметрыМетода.Свойство(ТребуемыйПараметр.ИмяПараметра, НеприведенныйПараметр) Тогда	
			ВызватьИсключение "Параметр "+ТребуемыйПараметр.ИмяПараметра+" не передан";
		КонецЕсли;
		Если ТипТребуемогоПараметра.СодержитТип(Тип("СправочникСсылка.NSI_МастерДанные")) И ТипЗнч(НеприведенныйПараметр) = Тип("Строка") Тогда
			Если СтрДлина(НеприведенныйПараметр)=СтрДлина(Строка(Новый УникальныйИдентификатор)) Тогда
				НеприведенныйПараметр = NSI_РаботаСМастерДаннымиПоиск.ВернутьСуществующуюСсылку(НеприведенныйПараметр);
			КонецЕсли;			
		КонецЕсли;                              
		Если Не ТипТребуемогоПараметра.ПривестиЗначение(НеприведенныйПараметр)=НеприведенныйПараметр Тогда
			ВызватьИсключение "Параметр "+ТребуемыйПараметр.ИмяПараметра+" не соответствует заданному типу";
		КонецЕсли;
		Параметры.Вставить(ТребуемыйПараметр.ИмяПараметра, НеприведенныйПараметр);
	КонецЦикла;
	// Проверяем доступность сервиса
	Если Не Справочники.NSI_СписокВнешнихСервисов.ПроверитьДоступностьСервиса(ВнешнийСервис)=Истина Тогда
		ВызватьИсключение "Внешний сервис не доступен";
	КонецЕсли;
	// Подготовим среду выполнения сервиса
	Подключение = Справочники.NSI_СписокВнешнихСервисов.ПолучитьПодключениеКСервису(ВнешнийСервис);
	Если Подключение = Неопределено Тогда
		ВызватьИсключение "Не удалось создать подключение к внешнему сервису.";
	КонецЕсли;
	Файлы = Новый Структура;
	ТаблицаФайлов = СтрокаМетода.МакетыИФайлыМетода.Получить();
	Для Каждого СтрокаФайла Из ТаблицаФайлов Цикл
		Файлы.Вставить(СтрокаФайла.СимвольноеИмя, Base64Значение(СтрокаФайла.ДанныеФайла));
	КонецЦикла;
	// Выполняем метод
	УстановитьПривилегированныйРежим(Истина);
	Результат = Неопределено;
	Выполнить(СтрокаМетода.ПроцедураВызоваМетода);
	Возврат Результат;
КонецФункции
 