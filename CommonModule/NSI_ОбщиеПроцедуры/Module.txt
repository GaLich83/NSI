Функция СформироватьЗапрос(СсылкаНаЗапрос) Экспорт
	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ //ИменаПолей// 
	| ИЗ 
	| //СоединенияТаблиц// 
	| //ОбщиеУсловия//";	
	ИменаПолей = "";
	Для Каждого Строк Из СсылкаНаЗапрос.СписокРеквизитов Цикл
		ИменаПолей = ИменаПолей + ?(ЗначениеЗаполнено(ИменаПолей), ", "+Символы.ПС,"") + "ПРЕДСТАВЛЕНИЕССЫЛКИ("+Строк.Имя+") " + " КАК " +Строк.Псевдоним;
		Если Строк.НужнаНавигационнаяСсылка Тогда
			ИменаПолей = ИменаПолей + ?(ЗначениеЗаполнено(ИменаПолей), ", "+Символы.ПС,"") + Строк.Имя + " КАК " +Строк.Псевдоним+"НавигационнаяСсылка";
		КонецЕсли;
		Если Строк.НуженКодДляСсылки Тогда
			ИменаПолей = ИменаПолей + ?(ЗначениеЗаполнено(ИменаПолей), ", "+Символы.ПС,"") + Строк.Имя + " КАК " +Строк.Псевдоним+"КодДляСсылки";
		КонецЕсли;
	КонецЦикла;
	ИменаПолей = ИменаПолей + ?(ЗначениеЗаполнено(ИменаПолей), ", "+Символы.ПС,"") + "&NSI_Base КАК NSI_Base";
	СоединенияТаблиц = "";
	Для Каждого Строк Из СсылкаНаЗапрос.СписокТаблиц Цикл
		СоединенияТаблиц = СоединенияТаблиц + ?(ЗначениеЗаполнено(СоединенияТаблиц), Символы.ПС+" ЛЕВОЕ СОЕДИНЕНИЕ "+Символы.ПС,"") + Строк.Таблица + " КАК " +Строк.Псевдоним + ?(ЗначениеЗаполнено(СоединенияТаблиц) И ЗначениеЗаполнено(Строк.УсловиеСоединения), " ПО "+Строк.УсловиеСоединения,"");
	КонецЦикла;
	ОбщиеУсловия = "";
	Для Каждого Строк Из СсылкаНаЗапрос.ОбщиеУсловия Цикл
		ОбщиеУсловия = ОбщиеУсловия+ ?(ЗначениеЗаполнено(ОбщиеУсловия), " И "+Символы.ПС, " ГДЕ ") + Строк.Условие;
	КонецЦикла;
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//ИменаПолей//", ИменаПолей);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//СоединенияТаблиц//", СоединенияТаблиц);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//ОбщиеУсловия//", ОбщиеУсловия);
	Возврат ТекстЗапроса;
КонецФункции

Процедура ОтправитьОповещенияОСобытиях(Ссылка = Неопределено) Экспорт
	ЗапросПоСобытиямКОтправке=Новый Запрос("ВЫБРАТЬ
	                                       |	СобытияКОтправке.Ссылка,
	                                       |	СобытияКОтправке.БазаПолучатель,
	                                       |	СобытияКОтправке.БазаИсточник,
	                                       |	СобытияКОтправке.Событие,
	                                       |	СобытияКОтправке.Параметры
	                                       |ИЗ
	                                       |	Справочник.NSI_СобытияКОтправке КАК СобытияКОтправке
	                                       |ГДЕ
	                                       |	НЕ СобытияКОтправке.Отменено
	                                       |	И НЕ СобытияКОтправке.УспешноОтправлено
	                                       |	И (СобытияКОтправке.Ссылка = &Ссылка
	                                       |			ИЛИ &Ссылка = НЕОПРЕДЕЛЕНО)
	                                       |	И СобытияКОтправке.КоличествоНеудачныхПопытокОтправки <= 10
	                                       |
	                                       |ДЛЯ ИЗМЕНЕНИЯ
	                                       |	Справочник.NSI_СобытияКОтправке");
	ЗапросПоСобытиямКОтправке.УстановитьПараметр("Ссылка", Ссылка);
	Выборка = ЗапросПоСобытиямКОтправке.Выполнить().Выбрать();	
	Пока Выборка.Следующий() Цикл
		Попытка			
			Connector = NSI_МодульПовторногоИспользования.ПолучитьСоединениеПоИмениБазы(Выборка.БазаПолучатель.ИмяБазы);
			Параметры = Выборка.Параметры;
			Результат = Connector.SendEvent(Выборка.БазаИсточник.ИмяБазы, Выборка.Событие.Наименование, СериализаторXDTO.ЗаписатьXDTO(Параметры));
			СобытиеОбъект = Выборка.Ссылка.ПолучитьОбъект();
			СобытиеОбъект.УспешноОтправлено = Истина;
			СобытиеОбъект.СообщениеОбОшибке = "Отправлено в " + Выборка.БазаПолучатель.ИмяБазы;
			СобытиеОбъект.Записать();
		Исключение
			СобытиеОбъект = Выборка.Ссылка.ПолучитьОбъект();
			СобытиеОбъект.СообщениеОбОшибке = ОписаниеОшибки();
			СобытиеОбъект.КоличествоНеудачныхПопытокОтправки=СобытиеОбъект.КоличествоНеудачныхПопытокОтправки+1;
			Если СобытиеОбъект.КоличествоНеудачныхПопытокОтправки >= 10 Тогда
				СобытиеОбъект.ПревышеноДопустимоеКоличествоПопытокОтправки = Истина;
			КонецЕсли;
			СобытиеОбъект.Записать();
		КонецПопытки
	КонецЦикла;
КонецПроцедуры

Функция ПослатьСобытиеВнешнейБазе(ИмяБазыПолучателяСобытия, ИмяБазыИсточникаСобытия, ИмяСобытия, Параметры=Неопределено) Экспорт	
	СобытиеКОтправке = Справочники.NSI_СобытияКОтправке.СоздатьЭлемент();
	СобытиеКОтправке.БазаИсточник =  NSI_МодульПовторногоИспользования.ПолучитьСсылкуИБПоИмениБазы(ИмяБазыИсточникаСобытия);
	СобытиеКОтправке.БазаПолучатель = NSI_МодульПовторногоИспользования.ПолучитьСсылкуИБПоИмениБазы(ИмяБазыПолучателяСобытия);
	СобытиеКОтправке.Событие = NSI_МодульПовторногоИспользования.ПолучитьСобытиеПоИмени(ИмяСобытия);
	СобытиеКОтправке.Параметры = Новый ХранилищеЗначения(Параметры);
	СобытиеКОтправке.Записать();
	МассивПараметров = Новый Массив;
	МассивПараметров.Добавить(СобытиеКОтправке.Ссылка);
	ФоновыеЗадания.Выполнить("NSI_ОбщиеПроцедуры.ОтправитьОповещенияОСобытиях", МассивПараметров);
КонецФункции


Функция СоздатьСтроковоеВыражениеДляЗначения(Ключ = Неопределено, Значение)
	Если Справочники.ТипВсеСсылки().СодержитТип(ТипЗнч(Значение)) Тогда
		ИмяСправочника = Значение.Метаданные().Имя;
		Возврат ?(Ключ=Неопределено, "", Ключ+" = ")+"Справочники."+ИмяСправочника+".ПолучитьСсылку(Новый УникальныйИдентификатор("""+Значение.УникальныйИдентификатор()+"""))";
	ИначеЕсли ТипЗнч(Значение) = Тип("СписокЗначений") Тогда
		ТекстПеременной = Ключ + " = Новый СписокЗначений;"+Символы.ПС;
		Для Каждого ЭлементСписка Из Значение Цикл
			ТекстПеременной = ТекстПеременной + Ключ+".Добавить(" + СоздатьСтроковоеВыражениеДляЗначения(, ЭлементСписка.Значение)+");"+Символы.ПС;
		КонецЦикла;
		Возврат ТекстПеременной;
	ИначеЕсли Документы.ТипВсеСсылки().СодержитТип(ТипЗнч(Значение)) Тогда
		ИмяДокумента = Значение.Метаданные().Имя;
		Возврат ?(Ключ=Неопределено, "", Ключ+" = ")+"Документы."+ИмяДокумента+".ПолучитьСсылку(Новый УникальныйИдентификатор("""+Значение.УникальныйИдентификатор()+"""))";
	ИначеЕсли ТипЗнч(Значение) = Тип("Строка") Тогда
		Возврат ?(Ключ=Неопределено, "", Ключ+" = ")+""""+Значение+"""";
	Иначе
		Возврат ?(Ключ=Неопределено, "", Ключ+" = ")+Формат(Значение, "ЧН=; ЧГ=0; ДФ=yyyyMMddhhmmss; БЛ=Ложь; БИ=Истина")
	КонецЕсли;
КонецФункции

Процедура ВыполнитьТикетПоПравилу(Пакет, Тикет, РезультатПредыдущегоТикета) Экспорт
	Если РезультатПредыдущегоТикета = Неопределено Тогда
		ПредыдущийРезультат = ЗначениеВСтрокуВнутр(РезультатПредыдущегоТикета);
	Иначе
		Если ТипЗнч(ПредыдущийРезультат) = Тип("ХранилищеЗначения") Тогда
			ПредыдущийРезультат = РезультатПредыдущегоТикета.Получить();	
		Иначе
			ПредыдущийРезультат = РезультатПредыдущегоТикета;
		КонецЕсли;
	КонецЕсли;
	ТекстПравила = "";		
	Если Не Тикет.ВходныеПараметры = Неопределено Тогда
		Параметры = Тикет.ВходныеПараметры.Получить();
	КонецЕсли;
	Попытка
		Результат = Неопределено;
		ОбщийТекст = ТекстПравила + Тикет.Правило+";";
		ОбщийТекст = СтрЗаменить(ОбщийТекст, Символы.ПС, "");
		Выполнить(ОбщийТекст);
		ТикетОб = Тикет.ПолучитьОбъект();
		Если ТипЗнч(Результат) =  Тип("ОбъектXDTO") Тогда
			Результат =  СериализаторXDTO.ПрочитатьXDTO(Результат);
		КонецЕсли;
		ХранилищеРезультата = Новый ХранилищеЗначения(Результат, Новый СжатиеДанных(9));
		ТикетОб.Результат = ХранилищеРезультата;
		ТикетОб.Завершен = Истина;
		ТикетОб.ВыполненУспешно = Истина;
		ТикетОб.ДатаЗавершения = ТекущаяДата();
		ТикетОб.ОписаниеОшибкиВыполнения = "";
		ТикетОб.Записать();
		Если Тикет.ВозвращаетЗначение Тогда
			СобытиеКОтправке = Справочники.NSI_СобытияКОтправке.СоздатьЭлемент();
			СобытиеКОтправке.БазаПолучатель = Тикет.БазаИсточник;
			СобытиеКОтправке.Событие = Справочники.NSI_СобытияОповещений.ОтветОтТикета;
			СтруктураОтвета = Новый Структура("ИД_Тикета, Результат", Строка(Тикет.УникальныйИдентификатор()), ХранилищеРезультата);
			СобытиеКОтправке.Параметры = Новый ХранилищеЗначения(СтруктураОтвета);
			СобытиеКОтправке.Записать();
			МассивПараметров = Новый Массив();
			МассивПараметров.Добавить(СобытиеКОтправке.Ссылка);
			ФоновыеЗадания.Выполнить("NSI_ОбщиеПроцедуры.ОтправитьОповещенияОСобытиях", МассивПараметров);
		КонецЕсли;
	Исключение
		ТикетОб = Тикет.ПолучитьОбъект();
		ТикетОб.ОписаниеОшибкиВыполнения = ОписаниеОшибки();
		ТикетОб.Записать();
		Возврат;
	КонецПопытки;
	ТикетОб = Неопределено;
	ЗапросСледующегоТикета = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
	                                      |	ТикетыАсинхроннойПередачи.Ссылка,
	                                      |	ТикетыАсинхроннойПередачи.Правило,
	                                      |	ТикетыАсинхроннойПередачи.Порядок
	                                      |ИЗ
	                                      |	Справочник.NSI_ТикетыАсинхроннойПередачи КАК ТикетыАсинхроннойПередачи
	                                      |ГДЕ
	                                      |	ТикетыАсинхроннойПередачи.Порядок >= &Порядок
	                                      |	И НЕ ТикетыАсинхроннойПередачи.ПометкаУдаления
	                                      |	И НЕ ТикетыАсинхроннойПередачи.Завершен
	                                      |	И ТикетыАсинхроннойПередачи.Пакет = &Пакет
	                                      |	И ТикетыАсинхроннойПередачи.ИДПакета = &ИДПакета
	                                      |
	                                      |УПОРЯДОЧИТЬ ПО
	                                      |	ТикетыАсинхроннойПередачи.Порядок");
	ЗапросСледующегоТикета.УстановитьПараметр("Пакет", Пакет);
	ЗапросСледующегоТикета.УстановитьПараметр("Порядок", Тикет.Порядок);
	ЗапросСледующегоТикета.УстановитьПараметр("ИДПакета", Тикет.ИдПакета);
	Выборка = ЗапросСледующегоТикета.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		//ТикетСледОб = Выборка.Ссылка.ПолучитьОбъект();
		//ТикетСледОб.ВходныеПараметры = Тикет.Результат;
		МассивПараметров = Новый Массив;
		МассивПараметров.Добавить(Пакет);
		МассивПараметров.Добавить(Выборка.Ссылка);
		МассивПараметров.Добавить(ХранилищеРезультата);
		ФоновыеЗадания.Выполнить("NSI_ОбщиеПроцедуры.ВыполнитьТикетПоПравилу", МассивПараметров);//(Пакет, Выборка.Ссылка, ЗначениеВСтрокуВнутр(Результат));
	КонецЕсли;
КонецПроцедуры

Процедура ВыполнитьТикетЗапроса(Тикет, ЦелеваяБаза, ТипЗапроса, ТекстЗапроса, Параметры) Экспорт
	Попытка
		Результат = Неопределено;
		ХранилищеРезультата = NSI_РаботаСАДО.ВыполнитьЗапросКБазе(ЦелеваяБаза, ТипЗапроса, ТекстЗапроса, , Параметры);
		ТикетОб = Тикет.ПолучитьОбъект();
		ТикетОб.Результат = ХранилищеРезультата;
		ТикетОб.Завершен = Истина;
		ТикетОб.ВыполненУспешно = Истина;
		ТикетОб.ДатаЗавершения = ТекущаяДата();
		ТикетОб.ОписаниеОшибкиВыполнения = "";
		ТикетОб.Записать();
		Если Тикет.ВозвращаетЗначение Тогда
			СобытиеКОтправке = Справочники.NSI_СобытияКОтправке.СоздатьЭлемент();
			СобытиеКОтправке.БазаПолучатель = Тикет.БазаИсточник;
			СобытиеКОтправке.Событие = Справочники.NSI_СобытияОповещений.ОтветОтТикета;
			СтруктураОтвета = Новый Структура("ИД_Тикета, Результат", Строка(Тикет.УникальныйИдентификатор()), ХранилищеРезультата);
			СобытиеКОтправке.Параметры = Новый ХранилищеЗначения(СтруктураОтвета);
			СобытиеКОтправке.Записать();
			МассивПараметров = Новый Массив();
			МассивПараметров.Добавить(СобытиеКОтправке.Ссылка);
			ФоновыеЗадания.Выполнить("NSI_ОбщиеПроцедуры.ОтправитьОповещенияОСобытиях", МассивПараметров);
		КонецЕсли;
	Исключение
		ТикетОб = Тикет.ПолучитьОбъект();
		ТикетОб.ОписаниеОшибкиВыполнения = ОписаниеОшибки();
		ТикетОб.Записать();
		Возврат;
	КонецПопытки;
	ТикетОб = Неопределено;
КонецПроцедуры

Функция ВыполнитьЗапросКБазеПоПравилу(ИмяПравила, ИмяБазы, Параметры) Экспорт
	
	ВызватьИсключение "Метод устарел. Используйте ВыполнитьЗапросКБазеПоПравилуЧерезХранилище";
	//Если ТипЗнч(Параметры) = Тип("ОбъектXDTO") Тогда
	//	Параметры = СериализаторXDTO.ПрочитатьXDTO(Параметры);
	//КонецЕсли;
	//Для Каждого Параметр Из Параметры Цикл
	//	
	//КонецЦикла;	
	
	//Если ТипЗнч(Параметры) = Тип("ОбъектXDTO") Тогда
	//	Parameters = Параметры;
	//Иначе 
	//	Parameters = СериализаторXDTO.ЗаписатьXDTO(Параметры);
	//КонецЕсли;
	//Connector = NSI_МодульПовторногоИспользования.ПолучитьСоединениеПоИмениБазы(ИмяБазы);
	//Если Connector = Неопределено Тогда
	//	Возврат Неопределено;
	//Иначе
	//	ПравилоОбмена = Справочники.ЗапросыДанных.НайтиПоНаименованию(ИмяПравила);
	//	Если ПравилоОбмена = Неопределено Тогда
	//		Возврат Неопределено;
	//	КонецЕсли;
	//	XDTOОтвет = Connector.RunQuery(ПравилоОбмена.ТекстЗапроса, Parameters);
	//	Возврат XDTOОтвет;
	//	//ТаблицаДляПроверки.Загрузить(ТЗОтвет);
	//	// Тут надо доделать отображение проверки на экране
	//КонецЕсли;		
КонецФункции

Функция ВыполнитьПроизвольнуюФункциюВБазе(ИмяБазы, ИмяПравила, Параметры) Экспорт
	//Если ТипЗнч(Параметры) = Тип("ОбъектXDTO") Тогда
	//	Параметры = СериализаторXDTO.ПрочитатьXDTO(Параметры);
	//КонецЕсли;
	//Для Каждого Параметр Из Параметры Цикл
	//	
	//КонецЦикла;	
	Если ТипЗнч(Параметры) = Тип("ОбъектXDTO") Тогда
		Parameters = Параметры;
	Иначе 
		Parameters = СериализаторXDTO.ЗаписатьXDTO(Параметры);
	КонецЕсли;
	Connector = NSI_МодульПовторногоИспользования.ПолучитьСоединениеПоИмениБазы(ИмяБазы);
	Если Connector = Неопределено Тогда
		Возврат Неопределено;
	Иначе
		Попытка
			XDTOОтвет = Connector.RunFunction(ИмяПравила, Parameters);
		Исключение
			ВызватьИсключение ОписаниеОшибки();
		КонецПопытки;
		Возврат XDTOОтвет;
		//ТаблицаДляПроверки.Загрузить(ТЗОтвет);
		// Тут надо доделать отображение проверки на экране
	КонецЕсли;		
КонецФункции

Функция ВыполнитьПроизвольнуюФункциюВБазеХранилище(ИмяБазы, ИмяПравила, Параметры) Экспорт
	Если ТипЗнч(Параметры) = Тип("ОбъектXDTO") Тогда
		Parameters = Параметры;
	Иначе 
		Parameters = СериализаторXDTO.ЗаписатьXDTO(Параметры);
	КонецЕсли;
	Connector = NSI_МодульПовторногоИспользования.ПолучитьСоединениеПоИмениБазы(ИмяБазы);
	Если Connector = Неопределено Тогда
		Возврат Неопределено;
	Иначе
		Попытка
			XDTOОтвет = Connector.RunFunctionStorage(ИмяПравила, Parameters);
		Исключение
			ВызватьИсключение ОписаниеОшибки();
		КонецПопытки;
		Возврат XDTOОтвет;
	КонецЕсли;		
КонецФункции

Процедура УстановитьОтборУСписка(ОтборСКД ,Знач ЛевоеЗначение, Знач ПравоеЗначение, ВидСравненияОтбора = Неопределено) Экспорт
	ЭлементыОтбора = ОтборСКД.Элементы;
	ЭлементОтбораДанных = Неопределено;
	Если ВидСравненияОтбора = Неопределено Тогда
		ВидСравненияОтбора = ВидСравненияКомпоновкиДанных.Равно;
	КонецЕсли;
	
	Для каждого ЭлементОтбора Из ЭлементыОтбора Цикл
		
		Если ЭлементОтбора.ЛевоеЗначение = ЛевоеЗначение Тогда
			
			Если ЭлементОтбораДанных = Неопределено Тогда
				ЭлементОтбораДанных = ЭлементОтбора;
			Иначе
				ЭлементОтбора.Использование = Ложь;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЭлементОтбораДанных = Неопределено Тогда
		
		ЭлементОтбораДанных = ЭлементыОтбора.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбораДанных.ЛевоеЗначение = ЛевоеЗначение;
		
	КонецЕсли;
	
	ЭлементОтбораДанных.ВидСравнения   = ВидСравненияОтбора;
	ЭлементОтбораДанных.ПравоеЗначение = ПравоеЗначение;
	ЭлементОтбораДанных.Использование  = Истина;
	
КонецПроцедуры // УстановитьОтборУСписка()

Функция ПолучитьСтрокуПодключения(База = Неопределено) Экспорт
	Если База = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	Возврат База.СтрокаПодключения+";Usr=""sminex\1c_nsi""; Pwd=""Qwerty321"";" ;
КонецФункции

Функция ТестовоеФоновоеЗадание() Экспорт
	Для Ц = 1 По 500000 Цикл
		Если Ц%1000 = 0 Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = Строка(Ц);
			Сообщение.Сообщить();
		КонецЕсли;
	КонецЦикла;
КонецФункции

Функция ОбработатьПравилаОповещения(База, Тип, ИД) Экспорт
	ЗапросПоИзменениям = Новый Запрос("ВЫБРАТЬ
	                                  |	ИзмененияОбъектовВнешнихБаз.Ссылка,
	                                  |	ИзмененияОбъектовВнешнихБаз.ДатаИзменения КАК ДатаИзменения,
	                                  |	ИзмененияОбъектовВнешнихБаз.ДанныеДоИзменения,
	                                  |	ИзмененияОбъектовВнешнихБаз.ДанныеПослеИзменения,
	                                  |	ИзмененияОбъектовВнешнихБаз.СтруктураИзменений
	                                  |ИЗ
	                                  |	Справочник.NSI_ИзмененияОбъектовВнешнихБаз КАК ИзмененияОбъектовВнешнихБаз
	                                  |ГДЕ
	                                  |	НЕ ИзмененияОбъектовВнешнихБаз.ПометкаУдаления
	                                  |	И НЕ ИзмененияОбъектовВнешнихБаз.ОповещенияОтправлены
	                                  |	И ИзмененияОбъектовВнешнихБаз.ВнешняяБаза = &ВнешняяБаза
	                                  |	И ИзмененияОбъектовВнешнихБаз.ТипСсылки = &ТипСсылки
	                                  |	И ИзмененияОбъектовВнешнихБаз.ИДСсылки = &ИДСсылки
	                                  |
	                                  |УПОРЯДОЧИТЬ ПО
	                                  |	ДатаИзменения");	
	ЗапросПоИзменениям.УстановитьПараметр("ВнешняяБаза", База);
	ЗапросПоИзменениям.УстановитьПараметр("ТипСсылки", Тип);
	ЗапросПоИзменениям.УстановитьПараметр("ИДСсылки", ИД);
	ВыборкаИзменений = ЗапросПоИзменениям.Выполнить().Выбрать();
	ЗапросПоНастройкамОповещений = Новый Запрос("ВЫБРАТЬ
	                                            |	НастройкиПочтовыхРассылокПоИзменениям.Ссылка,
	                                            |	НастройкиПочтовыхРассылокПоИзменениям.Условие
	                                            |ИЗ
	                                            |	Справочник.NSI_НастройкиПочтовыхРассылокПоИзменениям КАК НастройкиПочтовыхРассылокПоИзменениям
	                                            |ГДЕ
	                                            |	НастройкиПочтовыхРассылокПоИзменениям.База = &База
	                                            |	И НастройкиПочтовыхРассылокПоИзменениям.ТипОбъекта = &ТипОбъекта
	                                            |	И НЕ НастройкиПочтовыхРассылокПоИзменениям.ПометкаУдаления");
	ЗапросПоНастройкамОповещений.УстановитьПараметр("База", База);
	ЗапросПоНастройкамОповещений.УстановитьПараметр("ТипОбъекта", Тип);
	ВыборкаНастроекОповещений = ЗапросПоНастройкамОповещений.Выполнить().Выбрать();
	Пока ВыборкаНастроекОповещений.Следующий() Цикл
		ВыборкаИзменений.Сбросить();
		Условие = ВыборкаНастроекОповещений.Условие.Получить();
		МассивИзмененийПоУсловию = Новый Массив;
		Пока ВыборкаИзменений.Следующий() Цикл
			Если ПроверитьНеобходимостьОповещения(Условие, ВыборкаИзменений.ДанныеДоИзменения.Получить(), ВыборкаИзменений.ДанныеПослеИзменения.Получить(), ВыборкаИзменений.СтруктураИзменений.Получить()) Тогда
				МассивИзмененийПоУсловию.Добавить(ВыборкаИзменений.Ссылка);
			КонецЕсли;
		КонецЦикла;
		Если МассивИзмененийПоУсловию.Количество()>0 Тогда
			ОповеститьОбИзмененииОбъекта(ВыборкаНастроекОповещений.Ссылка, МассивИзмененийПоУсловию);
		КонецЕсли;			
	КонецЦикла;
	ВыборкаИзменений.Сбросить();
	Пока ВыборкаИзменений.Следующий() Цикл
		Об = ВыборкаИзменений.Ссылка.ПолучитьОбъект();
		Об.ОповещенияОтправлены = Истина;
		Об.Записать();
	КонецЦикла;
КонецФункции

Функция ПроверитьНеобходимостьОповещения(УсловияОповещения, ДанныеДоИзменения, ДанныеПослеИзменения, Изменения) Экспорт
	Результат = Истина;
	Для Каждого СтрокаУсловия Из УсловияОповещения.Строки Цикл
		Если СтрокаУсловия.Группа Тогда
			Результат = Результат И ПроверитьГруппуУсловий(СтрокаУсловия, ДанныеДоИзменения, ДанныеПослеИзменения, Изменения);
		Иначе
			Результат = Результат И ПроверитьУсловие(СтрокаУсловия, ДанныеДоИзменения, ДанныеПослеИзменения, Изменения);
		КонецЕсли;
		Если Не Результат Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Возврат Результат;
КонецФункции

Функция ПроверитьГруппуУсловий(Условие, ДанныеДоИзменения, ДанныеПослеИзменения, Изменения)
	Если Условие.Реквизит = "ИЛИ" Тогда РезультатПоГруппе = Ложь; Иначе РезультатПоГруппе = Истина; КонецЕсли;
	Для Каждого СтрокаУсловия Из Условие.Строки Цикл
		Если СтрокаУсловия.Группа Тогда
			РезультатЛокальный = ПроверитьГруппуУсловий(СтрокаУсловия, ДанныеДоИзменения, ДанныеПослеИзменения, Изменения);
		Иначе
			РезультатЛокальный = ПроверитьУсловие(СтрокаУсловия, ДанныеДоИзменения, ДанныеПослеИзменения, Изменения);
		КонецЕсли;
		Если Условие.Реквизит = "ИЛИ" Тогда
			РезультатПоГруппе = РезультатПоГруппе ИЛИ РезультатЛокальный;
			Если РезультатПоГруппе Тогда
				Возврат РезультатПоГруппе;
			КонецЕсли;
		ИначеЕсли Условие.Реквизит = "И" Тогда
			РезультатПоГруппе = РезультатПоГруппе И РезультатЛокальный;
			Если Не РезультатПоГруппе Тогда
				Возврат РезультатПоГруппе;
			КонецЕсли;
		КонецЕсли;			
	КонецЦикла;
	Возврат РезультатПоГруппе;	
КонецФункции

Функция ПроверитьУсловие(Условие, ДанныеДоИзменения, ДанныеПослеИзменения, Изменения)
	РезультатПроверки = Ложь;
	Если Условие.ГдеПроверять = "Было" Тогда
		СтруктураПроверки = ДанныеДоИзменения;
	ИначеЕсли Условие.ГдеПроверять = "Стало" Тогда
		СтруктураПроверки = ДанныеПослеИзменения;
	Иначе
		СтруктураПроверки = Изменения;
	КонецЕсли;
	РазделительРеквизита = Найти(Условие.Реквизит, ".");
	Если РазделительРеквизита>0 Тогда
		ИмяТЧ = Лев(Условие.Реквизит, РазделительРеквизита-1);
		ИмяРеквизита = Сред(Условие.Реквизит, РазделительРеквизита+1);
		Если СтруктураПроверки.Свойство(ИмяТЧ) Тогда
			Если ТипЗнч(СтруктураПроверки[ИмяТЧ]) = Тип("Массив") Тогда
				Для Каждого СтрокМассива Из СтруктураПроверки[ИмяТЧ] Цикл
					Если СтрокМассива.Свойство(ИмяРеквизита) Тогда
						РезультатПоСтроке = ПроверитьКонкретныйРеквизит(Условие, СтрокМассива[ИмяРеквизита]);
					Иначе
						РезультатПоСтроке = Ложь;
					КонецЕсли;
					Если Условие.УсловиеСравнения = "Без условий" Тогда
						Возврат РезультатПоСтроке;
					КонецЕсли;
					Если Условие.УсловиеПоТЧ = "В каждой строке" Тогда
						Если Не РезультатПоСтроке Тогда
							Возврат Ложь;
						Иначе
							РезультатПроверки = РезультатПроверки И РезультатПоСтроке;
						КонецЕсли;
					ИначеЕсли Условие.УсловиеПоТЧ = "В любой строке" Тогда
						Если РезультатПоСтроке Тогда
							Возврат Истина;
						Иначе
							РезультатПроверки = РезультатПроверки ИЛИ РезультатПоСтроке;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			ИначеЕсли ТипЗнч(СтруктураПроверки[ИмяТЧ]) = Тип("Структура") Тогда
				Для Каждого Реквизит Из СтруктураПроверки[ИмяТЧ] Цикл
					Если Найти(Реквизит.Ключ, ИмяТЧ)>0 Тогда
						Если Реквизит.Значение.Свойство(ИмяРеквизита) Тогда
							РезультатПоСтроке = ПроверитьКонкретныйРеквизит(Условие, Реквизит.Значение[ИмяРеквизита].После);
						Иначе
							РезультатПоСтроке = Ложь;
						КонецЕсли;
						Если Условие.УсловиеСравнения = "Без условий" Тогда
							Возврат РезультатПоСтроке;
						КонецЕсли;
						Если Условие.УсловиеПоТЧ = "В каждой строке" Тогда
							Если Не РезультатПоСтроке Тогда
								Возврат Ложь;
							Иначе
								РезультатПроверки = РезультатПроверки И РезультатПоСтроке;
							КонецЕсли;
						ИначеЕсли Условие.УсловиеПоТЧ = "В любой строке" Тогда
							Если РезультатПоСтроке Тогда
								Возврат Истина;
							Иначе
								РезультатПроверки = РезультатПроверки ИЛИ РезультатПоСтроке;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		Иначе
			Возврат Ложь;
		КонецЕсли;
	Иначе
		Если СтруктураПроверки.Свойство(Условие.Реквизит) Тогда
			РезультатПроверки = ПроверитьКонкретныйРеквизит(Условие, СтруктураПроверки[Условие.Реквизит]);
		КонецЕсли;
	КонецЕсли;
	Возврат РезультатПроверки;
КонецФункции

Функция ПроверитьКонкретныйРеквизит(Условие, Реквизит)
	Если Условие.УсловиеСравнения = "Равно" Тогда
		Возврат Реквизит = Условие.ЗначениеСравнения;
	ИначеЕсли Условие.УсловиеСравнения = "Не равно" Тогда
		Возврат Реквизит <> Условие.ЗначениеСравнения;
	ИначеЕсли Условие.УсловиеСравнения = "Больше" Тогда
		Возврат Реквизит > Условие.ЗначениеСравнения;
	ИначеЕсли Условие.УсловиеСравнения = "Меньше" Тогда
		Возврат Реквизит < Условие.ЗначениеСравнения;
	ИначеЕсли Условие.УсловиеСравнения = "Меньше или равно" Тогда
		Возврат Реквизит <= Условие.ЗначениеСравнения;
	ИначеЕсли Условие.УсловиеСравнения = "Больше или равно" Тогда
		Возврат Реквизит >= Условие.ЗначениеСравнения;
	ИначеЕсли Условие.УсловиеСравнения = "Заполнено" Тогда
		Возврат ЗначениеЗаполнено(Реквизит);
	ИначеЕсли Условие.УсловиеСравнения = "Не заполнено" Тогда
		Возврат Не ЗначениеЗаполнено(Реквизит);
	ИначеЕсли Условие.УсловиеСравнения = "Содержит" Тогда
		Возврат Найти(Реквизит, Условие.ЗначениеСравнения)>0;
	ИначеЕсли Условие.УсловиеСравнения = "Не содержит" Тогда
		Возврат Найти(Реквизит, Условие.ЗначениеСравнения)=0;
	ИначеЕсли Условие.УсловиеСравнения = "Без условий" Тогда
		Возврат Истина;
	КонецЕсли;
КонецФункции

Процедура ОповеститьОбИзмененииОбъекта(ПравилоСсылка, МассивИзменений) Экспорт
	ЗаписьРегистра = РегистрыСведений.NSI_РегистрацияСобытийОповещения.СоздатьМенеджерЗаписи();
	//ЗаписьРегистра.Объект = ИзменениеСсылка;
	ЗаписьРегистра.ИД = Новый УникальныйИдентификатор;
	ЗаписьРегистра.ШаблонОповещения = ПравилоСсылка.ШаблонОповещения;
	ЗаписьРегистра.Статус = Перечисления.NSI_СтатусыСобытийОповещений.Создано;
	СтруктураПараметров = Новый Структура;
	
	СтруктураПараметров.Вставить("МассивИзменений", СтрЗаменить(ЗначениеВСтрокуВнутр(МассивИзменений), Символы.ПС, ""));
	СтруктураПараметров.Вставить("Правило", ПравилоСсылка);
	ЗаписьРегистра.ПараметрыОповещения = Новый ХранилищеЗначения(СтруктураПараметров, Новый СжатиеДанных(9));
	ЗаписьРегистра.Записать();
КонецПроцедуры                           

Функция СобратьИзмененияПоМассиву(МассивИзменений, МассивТребуемыхРеквизитов =  Неопределено) Экспорт
	ТаблицаИзменений = Новый ТаблицаЗначений;
	ТаблицаИзменений.Колонки.Добавить("ДатаИзменения");
	ТаблицаИзменений.Колонки.Добавить("Автор");
	ТаблицаИзменений.Колонки.Добавить("Компьютер");
	ТаблицаИзменений.Колонки.Добавить("Реквизиты");
	ТаблицаИзменений.Колонки.Добавить("ТабличныеЧасти");
	Для Каждого ИзменениеСсылка Из МассивИзменений Цикл
		Изменение = ТаблицаИзменений.Добавить();
		Изменение.ДатаИзменения = ИзменениеСсылка.ДатаИзменения;
		Изменение.Автор = ИзменениеСсылка.Автор;
		Изменение.Компьютер = ИзменениеСсылка.Компьютер;
		РеквизитыИзменения = Новый ТаблицаЗначений;
		РеквизитыИзменения.Колонки.Добавить("Имя");
		РеквизитыИзменения.Колонки.Добавить("Синоним");
		РеквизитыИзменения.Колонки.Добавить("До");
		РеквизитыИзменения.Колонки.Добавить("После");
		
		ТабличныеЧастиИзменения = Новый ТаблицаЗначений;
		ТабличныеЧастиИзменения.Колонки.Добавить("Имя");
		ТабличныеЧастиИзменения.Колонки.Добавить("Синоним");
		ТабличныеЧастиИзменения.Колонки.Добавить("Значение");
		
		СписокИзменений = ИзменениеСсылка.СтруктураИзменений.Получить();
		
		Если ТипЗнч(СписокИзменений) = Тип("ТаблицаЗначений") Тогда
			Для Каждого Реквизит Из СписокИзменений Цикл
				Если Реквизит.ЭтоТаблица Тогда
					Если ЗначениеЗаполнено(МассивТребуемыхРеквизитов) И Не МассивТребуемыхРеквизитов.Найти(Реквизит.Имя)=Неопределено Тогда
						Продолжить;
					КонецЕсли;
					//Ц = 0;
					ТЧИзменения = ТабличныеЧастиИзменения.Добавить();
					ТЧИзменения.Имя = Реквизит.Имя;
					ТЧИзменения.Синоним = Реквизит.Синоним;				
					СтрокиТЧ = Новый ТаблицаЗначений;
					СтрокиТЧ.Колонки.Добавить("Имя");
					СтрокиТЧ.Колонки.Добавить("Синоним");
					СтрокиТЧ.Колонки.Добавить("Значение");
					//Сообщить(Реквизит.Синоним+" = ТЧ {");
					Для Каждого Строк Из Реквизит.До Цикл
						НоваяСтрока = СтрокиТЧ.Добавить();
						НоваяСтрока.Имя = Строк.Имя;
						НоваяСтрока.Синоним = Строк.Синоним;
						РеквизитыСтрокиИзменения = Новый ТаблицаЗначений;
						РеквизитыСтрокиИзменения.Колонки.Добавить("Имя");
						РеквизитыСтрокиИзменения.Колонки.Добавить("Синоним");
						РеквизитыСтрокиИзменения.Колонки.Добавить("До");
						РеквизитыСтрокиИзменения.Колонки.Добавить("После");
						Если ТипЗнч(Строк.Значение) = Тип("ТаблицаЗначений") Тогда
							//Сообщить("  "+Строк.Синоним); 						
							Для Каждого СтрокРеквизит Из Строк.Значение Цикл
								НовыйРеквизитСтрокиИзменения = РеквизитыСтрокиИзменения.Добавить();
								НовыйРеквизитСтрокиИзменения.Имя = СтрокРеквизит.Имя;
								НовыйРеквизитСтрокиИзменения.Синоним = СтрокРеквизит.Синоним;
								НовыйРеквизитСтрокиИзменения.До = СтрокРеквизит.До;
								НовыйРеквизитСтрокиИзменения.После = СтрокРеквизит.После;
								//Сообщить("    "+СтрокРеквизит.Синоним+". До: "+Строка(СтрокРеквизит.До)+", после: "+Строка(СтрокРеквизит.После));
							КонецЦикла;
						КонецЕсли;
						НоваяСтрока.Значение = РеквизитыСтрокиИзменения;
						//Ц = Ц+1;
					КонецЦикла;
					ТЧИзменения.Значение = СтрокиТЧ;
					//Сообщить("}");
				Иначе
					Если ЗначениеЗаполнено(МассивТребуемыхРеквизитов) И МассивТребуемыхРеквизитов.Найти(Реквизит.Имя)=Неопределено Тогда
						Продолжить;
					КонецЕсли;
					НовыйРеквизитСтрокиИзменения = РеквизитыИзменения.Добавить();
					НовыйРеквизитСтрокиИзменения.Имя = Реквизит.Имя;
					НовыйРеквизитСтрокиИзменения.Синоним = Реквизит.Синоним;
					НовыйРеквизитСтрокиИзменения.До = Реквизит.До;
					НовыйРеквизитСтрокиИзменения.После = Реквизит.После;
					//Сообщить(Реквизит.Синоним+". До: "+Строка(Реквизит.До)+", после: "+Строка(Реквизит.После));
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		Изменение.Реквизиты = РеквизитыИзменения;
		Изменение.ТабличныеЧасти = ТабличныеЧастиИзменения;
	КонецЦикла;
	Возврат ТаблицаИзменений;
КонецФункции

Функция ПолучитьДанныеПоИзменениямРеквизитовВоВнешнейБазе(База, Тип, ИД, СписокРеквизитов, ДатаНачала, ДатаОкончания) Экспорт
	Если ТипЗнч(СписокРеквизитов)=Тип("СписокЗначений") Тогда
		СписокРеквизитов = СписокРеквизитов.ВыгрузитьЗначения();
	КонецЕсли;
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ИндексИзмененийВнешнихБаз.Изменение
	                      |ИЗ
	                      |	РегистрСведений.NSI_ИндексИзмененийВнешнихБаз КАК ИндексИзмененийВнешнихБаз
	                      |ГДЕ
	                      |	ИндексИзмененийВнешнихБаз.Изменение.ВнешняяБаза = &ВнешняяБаза
	                      |	И ИндексИзмененийВнешнихБаз.Изменение.ТипСсылки = &ТипСсылки
	                      |	И ИндексИзмененийВнешнихБаз.Изменение.ИДСсылки = &ИДСсылки
	                      |	И (ИндексИзмененийВнешнихБаз.ИмяИзмененногоРеквизита В (&МассивРеквизитов)
	                      |			ИЛИ &ВсеРеквизиты)
	                      |	И ИндексИзмененийВнешнихБаз.Изменение.ДатаИзменения >= &ДатаНачала
	                      |	И ИндексИзмененийВнешнихБаз.Изменение.ДатаИзменения <= &ДатаОкончания
	                      |
	                      |СГРУППИРОВАТЬ ПО
	                      |	ИндексИзмененийВнешнихБаз.Изменение
	                      |
	                      |УПОРЯДОЧИТЬ ПО
	                      |	ИндексИзмененийВнешнихБаз.Изменение.ДатаИзменения");
	Запрос.УстановитьПараметр("ВнешняяБаза", База);
	Запрос.УстановитьПараметр("ТипСсылки", Тип);
	Запрос.УстановитьПараметр("ИДСсылки", ИД);
	Запрос.УстановитьПараметр("МассивРеквизитов", СписокРеквизитов);
	Запрос.УстановитьПараметр("ВсеРеквизиты", Не ЗначениеЗаполнено(СписокРеквизитов));
	Запрос.УстановитьПараметр("ДатаНачала", ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", ДатаОкончания);                  
	СписокИзменений = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Изменение");
	Возврат СобратьИзмененияПоМассиву(СписокИзменений, ?(ЗначениеЗаполнено(СписокРеквизитов), СписокРеквизитов, Неопределено));
КонецФункции

Функция ПолучитьИсториюИзмененийВоВнешнейБазе(База, МассивСсылок, СписокРеквизитов, ДатаНачала, ДатаОкончания, Author=Неопределено, Computer=Неопределено, PeriodStep="Все") Экспорт
	Если ТипЗнч(СписокРеквизитов)=Тип("СписокЗначений") Тогда
		СписокРеквизитов = СписокРеквизитов.ВыгрузитьЗначения();
	КонецЕсли;
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ИндексИзмененийВнешнихБаз.Изменение КАК Изменение,
	                      |	ИндексИзмененийВнешнихБаз.ДатаИзменения,
	                      |	ИндексИзмененийВнешнихБаз.ИДСсылки КАК ИДСсылки
	                      |ИЗ
	                      |	РегистрСведений.NSI_ИндексИзмененийВнешнихБаз КАК ИндексИзмененийВнешнихБаз
	                      |ГДЕ
	                      |	ИндексИзмененийВнешнихБаз.ВнешняяБаза = &ВнешняяБаза
	                      |	И ИндексИзмененийВнешнихБаз.ИДСсылки В(&ИДСсылок)
	                      |	И (ИндексИзмененийВнешнихБаз.ИмяИзмененногоРеквизита В (&МассивРеквизитов)
	                      |			ИЛИ &ВсеРеквизиты)
	                      |	И ИндексИзмененийВнешнихБаз.ДатаИзменения >= &ДатаНачала
	                      |	И ИндексИзмененийВнешнихБаз.ДатаИзменения <= &ДатаОкончания
	                      |
	                      |СГРУППИРОВАТЬ ПО
	                      |	ИндексИзмененийВнешнихБаз.Изменение,
	                      |	ИндексИзмененийВнешнихБаз.ДатаИзменения,
	                      |	ИндексИзмененийВнешнихБаз.ИДСсылки
	                      |
	                      |УПОРЯДОЧИТЬ ПО
	                      |	ИндексИзмененийВнешнихБаз.ДатаИзменения
	                      |ИТОГИ ПО
	                      |	ИДСсылки");
	Запрос.УстановитьПараметр("ВнешняяБаза", База);
	//Запрос.УстановитьПараметр("ТипСсылки", Тип);
	Запрос.УстановитьПараметр("ИДСсылок", МассивСсылок);
	Запрос.УстановитьПараметр("МассивРеквизитов", СписокРеквизитов);
	Запрос.УстановитьПараметр("ВсеРеквизиты", Не ЗначениеЗаполнено(СписокРеквизитов));
	Запрос.УстановитьПараметр("ДатаНачала", ?(ЗначениеЗаполнено(ДатаНачала),ДатаНачала, '00010101'));
	Запрос.УстановитьПараметр("ДатаОкончания", ?(ЗначениеЗаполнено(ДатаОкончания),ДатаОкончания, '30010101'));                  
	СписокИД = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);	
	ИзмененияПоСсылкам = Новый Соответствие;
	Пока СписокИД.Следующий() Цикл
		МассивИзменений = Новый Массив;
		СписокИзменений = СписокИД.Выбрать();
		ТекущаяДатаИзменения = '00010101';
		ПоследнееИзменениеПоПериоду = Неопределено;
		Пока СписокИзменений.Следующий() Цикл
			Если ЗначениеЗаполнено(Author) И Не СписокИзменений.Автор = Author Тогда
				Продолжить;
			КонецЕсли;
			Если ЗначениеЗаполнено(Computer) И Не СписокИзменений.Компьютер = Computer Тогда
				Продолжить;
			КонецЕсли;
			Если PeriodStep="Все" Тогда
				НачалоТекущегоПериода=ТекущаяДатаИзменения+1;
			ИначеЕсли PeriodStep="День" Тогда
				НачалоТекущегоПериода = НачалоДня(СписокИзменений.ДатаИзменения);
			ИначеЕсли PeriodStep="Неделя" Тогда			
				НачалоТекущегоПериода = НачалоНедели(СписокИзменений.ДатаИзменения);
			ИначеЕсли PeriodStep="Месяц" Тогда
				НачалоТекущегоПериода = НачалоМесяца(СписокИзменений.ДатаИзменения);
			КонецЕсли;
			Если ЗначениеЗаполнено(ТекущаяДатаИзменения) Тогда
				Если Не НачалоТекущегоПериода=ТекущаяДатаИзменения Тогда
					МассивИзменений.Добавить(ПоследнееИзменениеПоПериоду);
				КонецЕсли;
			КонецЕсли;
			ПоследнееИзменениеПоПериоду = СписокИзменений.Изменение;
			ТекущаяДатаИзменения = НачалоТекущегоПериода;
		КонецЦикла;
		Если ЗначениеЗаполнено(ПоследнееИзменениеПоПериоду) Тогда
			МассивИзменений.Добавить(ПоследнееИзменениеПоПериоду);
		КонецЕсли;
		ИзмененияПоСсылкам.Вставить(СписокИД.ИДСсылки, МассивИзменений);
	КонецЦикла;
	ОтфильтрованныеИзменения = Новый Соответствие;
	ПрошлоеИзменение = Неопределено;
	Для каждого СсылкаИД Из ИзмененияПоСсылкам Цикл
		МассивОтфильтрованныхИзменений = Новый Массив;
		Для каждого Изменение Из СсылкаИД.Значение Цикл
			ТипСсылки = Изменение.ТипСсылки;
			ЗначенияПослеНеотфильтрованные = Изменение.ДанныеПослеИзменения.Получить();
			ЗначенияПослеОтфильтрованные = ЗначенияПослеНеотфильтрованные.СкопироватьКолонки();
			Для Каждого РеквизитПосле Из ЗначенияПослеНеотфильтрованные Цикл
				Если Не СписокРеквизитов.Найти(РеквизитПосле.Имя)=Неопределено Тогда
					НоваяСтрока = ЗначенияПослеОтфильтрованные.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, РеквизитПосле);
				КонецЕсли;
			КонецЦикла;
			Если ПрошлоеИзменение = Неопределено Тогда
				ЗначенияДоОтфильтрованные = ЗначенияПослеОтфильтрованные.СкопироватьКолонки();
			Иначе
				ЗначенияДоОтфильтрованные = ПрошлоеИзменение.ДанныеПослеИзменения;
			КонецЕсли;
			КонтейнерИзменения = Новый Структура;
			КонтейнерИзменения.Вставить("ДатаИзменения", Изменение.ДатаИзменения);
			КонтейнерИзменения.Вставить("ДанныеДоИзменения", ЗначенияДоОтфильтрованные);
			КонтейнерИзменения.Вставить("ДанныеПослеИзменения", ЗначенияПослеОтфильтрованные);
			КонтейнерИзменения.Вставить("Автор", Изменение.Автор);
			КонтейнерИзменения.Вставить("Компьютер", Изменение.Компьютер);
			МассивОтфильтрованныхИзменений.Добавить(КонтейнерИзменения);
			ПрошлоеИзменение=КонтейнерИзменения;
		КонецЦикла;
		ОтфильтрованныеИзменения.Вставить(СсылкаИД.Ключ, МассивОтфильтрованныхИзменений);
	КонецЦикла;
	Возврат ОтфильтрованныеИзменения;
КонецФункции

Функция ВыполнитьЗапросКБазеПоПравилуЧерезХранилище(ИмяПравила, ИмяБазы, Параметры) Экспорт
	//Если ТипЗнч(Параметры) = Тип("ОбъектXDTO") Тогда
	//	Параметры = СериализаторXDTO.ПрочитатьXDTO(Параметры);
	//КонецЕсли;
	//Для Каждого Параметр Из Параметры Цикл
	//	
	//КонецЦикла;	
	Если ТипЗнч(Параметры) = Тип("ОбъектXDTO") Тогда
		Parameters = Параметры;
	Иначе 
		Parameters = СериализаторXDTO.ЗаписатьXDTO(Параметры);
	КонецЕсли;
	Connector = NSI_МодульПовторногоИспользования.ПолучитьСоединениеПоИмениБазы(ИмяБазы);
	Если Connector = Неопределено Тогда
		Возврат "Не удалось подключить базу!" + ИмяБазы;
		//Возврат Неопределено;
	Иначе
		ПравилоОбмена = Справочники.NSI_ЗапросыДанных.НайтиПоНаименованию(ИмяПравила);
		Если ПравилоОбмена = Неопределено Тогда
			//Возврат Неопределено;
			Возврат "Не найдено правило обмена!";
		КонецЕсли;
		XDTOОтвет = Connector.RunQueryStorage(ПравилоОбмена.ТекстЗапроса, Parameters);
		Возврат XDTOОтвет;
		//ТаблицаДляПроверки.Загрузить(ТЗОтвет);
		// Тут надо доделать отображение проверки на экране
	КонецЕсли;		
КонецФункции

Функция ПолучитьПустуюСтруктуруОтвета() Экспорт
	СтруктураОтвета = Новый Структура;
	СтруктураОтвета.Вставить("IsErrors", Ложь);
	СтруктураОтвета.Вставить("ErrorDescription", "");
	СтруктураОтвета.Вставить("ReturnData", Новый ХранилищеЗначения(""));
	Возврат СтруктураОтвета;
КонецФункции

