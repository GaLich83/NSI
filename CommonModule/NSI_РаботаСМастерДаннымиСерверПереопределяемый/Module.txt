// Модуль предназначен для написания своих функций для работы с мастер-данными, 
// которые можно вызывать из справочников источников мастер-данных и т.д.
// Удаление всех функций данного модуля не приводит к проблемам в работе системы.

Функция ПолучениеДанныхКонтрагентаПоИННКПП(ИНН, КПП, ОбновлятьИзСервиса=Ложь) Экспорт
	ДеревоПоиска = NSI_РаботаСМастерДаннымиПоиск.СоздатьПустоеДеревоПоиска();
	КлючКонтрагента = Новый Соответствие;
	КлючКонтрагента.Вставить("ИНН", ИНН);
	КлючКонтрагента.Вставить("КПП", КПП);
	МДКонтрагент = NSI_РаботаСМастерДаннымиПоиск.НайтиМастерДанныеПоКлючу(КлючКонтрагента);
	ВидМастерДанных = Справочники.NSI_ВидыМД.НайтиПоНаименованию("Контрагенты");
	НовыйКонтрагент = МДКонтрагент = Неопределено;
	Если НовыйКонтрагент Тогда
		МДКонтрагентОбъект = Справочники.NSI_МастерДанные.СоздатьЭлемент();
		МДКонтрагент = Справочники.NSI_МастерДанные.ПолучитьСсылку(Новый УникальныйИдентификатор);
		МДКонтрагентОбъект.УстановитьСсылкуНового(МДКонтрагент);
		МДКонтрагентОбъект.Владелец = ВидМастерДанных;		
		МДКонтрагентОбъект.Записать();
	КонецЕсли;
	ДанныеКонтрагента = NSI_РаботаСМастерДаннымиСервер.ПолучитьТекущиеЗначенияПолей(МДКонтрагент, ТекущаяДата());
	Если НовыйКонтрагент ИЛИ ДанныеКонтрагента.ДатаПоследнейВерификацииДанных<ТекущаяДата()-7*24*60*60 Тогда
		Если СтрДлина(ИНН)=10 Тогда
			РеквизитыКонтрагента = ДанныеЕдиныхГосРеестров.РеквизитыЮридическогоЛицаПоИНН(ИНН);
			ПреобразоватьРеквизитыЮЛВМастерДанные(ДанныеКонтрагента, РеквизитыКонтрагента);
		Иначе
			РеквизитыКонтрагента = ДанныеЕдиныхГосРеестров.РеквизитыПредпринимателяПоИНН(ИНН);
			ПреобразоватьРеквизитыИПВМастерДанные(ДанныеКонтрагента, РеквизитыКонтрагента);
		КонецЕсли;
	КонецЕсли;
	//Если Не ЗначениеЗаполнено(ДанныеКонтрагента.MDM_ID) Тогда
	//	ДанныеКонтрагента.MDM_ID = ЗаписатьКонтрагентаВМДМ(ДанныеКонтрагента, ДанныеКонтрагента.MDM_ID);
	//КонецЕсли;
	ОписаниеПолей = NSI_РаботаСМастерДаннымиСерверПовторноеИспользование.ПолучитьОписаниеПолей("Контрагенты", Ложь);
	NSI_РаботаСМастерДаннымиСервер.ОбновитьЗначенияПолейИИндексыПослеЗаписи(МДКонтрагент, ОписаниеПолей, ДанныеКонтрагента);
	NSI_РаботаСМастерДаннымиСервер.ОбновитьХэшКлючевыхПолей(МДКонтрагент, ОписаниеПолей, ДанныеКонтрагента);
	МДКонтрагент.ПолучитьОбъект().Записать();
	Возврат МДКонтрагент;
КонецФункции

Функция ПреобразоватьРеквизитыЮЛВМастерДанные(ДанныеКонтрагента, РеквизитыКонтрагента)
	СоответствиеДанных = Новый Структура;
	СоответствиеДанных.Вставить("Наименование", РеквизитыКонтрагента.НаименованиеСокращенное);
	СоответствиеДанных.Вставить("НаименованиеПолное", РеквизитыКонтрагента.НаименованиеПолное);
	СоответствиеДанных.Вставить("ОрганизационноПравоваяФорма", РеквизитыКонтрагента.ПравоваяФорма);
	СоответствиеДанных.Вставить("ИНН", РеквизитыКонтрагента.ИНН);		
	СоответствиеДанных.Вставить("КПП", РеквизитыКонтрагента.КПП);		
	СоответствиеДанных.Вставить("ОКВЭД", РеквизитыКонтрагента.КодОКВЭД);		
	СоответствиеДанных.Вставить("ОГРН",РеквизитыКонтрагента.РегистрационныйНомер);
	СоответствиеДанных.Вставить("ОКТМО", РеквизитыКонтрагента.РегистрацияВНалоговомОргане.ОКТМО);
	СоответствиеДанных.Вставить("ОКАТО", РеквизитыКонтрагента.РегистрацияВНалоговомОргане.ОКАТО);
	СоответствиеДанных.Вставить("ДолжностьРуководителя", РеквизитыКонтрагента.Руководитель.Должность);
	СоответствиеДанных.Вставить("ЮридическийАдрес", РеквизитыКонтрагента.ЮридическийАдрес.Представление);
	СоответствиеДанных.Вставить("Телефон", РеквизитыКонтрагента.Телефон);
	СоответствиеДанных.Вставить("ДатаПоследнейВерификацииДанных", ТекущаяДата());             
	СоответствиеДанных.Вставить("Руководитель", );
	ЗаполнитьЗначенияСвойств(ДанныеКонтрагента, СоответствиеДанных);
КонецФункции

Функция ПреобразоватьРеквизитыИПВМастерДанные(ДанныеКонтрагента, РеквизитыКонтрагента)
	СоответствиеДанных = Новый Структура;
	СоответствиеДанных.Вставить("Наименование", РеквизитыКонтрагента.НаименованиеСокращенное);
	СоответствиеДанных.Вставить("НаименованиеПолное", РеквизитыКонтрагента.НаименованиеПолное);
	СоответствиеДанных.Вставить("ОрганизационноПравоваяФорма", "ИП");
	СоответствиеДанных.Вставить("ИНН", РеквизитыКонтрагента.ИНН);		
	СоответствиеДанных.Вставить("ОКВЭД", РеквизитыКонтрагента.КодОКВЭД);		
	СоответствиеДанных.Вставить("ОГРН",РеквизитыКонтрагента.РегистрационныйНомер);
	СоответствиеДанных.Вставить("ОКТМО", РеквизитыКонтрагента.РегистрацияВНалоговомОргане.ОКТМО);
	СоответствиеДанных.Вставить("ОКАТО", РеквизитыКонтрагента.РегистрацияВНалоговомОргане.ОКАТО);
	СоответствиеДанных.Вставить("ДатаПоследнейВерификацииДанных", ТекущаяДата());             
	ЗаполнитьЗначенияСвойств(ДанныеКонтрагента, СоответствиеДанных);
КонецФункции

Функция ПолучитьКонтрагентаВМДМ(ИНН, КПП)
	СтрокаОшибок = "";
	Command = NSI_РаботаСАДО.ПолучитьСоединение("Provider=OraOLEDB.Oracle;Password=MDM_API_GATE;User ID=SM_MDM_API_GATE;Data Source=KIS11DB.world;Persist Security Info=False;", СтрокаОшибок, Истина);
	ТекстКоманды = 
	"declare 
	|   v_view_name varchar2(100);
	|   ret_id_kd_contr varchar2(100);
	|   BEGIN
	|   PK_MDM_API_EDIT_ENTITY.authorize(a_user => '1C_kd_user',a_password => '1C_kd_user');   
	|   v_view_name:= pk_mdm_api_edit_entity.get_view4type('kd_contractor');
	//|   if kpp is null then kpp := ' is null '; else kpp := ' = '||''''||:kpp||''''; end if;
	//|   execute immediate 'select max(id_kd_contractor) from ''|| v_view_name ||'' t where t.inn=''||:inn||'' and t.kpp=''||:kpp||'''|| into :ret_id_kd_contr;
	|	END;";
	ДобавитьПараметрADODBConnection(Command, "inn", 200, 1, 100, "7731407563");
	ДобавитьПараметрADODBConnection(Command, "kpp", 200, 1, 100,"773101001");
	ДобавитьПараметрADODBConnection(Command, "ret_id_kd_contr", 3, 3, 5, 5);
	Попытка
		Ответ = NSI_РаботаСАДО.ВыполнитьЗапросИзСуществующегоПодключения(Command, "SELECT * FROM SM_META.V_AUTO_KD_CONTRACTOR WHERE INN='"+ИНН+"' AND KPP='"+КПП+"'",ТекстКоманды,СтрокаОшибок);
		Если ЗначениеЗаполнено(СтрокаОшибок) Тогда
			ВызватьИсключение СтрокаОшибок;
		КонецЕсли;
	Исключение
		ВызватьИсключение ОписаниеОшибки();
	КонецПопытки;
	Возврат СтрЗаменить(СокрЛП(Command.Parameters.Item("ret_id_kd_contr").Value),Символы.НПП,"");
КонецФункции

Функция ЗаписатьКонтрагентаВМДМ(Контрагент,ID_MDM_Kontragent = Неопределено)
	
	ID_MDM_Kontragent = ПолучитьКонтрагентаВМДМ(Контрагент.ИНН, Контрагент.КПП);
	Если ЗначениеЗаполнено(ID_MDM_Kontragent) Тогда
		Возврат ID_MDM_Kontragent;
	КонецЕсли;
	
	СтрокаОшибок = "";
	Command = NSI_РаботаСАДО.ПолучитьСоединение("Provider=OraOLEDB.Oracle;Password=MDM_API_GATE;User ID=SM_MDM_API_GATE;Data Source=KIS11DB.world;Persist Security Info=False;", СтрокаОшибок, Истина);
	
	ОчиститьВсеПараметрыADODBConnection(Command);
	
	ТекстКоманды = "DECLARE  
	| mdm_id Numeric;   
	|BEGIN  
	|PK_MDM_API_EDIT_ENTITY.authorize(a_user => '1C_kd_user',a_password => '1C_kd_user');";
	Command.CommandText = ТекстКоманды;
	Если Не ЗначениеЗаполнено(ID_MDM_Kontragent) Тогда
		ТекстКоманды = ТекстКоманды + "
		|PK_MDM_API_EDIT_ENTITY.NEW(a_type => 'kd_contractor');";
	Иначе
		ТекстКоманды = ТекстКоманды + "
		|PK_MDM_API_EDIT_ENTITY.CHANGE(a_type => 'kd_contractor',a_key => :id_kd_contractor);";
		ДобавитьПараметрADODBConnection(Command, "id_kd_contractor", 131, 1, 15, СокрЛП(ID_MDM_Kontragent));
	КонецЕсли;
	ТекстКоманды = ТекстКоманды + "
	//|PK_MDM_API_EDIT_ENTITY.set_value('e_contractor_type', :e_contractor_type);
	|PK_MDM_API_EDIT_ENTITY.set_value('e_ownership_type', :e_ownership_type);
	|PK_MDM_API_EDIT_ENTITY.set_value('corporation_form', :corporation_form);
	|PK_MDM_API_EDIT_ENTITY.set_value('short_name', :short_name); 
	|PK_MDM_API_EDIT_ENTITY.set_value('full_name' , :full_name);    
	|PK_MDM_API_EDIT_ENTITY.set_value('inn', :inn);
	|";
	
	//ДобавитьПараметрADODBConnection(Command, "e_contractor_type", 129, 1, 10, ?(СтрДлина(Контрагент.ИНН) = 10, "'UrLico'","'FizLico'"));
	ДобавитьПараметрADODBConnection(Command, "e_ownership_type", 129, 1, 10, "1C_type");
	ДобавитьПараметрADODBConnection(Command, "corporation_form", 129, 1, 10, "1C_korp");
	ДобавитьПараметрADODBConnection(Command, "short_name", 129, 1, 100, СокрЛП(Контрагент.Наименование));
	ДобавитьПараметрADODBConnection(Command, "full_name", 129, 1, 150, СокрЛП(Контрагент.НаименованиеПолное));
	ДобавитьПараметрADODBConnection(Command, "inn", 129, 1, 12, ?(СокрЛП(Контрагент.ИНН) = "", "NULL", СокрЛП(Контрагент.ИНН)));

	Если Не ЗначениеЗаполнено(ID_MDM_Kontragent) Тогда
		ДобавитьПараметрADODBConnection(Command, "mdm_id", 131, 3, 15, 0);
		ТекстКоманды = ТекстКоманды + "
		|:mdm_id:=PK_MDM_API_EDIT_ENTITY.done();
		|Commit;
		|END;";
	Иначе
		ТекстКоманды = ТекстКоманды + "
		|PK_MDM_API_EDIT_ENTITY.done();
		|Commit;
		|END;";
	КонецЕсли;  
	
	Попытка
		ТЗ_Запроса = ВыполнитьЗапросИзСуществующегоПодключения(Command,"",ТекстКоманды);
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	
	Если Не ЗначениеЗаполнено(ID_MDM_Kontragent) Тогда
		ID_MDM_Kontragent = СтрЗаменить(СокрЛП(Command.Parameters.Item("mdm_id").Value),Символы.НПП,"");
	КонецЕсли;
	
	ОчиститьВсеПараметрыADODBConnection(Command);
	
	Если ЗначениеЗаполнено(СтрокаОшибок) Тогда
		ВызватьИсключение СтрокаОшибок;
	КонецЕсли;
	
	Command.ActiveConnection.CommitTrans();
	
	Возврат ID_MDM_Kontragent;
	
КонецФункции


Функция ЗаписатьДоговорВМДМ(Договор,ID_MDM_Kontragent,ID_MDM_Dogovor = Неопределено,ID_MDM_Organization,Command)
	
	СозданиеНовойСущностиВМДМ = Ложь;
	ТекстКомманды = "DECLARE  
	|id_currency Numeric;   
    |v_view_name_currency varchar2(100);
	|BEGIN  
	|PK_MDM_API_EDIT_ENTITY.authorize(a_user => '1C_kd_user',a_password => '1C_kd_user');";   
	Command.CommandText = ТекстКомманды;
	Если ID_MDM_Dogovor = Неопределено Тогда
		ТекстКомманды = ТекстКомманды + "
		|PK_MDM_API_EDIT_ENTITY.NEW(a_type => 'kd_contract');";
		СозданиеНовойСущностиВМДМ = Истина;
	Иначе
		ТекстКомманды = ТекстКомманды + "
		|PK_MDM_API_EDIT_ENTITY.CHANGE(a_type => 'kd_contract',a_key => :id_kd_contract);";
		ДобавитьПараметрADODBConnection(Command, "id_kd_contract", 131, 1, 15, СокрЛП(ID_MDM_Dogovor));
	КонецЕсли;
	ТекстКомманды = ТекстКомманды + "
	|PK_MDM_API_EDIT_ENTITY.set_value('dt_contract', :dt_contract);	
	|v_view_name_currency := pk_mdm_api_edit_entity.get_view4type('currency');
    |execute immediate 'select t.id_currency from '|| v_view_name_currency || ' t where t.analytics_image= :v_name_currency' into id_currency using :name_currency;
	|PK_MDM_API_EDIT_ENTITY.set_value('id_currency' , id_currency);
	|PK_MDM_API_EDIT_ENTITY.set_value('contract_num', :contract_num);
	|PK_MDM_API_EDIT_ENTITY.set_value('e_contract_type', 'supp_contr');
	|";
	
	ДобавитьПараметрADODBConnection(Command, "dt_contract", 7, 1, 9, Договор.Дата);   
	ДобавитьПараметрADODBConnection(Command, "name_currency", 129, 1, 10, ?(Договор.ВалютаВзаиморасчетов.Наименование = "RUB", "RUR", Договор.ВалютаВзаиморасчетов.Наименование));
	ДобавитьПараметрADODBConnection(Command, "contract_num", 129, 1, 30, СокрЛП(Договор.Номер));
	
	Если Не ЗначениеЗаполнено(ID_MDM_Dogovor) Тогда 
		ДобавитьПараметрADODBConnection(Command, "ret_l_id_d", 131, 3, 15, 0);
		ТекстКомманды = ТекстКомманды + "
		|:ret_l_id_d := PK_MDM_API_EDIT_ENTITY.done();
		|Commit;
		|END;";
	Иначе
		ТекстКомманды = ТекстКомманды + "
		|PK_MDM_API_EDIT_ENTITY.done();
		|Commit;
		|END;";
	КонецЕсли;
	
	Попытка
		ТЗ_Запроса = ВыполнитьЗапросИзСуществующегоПодключения(Command,"",ТекстКомманды);
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	
	Если ID_MDM_Dogovor = Неопределено Тогда
		ID_MDM_Dogovor = СтрЗаменить(СокрЛП(Command.Parameters.Item("ret_l_id_d").Value),Символы.НПП,"");
	КонецЕсли;
	
	Если ID_MDM_Dogovor <> Неопределено И СозданиеНовойСущностиВМДМ Тогда
		
		
		ТекстКомманды = "BEGIN
		|PK_MDM_API_EDIT_ENTITY.authorize(a_user => '1C_kd_user',a_password => '1C_kd_user'); 
        |PK_MDM_API_EDIT_ENTITY.NEW(a_type => 'kd_contr_contractor');
		|PK_MDM_API_EDIT_ENTITY.set_value('id_kd_contract', :id_kd_contract);
		|PK_MDM_API_EDIT_ENTITY.set_value('id_kd_contractor', :id_kd_contractor);
		|PK_MDM_API_EDIT_ENTITY.set_value('e_relation_type', :e_relation_type);
		|PK_MDM_API_EDIT_ENTITY.done();
		|Commit;
		|END;";
		
		Command.CommandText = ТекстКомманды;  
		ОчиститьВсеПараметрыADODBConnection(Command);
		ДобавитьПараметрADODBConnection(Command, "id_kd_contract", 131, 1, 15, СокрЛП(ID_MDM_Dogovor));
	    ДобавитьПараметрADODBConnection(Command, "id_kd_contractor", 131, 1, 15, СокрЛП(ID_MDM_Kontragent));
        ДобавитьПараметрADODBConnection(Command, "e_relation_type", 129, 1, 10, "contragent");
		
		Попытка
			ТЗ_Запроса = ВыполнитьЗапросИзСуществующегоПодключения(Command,"",ТекстКомманды);
		Исключение
			Сообщить(ОписаниеОшибки());
		КонецПопытки;
		
		ТекстКомманды = "BEGIN
		|PK_MDM_API_EDIT_ENTITY.authorize(a_user => '1C_kd_user',a_password => '1C_kd_user');
		|PK_MDM_API_EDIT_ENTITY.NEW(a_type => 'kd_contr_contractor');
		|PK_MDM_API_EDIT_ENTITY.set_value('id_kd_contract', :id_kd_contract);
		|PK_MDM_API_EDIT_ENTITY.set_value('id_kd_contractor', :id_kd_contractor);
		|PK_MDM_API_EDIT_ENTITY.set_value('e_relation_type', :e_relation_type);
		|PK_MDM_API_EDIT_ENTITY.done();
		|Commit;
		|END;";
		Command.CommandText = ТекстКомманды;
		ОчиститьВсеПараметрыADODBConnection(Command);
	    ДобавитьПараметрADODBConnection(Command, "id_kd_contract", 131, 1, 15, СокрЛП(ID_MDM_Dogovor));
	    ДобавитьПараметрADODBConnection(Command, "id_kd_contractor", 131, 1, 15, СокрЛП(ID_MDM_Organization));
		ДобавитьПараметрADODBConnection(Command, "e_relation_type", 129, 1, 10, "owner");
		Попытка
			ТЗ_Запроса = ВыполнитьЗапросИзСуществующегоПодключения(Command,"",ТекстКомманды);
		Исключение
			Сообщить(ОписаниеОшибки());
		КонецПопытки;
		ОчиститьВсеПараметрыADODBConnection(Command);
	КонецЕсли;
	
	Возврат ID_MDM_Dogovor;
	
КонецФункции


Процедура _ПередУдалениемКонтрагентаДоговораMDM(Источник, Отказ) Экспорт
	
	Перем Connection;
	СтрокаПодключения = "Provider=OraOLEDB.Oracle;Password=MDM_API_GATE;User ID=SM_MDM_API_GATE;Data Source=kis11tst.world;Persist Security Info=False;";	
	Connection = Новый COMОбъект("ADODB.Connection");
	Connection.ConnectionString = СтрокаПодключения; //"driver={SQL Server};server=MyServer;uid=MyLogin;pwd=MyPassword;database=MyDatabase"; 
	Connection.ConnectionTimeout = 15; 
	Connection.CursorLocation= 3; 
	Connection.Open();
	Connection.BeginTrans();
	Command = Новый COMОбъект("ADODB.Command");
	Command.ActiveConnection = Connection;
	Если Источник.Метаданные().Имя = "ДоговорыКонтрагентов" Тогда
		Есть_ID_MDM_Dogovor = Ложь;
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	_ВнешниеДоговорыКонтрагенты.Договор,
		|	_ВнешниеДоговорыКонтрагенты.Контрагент,
		|	_ВнешниеДоговорыКонтрагенты.ID_MDM_Kontragent,
		|	_ВнешниеДоговорыКонтрагенты.ID_MDM_Dogovor
		|ИЗ
		|	РегистрСведений._ВнешниеДоговорыКонтрагенты КАК _ВнешниеДоговорыКонтрагенты
		|ГДЕ
		|	_ВнешниеДоговорыКонтрагенты.Договор = &Договор";
		Запрос.Параметры.Вставить("Договор", Источник.Ссылка);
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			Если Выборка.ID_MDM_Dogovor <> "" Тогда
				Есть_ID_MDM_Dogovor = Истина;
				ID_MDM_Dogovor = Выборка.ID_MDM_Dogovor;
				Прервать;  //Договор имеет ID_MDM_Dogovor и перезапись в регистре не требуется
			КонецЕсли;
		КонецЦикла;
		
		Если Есть_ID_MDM_Dogovor Тогда
			ID_MDM_Dogovor = УдалитьДоговорВМДМ(ID_MDM_Dogovor,Command);
		КонецЕсли;
		
	ИначеЕсли Источник.Метаданные().Имя = "Контрагенты" Или Источник.Метаданные().Имя = "Организации" Тогда
		
		Есть_ID_MDM_Kontragent = Ложь;
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	_ВнешниеДоговорыКонтрагенты.Договор,
		|	_ВнешниеДоговорыКонтрагенты.Контрагент,
		|	_ВнешниеДоговорыКонтрагенты.ID_MDM_Kontragent,
		|	_ВнешниеДоговорыКонтрагенты.ID_MDM_Dogovor
		|ИЗ
		|	РегистрСведений._ВнешниеДоговорыКонтрагенты КАК _ВнешниеДоговорыКонтрагенты
		|ГДЕ
		|	_ВнешниеДоговорыКонтрагенты.Контрагент = &Контрагент";
		Запрос.Параметры.Вставить("Контрагент", Источник.Ссылка);
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			Если Выборка.ID_MDM_Kontragent <> "" Тогда
				Есть_ID_MDM_Kontragent = Истина;
				ID_MDM_Kontragent = Выборка.ID_MDM_Kontragent;
				Прервать;  //Контрагент имеет ID_MDM_Kontragent и перезапись в регистре не требуется
			КонецЕсли;
		КонецЦикла;	
		
		Если Есть_ID_MDM_Kontragent Тогда
			ID_MDM_Kontragent = УдалитьКонтрагентаВМДМ(ID_MDM_Kontragent,Command);
		КонецЕсли;
		
	КонецЕсли;
	
	Connection.CommitTrans();
	
КонецПроцедуры


Функция УдалитьДоговорВМДМ(ID_MDM_Dogovor,Command)
	
	ТекстКомманды = "BEGIN
	|PK_MDM_API_EDIT_ENTITY.authorize(a_user => '1C_kd_user',a_password => '1C_kd_user'); 
	|PK_MDM_API_EDIT_ENTITY.DEL(a_type => 'kd_contract', a_key => '" + ID_MDM_Dogovor + "');
	|end;";
	
	Попытка
		ТЗ_Запроса = ВыполнитьЗапросИзСуществующегоПодключения(Command,"",ТекстКомманды);
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	
	Возврат ID_MDM_Dogovor;
	
КонецФункции


Функция УдалитьКонтрагентаВМДМ(ID_MDM_Kontragent,Command)
	
	ТекстКомманды = "BEGIN
	|PK_MDM_API_EDIT_ENTITY.authorize(a_user => '1C_kd_user',a_password => '1C_kd_user'); 
	|PK_MDM_API_EDIT_ENTITY.DEL(a_type => 'kd_contractor', a_key => '" + ID_MDM_Kontragent + "');
	|end;";
	
	Попытка
		ТЗ_Запроса = ВыполнитьЗапросИзСуществующегоПодключения(Command,"",ТекстКомманды);
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	
	Возврат ID_MDM_Kontragent;
	
КонецФункции


Функция ВыполнитьЗапросИзСуществующегоПодключения(OraDatabase,ТекстЗапроса,ТекстКоманды="",СтрокаОшибок="") Экспорт
	Если ТекстКоманды<>"" Тогда
		Попытка
			OraDatabase.CommandText=ТекстКоманды;
			Выборка=OraDatabase.Execute();
		исключение	
			//СтрокаОшибок=СтрокаОшибок+Символы.ПС+"ВыполнитьКоманду.Ошибка выполнения:"+ОписаниеОшибки();
			//СтрокаОшибок = СтрокаОшибок + Символы.ПС + "ТекстЗапроса:" + Символы.ПС + ТекстКоманды;
			//СообщениеОбОшибке = Новый СообщениеПользователю;
			//СообщениеОбОшибке.Текст = СтрокаОшибок;
			//СообщениеОбОшибке.Сообщить();
			Сообщить(ОписаниеОшибки());
			возврат Ложь;
		конецпопытки;	
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ТекстЗапроса) Тогда
		Возврат Истина;
	КонецЕсли;
	Попытка
		OraDatabase.CommandText=ТекстЗапроса;
		Выборка=OraDatabase.Execute();
	исключение	
		СтрокаОшибок=СтрокаОшибок+Символы.ПС+"ВыполнитьЗапрос.Ошибка выполнения:"+ОписаниеОшибки();
		СтрокаОшибок = СтрокаОшибок + Символы.ПС + "ТекстЗапроса:" + Символы.ПС + ТекстЗапроса;
		СообщениеОбОшибке = Новый СообщениеПользователю;
		СообщениеОбОшибке.Текст = СтрокаОшибок;
		СообщениеОбОшибке.Сообщить();
		возврат Ложь;
	конецпопытки;
	Если Выборка.EOF Тогда//Запрос пустой!
		СтрокаОшибок = НСтр("ru = 'Результат пустой!'; en = 'The result is empty!'");
		СообщениеОбОшибке = Новый СообщениеПользователю;
		СообщениеОбОшибке.Текст = СтрокаОшибок;
		СообщениеОбОшибке.Сообщить();
		Возврат Неопределено;//Если результат пустой - вернем "Неопределено"
	КонецЕсли;
	попытка
		Поля=Выборка.Fields;
		КолКолонок=Поля.Count;
		пТЗ=Новый ТаблицаЗначений();
		Для ш=0 по КолКолонок-1 цикл
			Поле=Поля.Item(ш);
			Если Поле.Type=131 тогда//число
				пТЗ.Колонки.Добавить(Поле.Name,Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(Поле.DefinedSize,Поле.NumericScale)));
			ИначеЕсли Поле.Type=135 тогда//дата
				пТЗ.Колонки.Добавить(Поле.Name,Новый ОписаниеТипов("Дата",,,Новый КвалификаторыДаты()));
			ИначеЕсли Поле.Type=139 тогда//число
				пТочность=Поле.NumericScale;
				пТочность=?(пТочность=255,8,пТочность);
				пТЗ.Колонки.Добавить(Поле.Name,Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(Поле.DefinedSize,пТочность)));	
			Иначе	
				пТЗ.Колонки.Добавить(Поле.Name,Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(250)));
			КонецЕсли;	
		КонецЦикла;	
		МассДанныхКом=Новый COMSafeArray(Выборка.GetRows());
		Выборка.Close();
		МассДанных=МассДанныхКом.Выгрузить();
		Для каждого СтрМасс из МассДанных цикл
			СтрТЗ=пТЗ.Добавить();
			Для ш=0 по пТЗ.Колонки.Количество()-1 цикл
				СтрТЗ[ш]=СтрМасс[ш];
			КонецЦикла;	
		КонецЦикла;	
	исключение
		СтрокаОшибок=СтрокаОшибок+Символы.ПС+"IM_RecordSet2ТЗ.Ошибка выполнения:"+ОписаниеОшибки();
		СтрокаОшибок = СтрокаОшибок + Символы.ПС + "ТекстЗапроса:" + Символы.ПС + ТекстЗапроса;
		СообщениеОбОшибке = Новый СообщениеПользователю;
		СообщениеОбОшибке.Текст = СтрокаОшибок;
		СообщениеОбОшибке.Сообщить();
		возврат Ложь;
	конецпопытки;	
	возврат пТЗ;
КонецФункции


Процедура ОчиститьВсеПараметрыADODBConnection(OraDatabase) Экспорт
	Попытка
		Если OraDatabase.Parameters.Count = 0 Тогда
			Возврат;
		КонецЕсли;
	Исключение
		Возврат;
	КонецПопытки;
	Для л_ИндексПараметра = -(OraDatabase.Parameters.Count-1) по 0 Цикл
		OraDatabase.Parameters.Delete(-л_ИндексПараметра);
	КонецЦикла;
КонецПроцедуры


Процедура ДобавитьПараметрADODBConnection(OraDatabase, Name, Type, Direction, Size, Value) Экспорт
	
	//Таблица параметров должна содержать следующие поля 
	//•Name - наименование
	//•Type - тип параметра
	//•Direction - целое число (long), "направление" параметра. Возможные значения: ◦adParamUnknown(0) - направление параметра неизвестно.
	//◦adParamInput(1) - по умолчанию, входной параметр.
	//◦adParamOutput(2) - выходной параметр.
	//◦adParamInputOutput(3) - параметр представляет собой и входной, и выходной параметр
	//◦adParamReturnValue(4) - параметр представляет собой возвращаемое значение.
	//•Size - целое число (long), максимальная длина параметра в символах или байтах.
	//•Value - Variant, значение параметра.
	
	СозданныйПараметр = OraDatabase.CreateParameter(Name, Type, Direction, Size, Value);	
	OraDatabase.Parameters.Append(СозданныйПараметр);

КонецПроцедуры


