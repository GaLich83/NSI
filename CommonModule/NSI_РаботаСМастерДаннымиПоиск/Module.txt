Функция ПолучитьДеревоУсловийСВесамиУсловийПоиска(ВидМастерДанных, СтруктураПоискаXDTO)
	УсловияПоиска = СтруктураПоискаXDTO.ПолучитьСписок("ConditionsOfSearch");
	ДеревоЗначений = Новый ДеревоЗначений;
	ДеревоЗначений.Колонки.Добавить("Поле");
	ДеревоЗначений.Колонки.Добавить("Условие");
	ДеревоЗначений.Колонки.Добавить("ЗначенияПоиска");
	ДеревоЗначений.Колонки.Добавить("ГруппаУсловий");
	ДеревоЗначений.Колонки.Добавить("Периодическое");
	ДеревоЗначений.Колонки.Добавить("СтрокаПоля");
	ДеревоЗначений.Колонки.Добавить("СтрокаУсловия");
	ДеревоЗначений.Колонки.Добавить("Вес");
	ОписаниеПолей = NSI_РаботаСМастерДаннымиСерверПовторноеИспользование.ПолучитьОписаниеПолей(ВидМастерДанных);
	Для Каждого ПервоеУсловие Из УсловияПоиска Цикл
		Ветка = ДеревоЗначений.Строки.Добавить();
		РазобратьВеткуДерева(ОписаниеПолей, Ветка, ПервоеУсловие);
	КонецЦикла;
	Возврат ДеревоЗначений;
КонецФункции

Функция РазобратьВеткуДерева(ОписаниеПолей, ВеткаДерева, ВеткаУсловий)
	ГруппаУсловий = ВеткаУсловий.ПолучитьXDTO("GroupOfCondition");
	Если ГруппаУсловий=Неопределено Тогда
		ВеткаДерева.Поле = ВеткаУсловий.ПолучитьXDTO("Field").Значение;
		ВеткаДерева.Условие = ВеткаУсловий.ПолучитьXDTO("Condition").Значение;
		ВеткаДерева.ЗначенияПоиска = ВеткаУсловий.ПолучитьСписок("SearchValues")[0];
		ОписаниеПоля = ОписаниеПолей.Найти(ВеткаУсловий.Field, "ИмяПоля");
		Если ОписаниеПоля=Неопределено Тогда
			ВызватьИсключение "Не найдено поле для условия";
		КонецЕсли;
		ВеткаДерева.Вес = ПолучитьВесПоля(ОписаниеПоля, ВеткаУсловий.Field, ВеткаУсловий.Condition);
		ВеткаДерева.Периодическое = ОписаниеПоля.Периодическое;
		ВеткаДерева.СтрокаПоля = ПолучитьЗапросЗначенияПоля(ОписаниеПоля.ТипПоля);
		Если ВеткаУсловий.Condition = "EQUAL" Тогда
			ВеткаДерева.СтрокаУсловия = "Хэш = """+NSI_РаботаСМастерДаннымиСервер.ПолучитьХэшИндексаПоля(ВеткаДерева.Поле, ВеткаДерева.ЗначенияПоиска)+"""";
		ИначеЕсли ВеткаУсловий.Condition = "NOTEQUAL" Тогда
			ВеткаДерева.СтрокаУсловия = "Не ("+ВеткаДерева.СтрокаПоля+" = &ЗначенияПоиска)";
		ИначеЕсли ВеткаУсловий.Condition = "LESS" Тогда
			ВеткаДерева.СтрокаУсловия = ВеткаДерева.СтрокаПоля+" < &ЗначенияПоиска";
		ИначеЕсли ВеткаУсловий.Condition = "MORE" Тогда
			ВеткаДерева.СтрокаУсловия = ВеткаДерева.СтрокаПоля+" > &ЗначенияПоиска";
		ИначеЕсли ВеткаУсловий.Condition = "MOREOREQUAL" Тогда
			ВеткаДерева.СтрокаУсловия = ВеткаДерева.СтрокаПоля+" >= &ЗначенияПоиска";
		ИначеЕсли ВеткаУсловий.Condition = "LESSOREQUAL" Тогда
			ВеткаДерева.СтрокаУсловия = ВеткаДерева.СтрокаПоля+" <= &ЗначенияПоиска";
		ИначеЕсли ВеткаУсловий.Condition = "LIKE" Тогда
			ВеткаДерева.СтрокаУсловия = ВеткаДерева.СтрокаПоля+" ПОДОБНО ""%""+&ЗначенияПоиска+""%""";
		ИначеЕсли ВеткаУсловий.Condition = "INLIST" Тогда
			ВеткаДерева.СтрокаУсловия = ВеткаДерева.СтрокаПоля+" В (&ЗначенияПоиска)";
		ИначеЕсли ВеткаУсловий.Condition = "INGROUP" Тогда
			ВеткаДерева.СтрокаУсловия = ВеткаДерева.СтрокаПоля+" В ИЕРАРХИИ (&ЗначенияПоиска)";
		Иначе
			ВызватьИсключение "Недопустимое условие поиска";
		КонецЕсли;
		Возврат ВеткаДерева.Вес;
	Иначе
		ВеткаДерева.ГруппаУсловий = ГруппаУсловий.Значение;           
		ВесГруппы = 0;
		Для Каждого СтрокаУсловия Из ВеткаУсловий.ПолучитьСписок("ConditionStrings") Цикл
			ВеткаГруппы = ВеткаДерева.Строки.Добавить();
			ВесГруппы = Макс(ВесГруппы, РазобратьВеткуДерева(ОписаниеПолей, ВеткаГруппы, СтрокаУсловия));
		КонецЦикла;
		ВеткаДерева.Вес = ВесГруппы*10;
		Возврат ВеткаДерева.Вес;
	КонецЕсли;
КонецФункции

Функция ПолучитьЗапросЗначенияПоля(ТипПоля)
	ОписаниеТипаПоля = NSI_РаботаСМастерДаннымиСервер.ПрочитатьОбъектИзXML(ТипПоля);
	Если ОписаниеТипаПоля.Типы().Количество()>1 Тогда		
		ТекстПоля = "ВЫБОР ";
		Для Каждого ВозможныйТипПоля Из ОписаниеТипаПоля.Типы() Цикл
			Если ВозможныйТипПоля = Тип("Строка") Тогда
				ТекстПоля = ТекстПоля + " КОГДА НЕ Регистр.ЗначениеСтрока = """" ТОГДА Регистр.ЗначениеСтрока ";
			ИначеЕсли ВозможныйТипПоля = Тип("Дата") Тогда
				ТекстПоля = ТекстПоля + " КОГДА НЕ Регистр.ЗначениеДата = ДАТАВРЕМЯ(1,1,1) ТОГДА Регистр.ЗначениеДата ";
			ИначеЕсли ВозможныйТипПоля = Тип("Булево") Тогда
				ТекстПоля = ТекстПоля + " КОГДА НЕ Регистр.ЗначениеДата = Ложь ТОГДА Регистр.ЗначениеБулево ";
			ИначеЕсли ВозможныйТипПоля = Тип("Число") Тогда
				ТекстПоля = ТекстПоля + " КОГДА НЕ Регистр.ЗначениеДата = 0 ТОГДА Регистр.ЗначениеЧисло ";
			Иначе
				ТекстПоля = ТекстПоля + " КОГДА НЕ Регистр.ЗначениеСсылка=Неопределено ТОГДА Регистр.ЗначениеСсылка ";
			КонецЕсли;
			ТекстПоля = ТекстПоля + " ИНАЧЕ Неопределено КОНЕЦ ";
		КонецЦикла;
	Иначе
		ТекстПоля = "";
		Для Каждого ВозможныйТипПоля Из ОписаниеТипаПоля.Типы() Цикл
			Если ВозможныйТипПоля = Тип("Строка") Тогда
				ТекстПоля = ТекстПоля + " Регистр.ЗначениеСтрока ";
			ИначеЕсли ВозможныйТипПоля = Тип("Дата") Тогда
				ТекстПоля = ТекстПоля + " Регистр.ЗначениеДата ";
			ИначеЕсли ВозможныйТипПоля = Тип("Булево") Тогда
				ТекстПоля = ТекстПоля + " Регистр.ЗначениеБулево ";
			ИначеЕсли ВозможныйТипПоля = Тип("Число") Тогда
				ТекстПоля = ТекстПоля + " Регистр.ЗначениеЧисло ";
			Иначе
				ТекстПоля = ТекстПоля + " Регистр.ЗначениеСсылка ";
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	ТекстПоля = ТекстПоля + " КАК ЗначениеПоля ";
	Возврат ТекстПоля;                                   
КонецФункции


Функция ПолучитьВесПоля(ОписаниеПоля, ИмяПоля, Условие)	
	Если ОписаниеПоля=Неопределено Тогда
		Возврат 0;
	КонецЕсли;
	Вес = 1 + ?(ОписаниеПоля.Периодическое, 2,0) + ?(Не Условие = "Равно", 4, 0);
	Возврат Вес;
КонецФункции

Функция НайтиДанныеПоУсловиюXDTO(ИмяВидаМастерДанных, ЗапросПоискаXDTO) Экспорт
	ВидМастерДанных = Справочники.NSI_ВидыМД.НайтиПоНаименованию(ИмяВидаМастерДанных, Истина);
	Если Не ЗначениеЗаполнено(ВидМастерДанных) Тогда
		ВызватьИсключение "Неправильно указан вид мастер-данных";
	КонецЕсли;
	ДеревоПоиска = ПолучитьДеревоУсловийСВесамиУсловийПоиска(ВидМастерДанных, ЗапросПоискаXDTO);
	Ответ = СформироватьОтветПоСпискуМастерДанных(ВыполнитьЗапросКМастерДаннымПоДереву(ВидМастерДанных, ДеревоПоиска, Истина, ЗапросПоискаXDTO.DateOfFind));
	Возврат Ответ;
КонецФункции

Функция ВыполнитьЗапросКМастерДаннымПоДереву(ВидМастерДанных, ДеревоПоиска, ПервыйЗапрос = Истина, ДатаПоиска = Неопределено)
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Если ПервыйЗапрос Тогда
		// Получаем во временную таблицу таблицу ссылок на все данные
		ЗапросВсехСсылок = Новый Запрос("ВЫБРАТЬ
		                                |	NSI_МастерДанные.Ссылка
		                                |ПОМЕСТИТЬ ОсновнаяТаблицаМастерДанных
		                                |ИЗ
		                                |	Справочник.NSI_МастерДанные КАК NSI_МастерДанные
		                                |ГДЕ
		                                |	NSI_МастерДанные.Владелец = &ВидМастерДанных");
		ЗапросВсехСсылок.УстановитьПараметр("ВидМастерДанных", ВидМастерДанных);
		ЗапросВсехСсылок.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		ЗапросВсехСсылок.Выполнить();
	КонецЕсли;
	// Дальше бежим по дереву с сохранением промежуточных результатов
	ВидГруппы = "И";
	// Если дерево поиска пустое - выдаем весь набор мастер-данных
	Если ДеревоПоиска.Строки.Количество()=0 Тогда
		ЗапросДляВыдачи = Новый Запрос("ВЫБРАТЬ * ИЗ ОсновнаяТаблицаМастерДанных");
		Возврат ЗапросДляВыдачи.Выполнить().Выгрузить();
	КонецЕсли;
	ПерваяСтрокаУсловия = ДеревоПоиска.Строки[0];
	УсловиеГруппировки = "И";
	ЗапросПромежуточнойТаблицы = Новый Запрос("ВЫБРАТЬ * ПОМЕСТИТЬ ПромежуточнаяТаблицаСсылок1 ИЗ ОсновнаяТаблицаМастерДанных");
	ЗапросПромежуточнойТаблицы.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	ЗапросПромежуточнойТаблицы.Выполнить();
	ЕстьДанные = ОтобратьМастерДанныеПоУсловиям(МенеджерВременныхТаблиц, УсловиеГруппировки, ДеревоПоиска, ДатаПоиска);
	Ответ = Новый Запрос("ВЫБРАТЬ Ссылка ИЗ ПромежуточнаяТаблицаСсылок1");
	Ответ.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Возврат Ответ.Выполнить().Выгрузить();
КонецФункции

Функция ОтобратьМастерДанныеПоУсловиям(МенеджерВременныхТаблиц, УсловиеГруппировки, ВеткаДерева, ДатаПоиска, ПостфиксВременнойТаблицы = 1)
	Если ВеткаДерева.Строки.Количество()=0 Тогда
		ПустойРезультат = Ложь;
		ТекстЗапросаОтбора = СформироватьЗапросПоСтрокеДерева(ВеткаДерева, ПустойРезультат, УсловиеГруппировки, ДатаПоиска, ПостфиксВременнойТаблицы);
		ЗапросОтбора = Новый Запрос(ТекстЗапросаОтбора);
		ЗапросОтбора.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		ЗапросОтбора.УстановитьПараметр("ЗначениеПоиска", ВеткаДерева.ЗначенияПоиска);
		ЗапросОтбора.УстановитьПараметр("ДатаПоиска", ДатаПоиска);
		ЗапросОтбора.Выполнить();
		ЗапросПеремещения = Новый Запрос("УНИЧТОЖИТЬ ПромежуточнаяТаблицаСсылок"+Формат(ПостфиксВременнойТаблицы, "ЧГ=0")+"; ВЫБРАТЬ * ПОМЕСТИТЬ ПромежуточнаяТаблицаСсылок"+Формат(ПостфиксВременнойТаблицы, "ЧГ=0")+" ИЗ ТаблицаРезультата; УНИЧТОЖИТЬ ТаблицаРезультата;");
		ЗапросПеремещения.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		ЗапросПеремещения.ВыполнитьПакет();
	Иначе
		ТекущееУсловиеГруппировки = ?(ПостфиксВременнойТаблицы=1, "И", ВеткаДерева.ГруппаУсловий);
		ПостфиксНовойВременнойТаблицы = ПостфиксВременнойТаблицы + 1;
		Если ТекущееУсловиеГруппировки = "И" ИЛИ ТекущееУсловиеГруппировки = "НЕ" Тогда
			ЗапросПромежуточнойТаблицы = Новый Запрос("ВЫБРАТЬ Ссылка ПОМЕСТИТЬ ПромежуточнаяТаблицаСсылок"+Формат(ПостфиксНовойВременнойТаблицы, "ЧГ=0")+" ИЗ ПромежуточнаяТаблицаСсылок"+Формат(ПостфиксВременнойТаблицы, "ЧГ=0"));
		Иначе
			ЗапросПромежуточнойТаблицы = Новый Запрос("ВЫБРАТЬ Ссылка ПОМЕСТИТЬ ПромежуточнаяТаблицаСсылок"+Формат(ПостфиксНовойВременнойТаблицы, "ЧГ=0")+" ИЗ ПромежуточнаяТаблицаСсылок"+Формат(ПостфиксВременнойТаблицы, "ЧГ=0")+" ГДЕ Ложь");
		КонецЕсли;
		ЗапросПромежуточнойТаблицы.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		ЗапросПромежуточнойТаблицы.Выполнить();
		Для Каждого ВеткаПодчиненная Из ВеткаДерева.Строки Цикл
			ИмеютсяДанные = ОтобратьМастерДанныеПоУсловиям(МенеджерВременныхТаблиц, ?(ПостфиксВременнойТаблицы=1, "И", ВеткаДерева.ГруппаУсловий), ВеткаПодчиненная, ДатаПоиска, ПостфиксНовойВременнойТаблицы);
			Если ТекущееУсловиеГруппировки = "И" И Не ИмеютсяДанные Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
		ЗапросПеремещения = Новый Запрос("УНИЧТОЖИТЬ ПромежуточнаяТаблицаСсылок"+Формат(ПостфиксВременнойТаблицы, "ЧГ=0")+"; ВЫБРАТЬ РАЗЛИЧНЫЕ Ссылка ПОМЕСТИТЬ ПромежуточнаяТаблицаСсылок"+Формат(ПостфиксВременнойТаблицы, "ЧГ=0")+" ИЗ ПромежуточнаяТаблицаСсылок"+Формат(ПостфиксНовойВременнойТаблицы, "ЧГ=0")+"; УНИЧТОЖИТЬ ПромежуточнаяТаблицаСсылок"+Формат(ПостфиксНовойВременнойТаблицы, "ЧГ=0"));
		ЗапросПеремещения.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		ЗапросПеремещения.ВыполнитьПакет();
	КонецЕсли;
	ПроверкаОтвета = Новый Запрос("ВЫБРАТЬ Первые 1 Ссылка ИЗ ПромежуточнаяТаблицаСсылок"+Формат(ПостфиксВременнойТаблицы, "ЧГ=0"));
	ПроверкаОтвета.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Возврат ПроверкаОтвета.Выполнить().Выбрать().Количество() = 1;
КонецФункции

Функция СформироватьЗапросПоСтрокеДерева(СтрокаДерева, ПустойРезультат = Ложь, УсловиеГруппировки, ДатаПоиска, ПостфиксПромежуточнойТаблицы = 0)
	Если УсловиеГруппировки="И" Тогда
		ТекстЗапроса = "ВЫБРАТЬ ПромежуточнаяТаблицаСсылок.Ссылка ПОМЕСТИТЬ ТаблицаРезультата ИЗ РегистрСведений.";
		Если СтрокаДерева.Периодическое Тогда
			ТекстЗапроса = ТекстЗапроса + "NSI_ПериодическиеПоляМД.СрезПоследних(&ДатаПоиска)";
		Иначе
			ТекстЗапроса = ТекстЗапроса + "NSI_НепериодическиеПоляМД";
		КонецЕсли;
		ТекстЗапроса = ТекстЗапроса + " КАК Регистр 
		|ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПромежуточнаяТаблицаСсылок"+Формат(ПостфиксПромежуточнойТаблицы, "ЧГ=0")+" КАК ПромежуточнаяТаблицаСсылок 
		|ПО Регистр.МастерДанные = ПромежуточнаяТаблицаСсылок.Ссылка
		|ГДЕ "+СтрокаДерева.СтрокаУсловия;	
	ИначеЕсли УсловиеГруппировки = "ИЛИ" Тогда
		ТекстЗапроса = "ВЫБРАТЬ Регистр.МастерДанные КАК Ссылка ПОМЕСТИТЬ ТаблицаРезультата ИЗ РегистрСведений.";
		Если СтрокаДерева.Периодическое Тогда
			ТекстЗапроса = ТекстЗапроса + "NSI_ПериодическиеПоляМД.СрезПоследних(&ДатаПоиска)";
		Иначе
			ТекстЗапроса = ТекстЗапроса + "NSI_НепериодическиеПоляМД";
		КонецЕсли;
		ТекстЗапроса = ТекстЗапроса + " КАК Регистр 
		|ГДЕ "+СтрокаДерева.СтрокаУсловия +"
		|
		|ОБЪЕДИНИТЬ ВСЕ 
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ Ссылка ИЗ ПромежуточнаяТаблицаСсылок"+Формат(ПостфиксПромежуточнойТаблицы, "ЧГ=0")+" КАК ПромежуточнаяТаблицаСсылок";
	ИначеЕсли УсловиеГруппировки = "НЕ" Тогда
		ТекстЗапроса = "ВЫБРАТЬ ПромежуточнаяТаблицаСсылок.Ссылка ПОМЕСТИТЬ ТаблицаРезультата ИЗ ПромежуточнаяТаблицаСсылок"+Формат(ПостфиксПромежуточнойТаблицы, "ЧГ=0")+" КАК ПромежуточнаяТаблицаСсылок ГДЕ НЕ Ссылка В ("+
		"ВЫБРАТЬ МастерДанные ИЗ РегистрСведений.";
		Если СтрокаДерева.Периодическое Тогда
			ТекстЗапроса = ТекстЗапроса + "NSI_ПериодическиеПоляМД.СрезПоследних(&ДатаПоиска)";
		Иначе
			ТекстЗапроса = ТекстЗапроса + "NSI_НепериодическиеПоляМД";
		КонецЕсли;
		ТекстЗапроса = ТекстЗапроса + " КАК Регистр ГДЕ "+СтрокаДерева.СтрокаУсловия;
		ТекстЗапроса = ТекстЗапроса + ")";
	КонецЕсли;
	Возврат ТекстЗапроса;
КонецФункции

Функция СоздатьПустоеДеревоПоиска() Экспорт
	Дерево = Новый ДеревоЗначений;
	Дерево.Колонки.Добавить("Поле");
	Дерево.Колонки.Добавить("Условие");
	Дерево.Колонки.Добавить("ЗначенияПоиска");
	Дерево.Колонки.Добавить("ГруппаУсловий");
	Возврат Дерево;
КонецФункции

Функция ДобавитьГруппуУсловий(ВеткаДерева, ИмяГруппы) Экспорт
	ИмяГруппы = ВРег(ИмяГруппы);
	ВеткаГруппы = ВеткаДерева.Строки.Добавить();
	
	
	
	Если ИмяГруппы = "И" ИЛИ ИмяГруппы = "AND" Тогда
		
		ВеткаГруппы.ГруппаУсловий = "AND";
	ИначеЕсли ИмяГруппы = "ИЛИ" ИЛИ ИмяГруппы = "OR" Тогда
		ВеткаГруппы = ВеткаДерева.Строки.Добавить();
		ВеткаГруппы.ГруппаУсловий = "OR";
	ИначеЕсли ИмяГруппы = "ИЛИ" ИЛИ ИмяГруппы = "OR" Тогда
		ВеткаГруппы = ВеткаДерева.Строки.Добавить();
		ВеткаГруппы.ГруппаУсловий = "OR";
	ИначеЕсли ИмяГруппы = "НЕ" ИЛИ ИмяГруппы = "NOT" Тогда
		ВеткаГруппы = ВеткаДерева.Строки.Добавить();
		ВеткаГруппы.ГруппаУсловий = "NOT";
	Иначе
		ВызватьИсключение "Передана некорректная группа условий "+ИмяГруппы;
	КонецЕсли;
	Возврат ВеткаГруппы;
КонецФункции

Функция ДобавитьУсловиеВГруппу(ВеткаГруппы, Поле, Условие, ЗначенияПоиска) Экспорт
	ИмяУсловия = ПолучитьПреобразованноеУсловие(Условие);
	ВеткаУсловия = ВеткаГруппы.Строки.Добавить();	
	ВеткаУсловия.Поле = Поле;
	ВеткаУсловия.Условие = ИмяУсловия;
	ВеткаУсловия.ЗначенияПоиска = ЗначенияПоиска;
	Возврат ВеткаУсловия;
КонецФункции

Функция ПолучитьПреобразованноеИмяГруппы(Условие)
	Условие = ВРег(Условие);
	СоответствиеУсловий = Новый Соответствие;
	СоответствиеУсловий.Вставить("И", "AND");
	СоответствиеУсловий.Вставить("AND", "AND");
	СоответствиеУсловий.Вставить("ИЛИ", "OR");
	СоответствиеУсловий.Вставить("OR", "OR");
	СоответствиеУсловий.Вставить("НЕ", "NOT");
	СоответствиеУсловий.Вставить("NOT", "NOT");
	ПреобразованноеУсловие = СоответствиеУсловий.Получить(Условие);
	Если ПреобразованноеУсловие=Неопределено Тогда
		ВызватьИсключение "Передано некорректное имя группы "+Условие;
	Иначе
		Возврат ПреобразованноеУсловие;
	КонецЕсли;
КонецФункции

Функция ПолучитьПреобразованноеУсловие(Условие)
	Условие = ВРег(Условие);
	СоответствиеУсловий = Новый Соответствие;
	СоответствиеУсловий.Вставить("РАВНО", "EQUAL");
	СоответствиеУсловий.Вставить("EQUAL", "EQUAL");
	СоответствиеУсловий.Вставить("НЕРАВНО", "NOTEQUAL");
	СоответствиеУсловий.Вставить("NOTEQUAL", "NOTEQUAL");
	СоответствиеУсловий.Вставить("БОЛЬШЕ", "MORE");
	СоответствиеУсловий.Вставить("MORE", "MORE");
	СоответствиеУсловий.Вставить("МЕНЬШЕ", "LESS");
	СоответствиеУсловий.Вставить("LESS", "LESS");
	СоответствиеУсловий.Вставить("БОЛЬШЕИЛИРАВНО", "MOREOREQUAL");
	СоответствиеУсловий.Вставить("MOREOREQUAL", "MOREOREQUAL");
	СоответствиеУсловий.Вставить("МЕНЬШЕИЛИРАВНО", "LESSOREQUAL");
	СоответствиеУсловий.Вставить("LESSOREQUAL", "LESSOREQUAL");
	СоответствиеУсловий.Вставить("ВСПИСКЕ", "INLIST");
	СоответствиеУсловий.Вставить("INLIST", "INLIST");
	СоответствиеУсловий.Вставить("ВГРУППЕ", "INGROUP");
	СоответствиеУсловий.Вставить("INGROUP", "INGROUP");
	ПреобразованноеУсловие = СоответствиеУсловий.Получить(Условие);
	Если ПреобразованноеУсловие=Неопределено Тогда
		ВызватьИсключение "Передано некорректное условие "+Условие;
	Иначе
		Возврат ПреобразованноеУсловие;
	КонецЕсли;
КонецФункции

Функция ПреобразоватьДеревоПоискаВЗапросПоискаXDTO(ДеревоПоиска, ДатаЗапроса=Неопределено) Экспорт
	Если ДатаЗапроса = Неопределено Тогда
		ДатаЗапроса = ТекущаяДата();
	КонецЕсли;
	СтруктураПоиска = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("mdm", "FindStructure"));
	СтруктураПоиска.DateOfFind = ТекущаяДата();
	Для Каждого СтрокаУсловия Из ДеревоПоиска.Строки Цикл
		СтруктураПоиска.ConditionsOfSearch.Добавить(ЗаполнитьУсловиеПоискаПоСтрокеДереваПоиска(СтрокаУсловия));		
	КонецЦикла;
	Возврат СтруктураПоиска;
КонецФункции

Функция ЗаполнитьУсловиеПоискаПоСтрокеДереваПоиска(СтрокаДереваПоиска)
	УсловияПоиска = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("mdm", "SearchCondition"));	
	УсловияПоиска.Field = СтрокаДереваПоиска.Поле;
	УсловияПоиска.Condition = СтрокаДереваПоиска.Условие;
	Если ТипЗнч(СтрокаДереваПоиска.ЗначенияПоиска)=Тип("Массив") Тогда
		Для Каждого СтрокаЗначенияПоиска Из СтрокаДереваПоиска.ЗначенияПоиска Цикл
			УсловияПоиска.SearchValues.Добавить(СтрокаЗначенияПоиска);
		КонецЦикла;
	Иначе
		УсловияПоиска.SearchValues.Добавить(СтрокаДереваПоиска.ЗначенияПоиска);
	КонецЕсли;
	УсловияПоиска.GroupOfCondition = СтрокаДереваПоиска.ГруппаУсловий;
	Если СтрокаДереваПоиска.Строки.Количество()>0 Тогда
		Для Каждого ПодстрокаПоиска Из СтрокаДереваПоиска.Строки Цикл
			УсловияПоиска.ConditionStrings.Добавить(ЗаполнитьУсловиеПоискаПоСтрокеДереваПоиска(ПодстрокаПоиска));
		КонецЦикла;
	КонецЕсли;
	Возврат УсловияПоиска;
КонецФункции

Функция СформироватьОтветПоСпискуМастерДанных(ТаблицаСсылокМастерДанных, УровеньВложенности = 0) Экспорт
	Ответ = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("mdm", "ArrayOfMasterData"));
	Для Каждого СтрокаОтвета Из ТаблицаСсылокМастерДанных Цикл
		МастерДанные = ПолучитьМастерДанныеПоСсылке(СтрокаОтвета.Ссылка, УровеньВложенности);
		Ответ.MasterData.Добавить(МастерДанные);
	КонецЦикла;
	Возврат Ответ;
КонецФункции

Функция ПолучитьМастерДанныеПоСсылке(Ссылка, УровеньВложенности = 0) Экспорт
	Ответ = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("mdm", "MasterData"));
	Ответ.GUID = СериализаторXDTO.ЗаписатьXDTO(Строка(Ссылка.УникальныйИдентификатор()));
	СоответствиеТекущихПолей = NSI_РаботаСМастерДаннымиСервер.ПолучитьТекущиеЗначенияПолей(Ссылка, ТекущаяДата());
	Для Каждого ТекущееПоле Из СоответствиеТекущихПолей Цикл
		ЗаписатьНовоеСвойствоМастерДанных(Ответ, ТекущееПоле, УровеньВложенности);
	КонецЦикла;
	Возврат Ответ;
КонецФункции

Процедура ЗаписатьНовоеСвойствоМастерДанных(Ответ, ТекущееПоле, УровеньВложенности)
	//Если Не ЗначениеЗаполнено(ТекущееПоле.Значение) Тогда
	//	Возврат;
	//КонецЕсли;
	Если ТипЗнч(ТекущееПоле.Значение)=Тип("Строка") ИЛИ ТипЗнч(ТекущееПоле.Значение)=Тип("Число") ИЛИ ТипЗнч(ТекущееПоле.Значение)=Тип("Булево") ИЛИ ТипЗнч(ТекущееПоле.Значение)=Тип("Дата") Тогда
		Ответ.Добавить(ФормаXML.Элемент, "http://www.w3.org/2001/XMLSchema", ТекущееПоле.Ключ, СериализаторXDTO.ЗаписатьXDTO(ТекущееПоле.Значение));
	ИначеЕсли ТипЗнч(ТекущееПоле.Значение)=Тип("СправочникСсылка.NSI_МастерДанные") Тогда
		Если УровеньВложенности>3 Тогда
			Ответ.Добавить(ФормаXML.Элемент, "http://www.w3.org/2001/XMLSchema", ТекущееПоле.Ключ, СериализаторXDTO.ЗаписатьXDTO(XMLСтрока(ТекущееПоле.Значение)));
			Возврат;
		КонецЕсли;
		ОписаниеСсылкиМастерДанных = ПолучитьМастерДанныеПоСсылке(ТекущееПоле.Значение, УровеньВложенности+1);
		Ответ.Добавить(ФормаXML.Элемент, "mdm", ТекущееПоле.Ключ, ОписаниеСсылкиМастерДанных);
	ИначеЕсли ТипЗнч(ТекущееПоле.Значение)=Тип("СправочникСсылка.NSI_СписокВИБ") Тогда
		Ответ.Добавить(ФормаXML.Элемент, "http://www.w3.org/2001/XMLSchema", ТекущееПоле.Ключ, СериализаторXDTO.ЗаписатьXDTO(ТекущееПоле.Значение.ИмяБазы));
	КонецЕсли;
КонецПроцедуры

Функция НайтиМастерДанныеПоКлючу(СоответствиеКлюча) Экспорт
	МастерДанные = Неопределено;
	Хэш = NSI_РаботаСМастерДаннымиСервер.ПолучитьХэш(СоответствиеКлюча);
	ЗапросПоХэшу = Новый Запрос("ВЫБРАТЬ
	                            |	NSI_ХэшиКлючейМастерДанных.МастерДанные
	                            |ИЗ
	                            |	РегистрСведений.NSI_ХэшиКлючейМастерДанных КАК NSI_ХэшиКлючейМастерДанных
	                            |ГДЕ
	                            |	NSI_ХэшиКлючейМастерДанных.ХэшКлюча = &ХэшКлюча");
	ЗапросПоХэшу.УстановитьПараметр("ХэшКлюча", Хэш);
	Выборка = ЗапросПоХэшу.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		МастерДанные = Выборка.МастерДанные;
	КонецЦикла;	
	Возврат МастерДанные;
КонецФункции









