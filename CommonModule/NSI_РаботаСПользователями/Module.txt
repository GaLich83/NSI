Процедура ОбновитьДанныеРолейВИБПоДаннымРолейИДМ(СписокРолейИДМ=Неопределено) Экспорт
	Если СписокРолейИДМ = Неопределено Тогда
		СписокРолейИДМ = Новый Массив;
	КонецЕсли;
	ЗапросПоДаннымУЗИДМ = Новый Запрос("ВЫБРАТЬ
	                                   |	УЗIDMУЗВИБ.УЗВИБ,
	                                   |	УЗIDMРолиIDM.РольIDM,
	                                   |	УЗIDMУЗВИБ.УЗВИБ.Владелец КАК БазаВИБ
	                                   |ПОМЕСТИТЬ УЗВИБРольИДМ
	                                   |ИЗ
	                                   |	Справочник.NSI_УЗIDM.УЗВИБ КАК УЗIDMУЗВИБ
	                                   |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.NSI_УЗIDM.РолиIDM КАК УЗIDMРолиIDM
	                                   |		ПО УЗIDMУЗВИБ.Ссылка = УЗIDMРолиIDM.Ссылка
	                                   |ГДЕ
	                                   |	УЗIDMРолиIDM.РольIDM В(&СписокРолейИДМ)
	                                   |;
	                                   |
	                                   |////////////////////////////////////////////////////////////////////////////////
	                                   |ВЫБРАТЬ РАЗЛИЧНЫЕ
	                                   |	УЗВИБРольИДМ.УЗВИБ,
	                                   |	РолиIDMРолиВИБ.РольВИБ КАК РольВИБ
	                                   |ИЗ
	                                   |	УЗВИБРольИДМ КАК УЗВИБРольИДМ
	                                   |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.NSI_РолиIDM.РолиВИБ КАК РолиIDMРолиВИБ
	                                   |		ПО УЗВИБРольИДМ.РольIDM = РолиIDMРолиВИБ.Ссылка
	                                   |			И УЗВИБРольИДМ.БазаВИБ = РолиIDMРолиВИБ.РольВИБ.Владелец
	                                   |ИТОГИ ПО
	                                   |	РольВИБ");
	ЗапросПоДаннымУЗИДМ.УстановитьПараметр("СписокРолейИДМ", СписокРолейИДМ);
	ВыборкаПоРолям = ЗапросПоДаннымУЗИДМ.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПоРолям.Следующий() Цикл
		Об = ВыборкаПоРолям.РольВИБ.ПолучитьОбъект();
		ВыборкаПоПользователям = ВыборкаПоРолям.Выбрать();
		Если ТипЗнч(ВыборкаПоРолям.РольВИБ)=Тип("СправочникСсылка.NSI_ГруппыПользователейВИБ") Тогда
			Об.Состав.Очистить();
			Пока ВыборкаПоПользователям.Следующий() Цикл
				НоваяСтрока = Об.Состав.Добавить();
				НоваяСтрока.Пользователь = ВыборкаПоПользователям.УЗВИБ;
			КонецЦикла;
		ИначеЕсли ТипЗнч(ВыборкаПоРолям.РольВИБ)=Тип("СправочникСсылка.NSI_ГруппыДоступаВИБ") Тогда
			МассивГруппПользователей = Новый Массив;
			Для Каждого СтрокаПользователей Из Об.Пользователи Цикл
				Если ТипЗнч(СтрокаПользователей.Пользователь) = Тип("СправочникСсылка.NSI_ГруппыПользователейВИБ") Тогда
					МассивГруппПользователей.Добавить(СтрокаПользователей.Пользователь);
				КонецЕсли;
			КонецЦикла;
			Пока ВыборкаПоПользователям.Следующий() Цикл
				НоваяСтрока = Об.Пользователи.Добавить();
				НоваяСтрока.Пользователь = ВыборкаПоПользователям.УЗВИБ;
			КонецЦикла;
			Для Каждого Группа Из МассивГруппПользователей Цикл
				НоваяСтрока = Об.Пользователи.Добавить();
				НоваяСтрока.Пользователь = Группа;
			КонецЦикла;
		КонецЕсли;
		Об.Записать();
	КонецЦикла;
КонецПроцедуры

Процедура ОбновитьДанныеУЗВИБПоУЗИДМ(Параметры) Экспорт
	УЗИДМ = Параметры.УЗИДМ;
	ОчищатьНекорректныеРоли = Параметры.ОчищатьНекорректныеРоли;
	Если ОчищатьНекорректныеРоли Тогда ОчиститьНекорректныеРолиВИБ(); КонецЕсли;
	// Если есть роли ВИБ, но нет учеток в этих ВИБ, то запустим сначала обработку создания пользователя
	ЗапросПоРолямИзУЗВИБНеПрописанныхВУЗИДМ = Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ
	                                                       |	РолиIDMРолиВИБ.РольВИБ.Владелец КАК БазаРолиВИБ
	                                                       |ПОМЕСТИТЬ ВладельцыРолей
	                                                       |ИЗ
	                                                       |	Справочник.NSI_УЗIDM.РолиIDM КАК УЗIDMРолиIDM
	                                                       |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.NSI_РолиIDM.РолиВИБ КАК РолиIDMРолиВИБ
	                                                       |		ПО УЗIDMРолиIDM.РольIDM = РолиIDMРолиВИБ.Ссылка
	                                                       |ГДЕ
	                                                       |	УЗIDMРолиIDM.Ссылка = &УЗИДМ
	                                                       |	И РолиIDMРолиВИБ.РольВИБ.Владелец.ОбновлятьРолиЧерезИДМ
	                                                       |;
	                                                       |
	                                                       |////////////////////////////////////////////////////////////////////////////////
	                                                       |ВЫБРАТЬ РАЗЛИЧНЫЕ
	                                                       |	УЗIDMУЗВИБ.УЗВИБ,
	                                                       |	УЗIDMУЗВИБ.УЗВИБ.Владелец
	                                                       |ПОМЕСТИТЬ БазаУЗВИБ
	                                                       |ИЗ
	                                                       |	Справочник.NSI_УЗIDM.УЗВИБ КАК УЗIDMУЗВИБ
	                                                       |ГДЕ
	                                                       |	УЗIDMУЗВИБ.Ссылка = &УЗИДМ
	                                                       |	И УЗIDMУЗВИБ.УЗВИБ.Владелец.ОбновлятьРолиЧерезИДМ
	                                                       |;
	                                                       |
	                                                       |////////////////////////////////////////////////////////////////////////////////
	                                                       |ВЫБРАТЬ
	                                                       |	ВладельцыРолей.БазаРолиВИБ,
	                                                       |	БазаУЗВИБ.УЗВИБ
	                                                       |ИЗ
	                                                       |	ВладельцыРолей КАК ВладельцыРолей
	                                                       |		ЛЕВОЕ СОЕДИНЕНИЕ БазаУЗВИБ КАК БазаУЗВИБ
	                                                       |		ПО ВладельцыРолей.БазаРолиВИБ = БазаУЗВИБ.УЗВИБВладелец
	                                                       |ГДЕ
	                                                       |	БазаУЗВИБ.УЗВИБ ЕСТЬ NULL ");
	ЗапросПоРолямИзУЗВИБНеПрописанныхВУЗИДМ.УстановитьПараметр("УЗИДМ", УЗИДМ);
	ВыборкаВИБНеИмеющихУЗ = ЗапросПоРолямИзУЗВИБНеПрописанныхВУЗИДМ.Выполнить().Выбрать();
	Если ВыборкаВИБНеИмеющихУЗ.Количество() > 0 Тогда
		СоответствиеБазКСозданиюПользователей = Новый Соответствие;
		Пока ВыборкаВИБНеИмеющихУЗ.Следующий() Цикл
			СоответствиеБазКСозданиюПользователей.Вставить(ВыборкаВИБНеИмеющихУЗ.БазаРолиВИБ, Ложь);
		КонецЦикла;
		СписокДобавляемыхУЗВИБ = СоздатьНовыхПользователейВБазахВИБ(Новый Структура("УЗИДМ, СоответствиеБазКСозданиюПользователей", УЗИДМ, СоответствиеБазКСозданиюПользователей));
		NSI_РаботаСПользователями.ДобавитьУЗВИБВУЗИДМ(Новый Структура("УЗИДМ, СписокДобавляемыхУЗВИБ", УЗИДМ, СписокДобавляемыхУЗВИБ));
	КонецЕсли;
	
	ЗапросПоВИБ = Новый Запрос("ВЫБРАТЬ
	                           |	РолиIDMРолиВИБ.РольВИБ
	                           |ПОМЕСТИТЬ РолиВИБПользователя
	                           |ИЗ
	                           |	Справочник.NSI_УЗIDM.РолиIDM КАК УЗIDMРолиIDM
	                           |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.NSI_РолиIDM.РолиВИБ КАК РолиIDMРолиВИБ
	                           |		ПО УЗIDMРолиIDM.РольIDM = РолиIDMРолиВИБ.Ссылка
	                           |ГДЕ
	                           |	УЗIDMРолиIDM.Ссылка = &УЗИДМ
	                           |;
	                           |
	                           |////////////////////////////////////////////////////////////////////////////////
	                           |ВЫБРАТЬ
	                           |	УЗIDMУЗВИБ.УЗВИБ КАК УЗВИБ,
	                           |	РолиВИБПользователя.РольВИБ КАК РольВИБ,
	                           |	ВЫБОР
	                           |		КОГДА РолиВИБПользователя.РольВИБ ССЫЛКА Справочник.NSI_ГруппыДоступаВИБ
	                           |			ТОГДА ""ГруппыДоступа""
	                           |		КОГДА РолиВИБПользователя.РольВИБ ССЫЛКА Справочник.NSI_ГруппыДоступаВИБ
	                           |			ТОГДА ""ГруппыПользователей""
	                           |		ИНАЧЕ ""<роль>""
	                           |	КОНЕЦ КАК ВидРоли,
	                           |	ВЫБОР
	                           |		КОГДА УЗIDMУЗВИБ.УЗВИБ.Владелец.ВидРолейИспользуемыйВИБ = ЗНАЧЕНИЕ(Перечисление.NSI_ВидРолиВИБ.ГруппаДоступа)
	                           |			ТОГДА ""ГруппыДоступа""
	                           |		КОГДА УЗIDMУЗВИБ.УЗВИБ.Владелец.ВидРолейИспользуемыйВИБ = ЗНАЧЕНИЕ(Перечисление.NSI_ВидРолиВИБ.ГруппаПользователей)
	                           |			ТОГДА ""ГруппыПользователей""
	                           |		ИНАЧЕ ""<роль>""
	                           |	КОНЕЦ КАК ВидИспользуемыхРолей,
	                           |	УЗIDMУЗВИБ.УЗВИБ.Владелец КАК БазаВИБ
	                           |ИЗ
	                           |	Справочник.NSI_УЗIDM.УЗВИБ КАК УЗIDMУЗВИБ
	                           |		ЛЕВОЕ СОЕДИНЕНИЕ РолиВИБПользователя КАК РолиВИБПользователя
	                           |		ПО УЗIDMУЗВИБ.УЗВИБ.Владелец = РолиВИБПользователя.РольВИБ.Владелец
	                           |ГДЕ
	                           |	УЗIDMУЗВИБ.Ссылка = &УЗИДМ
	                           |	И (ВЫБОР
	                           |				КОГДА РолиВИБПользователя.РольВИБ ССЫЛКА Справочник.NSI_ГруппыДоступаВИБ
	                           |					ТОГДА ""ГруппыДоступа""
	                           |				КОГДА РолиВИБПользователя.РольВИБ ССЫЛКА Справочник.NSI_ГруппыДоступаВИБ
	                           |					ТОГДА ""ГруппыПользователей""
	                           |				ИНАЧЕ ""<роль>""
	                           |			КОНЕЦ = ВЫБОР
	                           |				КОГДА УЗIDMУЗВИБ.УЗВИБ.Владелец.ВидРолейИспользуемыйВИБ = ЗНАЧЕНИЕ(Перечисление.NSI_ВидРолиВИБ.ГруппаДоступа)
	                           |					ТОГДА ""ГруппыДоступа""
	                           |				КОГДА УЗIDMУЗВИБ.УЗВИБ.Владелец.ВидРолейИспользуемыйВИБ = ЗНАЧЕНИЕ(Перечисление.NSI_ВидРолиВИБ.ГруппаПользователей)
	                           |					ТОГДА ""ГруппыПользователей""
	                           |				ИНАЧЕ ""<роль>""
	                           |			КОНЕЦ
	                           |			ИЛИ РолиВИБПользователя.РольВИБ ЕСТЬ NULL )
	                           |	И НЕ УЗIDMУЗВИБ.УЗВИБ.НеОбновлятьРолиПоРегламенту
	                           |	И УЗIDMУЗВИБ.УЗВИБ.Владелец.ОбновлятьРолиЧерезИДМ
	                           |ИТОГИ
	                           |	МАКСИМУМ(ВидИспользуемыхРолей),
	                           |	МАКСИМУМ(БазаВИБ)
	                           |ПО
	                           |	УЗВИБ");
	ЗапросПоВИБ.УстановитьПараметр("УЗИДМ", УЗИДМ);
	ВыборкаУЗВИБ = ЗапросПоВИБ.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ОписаниеОшибки = "";
	СоответствиеБазКСозданиюПользователей = Новый Соответствие;
	Пока ВыборкаУЗВИБ.Следующий() Цикл
		ВыборкаПоСпискуРолей = ВыборкаУЗВИБ.Выбрать();
		МассивДопустимыхРолей = Новый Массив;
		Пока ВыборкаПоСпискуРолей.Следующий() Цикл
			Если ВыборкаПоСпискуРолей.РольВИБ = Null Тогда
				Продолжить;
			КонецЕсли;
			Если ВыборкаУЗВИБ.ВидИспользуемыхРолей = "<роль>" Тогда
				МассивДопустимыхРолей.Добавить(ВыборкаПоСпискуРолей.РольВИБ.ИДРоли);
			Иначе
				МассивДопустимыхРолей.Добавить(ВыборкаПоСпискуРолей.РольВИБ.СсылкаВИБ);
			КонецЕсли;
		КонецЦикла;
		NSI_РаботаСПользователями.ОбновитьПраваПользователейВИБ(Новый Структура("ИмяБазы, ИДПользователя, ВидИспользуемыхРолей, МассивДопустимыхРолей", ВыборкаУЗВИБ.БазаВИБ.ИмяБазы, ВыборкаУЗВИБ.УЗВИБ.ИДПользователя, ВыборкаУЗВИБ.ВидИспользуемыхРолей, МассивДопустимыхРолей));
	КонецЦикла;
КонецПроцедуры

Процедура ДобавитьУЗВИБВУЗИДМ(Параметры) Экспорт
	УЗИДМ = Параметры.УЗИДМ;
	СписокДобавляемыхУЗВИБ = Параметры.СписокДобавляемыхУЗВИБ;
	ОбъектУЗ = УЗИДМ.ПолучитьОбъект();
	Для Каждого УЗВИБ Из СписокДобавляемыхУЗВИБ Цикл	
		Если ОбъектУЗ.УЗВИБ.Найти(УЗВИБ, "УЗВИБ")=Неопределено Тогда
			НоваяСтрока = ОбъектУЗ.УЗВИБ.Добавить();
			НоваяСтрока.УЗВИБ = УЗВИБ;
		КонецЕсли;
	КонецЦикла;
	Если ОбъектУЗ.Модифицированность() Тогда
		ОбъектУЗ.Записать();
	КонецЕсли;
КонецПроцедуры


Функция СоздатьНовыхПользователейВБазахВИБ(Параметры) Экспорт
	УЗИДМ = Параметры.УЗИДМ;
	СоответствиеБазКСозданиюПользователей = Параметры.СоответствиеБазКСозданиюПользователей;
	МассивВИБ = Новый Массив;
	Для Каждого БазаДляСоздания Из СоответствиеБазКСозданиюПользователей Цикл
		Если БазаДляСоздания.Ключ.ОбновлятьРолиЧерезИДМ Тогда
			МассивВИБ.Добавить(NSI_РаботаСПользователями.СоздатьНовогоПользователяВБазеВИБ(Новый Структура("ИмяБазы, УЗИДМ", БазаДляСоздания.Ключ.ИмяБазы, УЗИДМ)));
		КонецЕсли;
	КонецЦикла;
	Возврат МассивВИБ;
КонецФункции

Функция СоздатьНовогоПользователяВБазеВИБ(Параметры) Экспорт
	ИмяБазы = Параметры.ИмяБазы;
	УЗИДМ = Параметры.УЗИДМ;
	//НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
	НовыйПользовательВИБ = Справочники.NSI_УЗВИБ.СоздатьЭлемент();
	
	ВИБ = NSI_МодульПовторногоИспользования.ПолучитьСсылкуИБПоИмениБазы(ИмяБазы);
	Прокси = NSI_МодульПовторногоИспользования.ПолучитьСоединениеПоИмениБазы(ИмяБазы);
	ДанныеПользователя = Прокси.ФабрикаXDTO.Создать(Прокси.ФабрикаXDTO.Тип("nsi_core", "CreateUserInfo"));
	СтруктураФИО = ФизическиеЛицаКлиентСервер.ФамилияИмяОтчество(УЗИДМ.Наименование);
	Если ЗначениеЗаполнено(УЗИДМ.Фамилия) Тогда
		ДанныеПользователя.FirstName = УЗИДМ.Фамилия;
	Иначе
		СтруктураФИО.Свойство("Фамилия", ДанныеПользователя.FirstName);	
	КонецЕсли;
	Если ЗначениеЗаполнено(УЗИДМ.Отчество) Тогда
		ДанныеПользователя.MiddleName = УЗИДМ.Отчество;
	Иначе
		СтруктураФИО.Свойство("Отчество", ДанныеПользователя.MiddleName);	
	КонецЕсли;
	Если ЗначениеЗаполнено(УЗИДМ.Имя) Тогда
		ДанныеПользователя.LastName = УЗИДМ.Имя;
	Иначе
		СтруктураФИО.Свойство("Имя", ДанныеПользователя.LastName);	
	КонецЕсли;
	ДанныеПользователя.LoginEnabled = Истина;
	ДанныеПользователя.Password = ПолучитьСохраняемоеЗначение("12345");
	ДанныеПользователя.OSAuthentication = Ложь;
	ПрефиксДоменнойАвторизации = Константы.NSI_ПрефиксДоменнойАвторизации.Получить();
	Если ЗначениеЗаполнено(УЗИДМ.LoginAD) Тогда
		Если Найти(УЗИДМ.LoginAD, ПрефиксДоменнойАвторизации)=0 Тогда
			ДанныеПользователя.OSUser = "\\"+ПрефиксДоменнойАвторизации+"\"+УЗИДМ.LoginAD;
		Иначе
			ДанныеПользователя.OSUser = УЗИДМ.LoginAD;
		КонецЕсли;
	Иначе
		ДанныеПользователя.OSUser = "";
	КонецЕсли;
	ДанныеПользователя.Language = ?(ЗначениеЗаполнено(УЗИДМ.Язык), УЗИДМ.Язык, "ru");
	Ошибка = "";
	СтруктураОтветаXDTO = Прокси.CreateEditUser(ДанныеПользователя, Ошибка);
	Если ЗначениеЗаполнено(Ошибка) Тогда
		//ОтменитьТранзакцию();
		ВызватьИсключение Ошибка;
	Иначе
		СтруктураОтвета = СериализаторXDTO.ПрочитатьXDTO(СтруктураОтветаXDTO);
		НовыйПользовательВИБ.Наименование = ДанныеПользователя.FirstName + ?(ЗначениеЗаполнено(ДанныеПользователя.MiddleName), " "+ДанныеПользователя.MiddleName,"") + ?(ЗначениеЗаполнено(ДанныеПользователя.LastName), " "+ДанныеПользователя.LastName, "");
		НовыйПользовательВИБ.ПолноеИмя = ДанныеПользователя.FirstName + ?(ЗначениеЗаполнено(ДанныеПользователя.MiddleName), " "+ДанныеПользователя.MiddleName,"") + ?(ЗначениеЗаполнено(ДанныеПользователя.LastName), " "+ДанныеПользователя.LastName, "");
		НовыйПользовательВИБ.АутентификацияСтандартная = Истина;
		НовыйПользовательВИБ.СохраняемоеЗначениеПароля = ДанныеПользователя.Password;
		НовыйПользовательВИБ.АутентификацияОС = ДанныеПользователя.OSAuthentication;
		НовыйПользовательВИБ.ПользовательОС = ДанныеПользователя.OSUser;
		НовыйПользовательВИБ.Язык = ДанныеПользователя.Language;
		НовыйПользовательВИБ.Владелец = ВИБ;
		ЗаполнитьЗначенияСвойств(НовыйПользовательВИБ, СтруктураОтвета);
		Попытка
			НовыйПользовательВИБ.Записать();
			//ЗафиксироватьТранзакцию();
			Возврат НовыйПользовательВИБ.Ссылка;
		Исключение
			//ОтменитьТранзакцию();
			ВызватьИсключение "Не удалось создать пользователя ВИБ. "+ОписаниеОшибки();
		КонецПопытки;		          
	КонецЕсли;
КонецФункции

Функция ПолучитьХешПароля(Пароль) Экспорт
    
    Хеш = Новый ХешированиеДанных(ХешФункция.SHA1);
    Хеш.Добавить(Пароль);
    Возврат Base64Строка(Хеш.ХешСумма);
    
КонецФункции

Функция ПолучитьСохраняемоеЗначение(Пароль) Экспорт
    
    Возврат ?(ЗначениеЗаполнено(Пароль),ПолучитьХешПароля(Пароль) + "," + ПолучитьХешПароля(ВРег(Пароль)),"");
    
КонецФункции


Процедура ОбновитьПраваПользователейВИБ(Параметры) Экспорт
	ИмяБазы = Параметры.ИмяБазы;
	ИДПользователя = Параметры.ИДПользователя;
	ВидИспользуемыхРолей = Параметры.ВидИспользуемыхРолей;
	МассивДопустимыхРолей = Параметры.МассивДопустимыхРолей;
	ОписаниеОшибки = "";
	Connector = NSI_МодульПовторногоИспользования.ПолучитьСоединениеПоИмениБазы(ИмяБазы);
	Если Connector = Неопределено Тогда
		ВызватьИсключение "Не удалось подключиться к базе "+ИмяБазы;
	Иначе
		Попытка
			Connector.SetAccessRights(ИДПользователя, ВидИспользуемыхРолей, СериализаторXDTO.ЗаписатьXDTO(МассивДопустимыхРолей), ОписаниеОшибки);
			Если ЗначениеЗаполнено(ОписаниеОшибки) Тогда
				ВызватьИсключение ОписаниеОшибки;
				Возврат;
			КонецЕсли;
		Исключение
			ВызватьИсключение ОписаниеОшибки();
		КонецПопытки;
	КонецЕсли;
КонецПроцедуры



Процедура ОчиститьНекорректныеРолиВИБ() Экспорт
	НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
	Попытка
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("Справочник.NSI_РолиIDM");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		Блокировка.Заблокировать();
		ЗапросНеправильныхРолейВИБВРоляхIDM = Новый Запрос("ВЫБРАТЬ
		                                                   |	РолиIDMРолиВИБ.Ссылка КАК Ссылка,
		                                                   |	РолиIDMРолиВИБ.РольВИБ,
		                                                   |	ВЫБОР
		                                                   |		КОГДА РолиIDMРолиВИБ.РольВИБ ССЫЛКА Справочник.NSI_ГруппыДоступаВИБ
		                                                   |			ТОГДА ЗНАЧЕНИЕ(Перечисление.NSI_ВидРолиВИБ.ГруппаДоступа)
		                                                   |		КОГДА РолиIDMРолиВИБ.РольВИБ ССЫЛКА Справочник.NSI_ГруппыПользователейВИБ
		                                                   |			ТОГДА ЗНАЧЕНИЕ(Перечисление.NSI_ВидРолиВИБ.ГруппаПользователей)
		                                                   |		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.NSI_ВидРолиВИБ.Роль)
		                                                   |	КОНЕЦ КАК ВидРолиВИБ,
		                                                   |	РолиIDMРолиВИБ.РольВИБ.Владелец.ВидРолейИспользуемыйВИБ
		                                                   |ИЗ
		                                                   |	Справочник.NSI_РолиIDM.РолиВИБ КАК РолиIDMРолиВИБ
		                                                   |ГДЕ
		                                                   |	НЕ ВЫБОР
		                                                   |				КОГДА РолиIDMРолиВИБ.РольВИБ ССЫЛКА Справочник.NSI_ГруппыДоступаВИБ
		                                                   |					ТОГДА ЗНАЧЕНИЕ(Перечисление.NSI_ВидРолиВИБ.ГруппаДоступа)
		                                                   |				КОГДА РолиIDMРолиВИБ.РольВИБ ССЫЛКА Справочник.NSI_ГруппыПользователейВИБ
		                                                   |					ТОГДА ЗНАЧЕНИЕ(Перечисление.NSI_ВидРолиВИБ.ГруппаПользователей)
		                                                   |				ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.NSI_ВидРолиВИБ.Роль)
		                                                   |			КОНЕЦ = РолиIDMРолиВИБ.РольВИБ.Владелец.ВидРолейИспользуемыйВИБ
		                                                   |ИТОГИ ПО
		                                                   |	Ссылка");
		Выборка = ЗапросНеправильныхРолейВИБВРоляхIDM.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока Выборка.Следующий() Цикл
			ВыборкаПоРолям = Выборка.Выбрать();
			ОбъектРольIDM = Выборка.Ссылка.ПолучитьОбъект();
			Пока ВыборкаПоРолям.Следующий() Цикл
				МассивНенужныхРолей = ОбъектРольIDM.РолиВИБ.НайтиСтроки(Новый Структура("РольВИБ", ВыборкаПоРолям.РольВИБ));
				Для Каждого НенужнаяРоль Из МассивНенужныхРолей Цикл
					ОбъектРольIDM.РолиВИБ.Удалить(НенужнаяРоль);
				КонецЦикла;			
			КонецЦикла;
			ОбъектРольIDM.Записать();
		КонецЦикла;
		Блокировка = Неопределено;
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
	КонецПопытки;
КонецПроцедуры

Процедура ОчиститьВсеРолиIDMСвязанныеСБазой(База) Экспорт
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	УЗIDMРолиIDM.Ссылка КАК УЗIDM,
	                      |	УЗIDMРолиIDM.РольIDM
	                      |ИЗ
	                      |	Справочник.NSI_УЗIDM.РолиIDM КАК УЗIDMРолиIDM
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.NSI_РолиIDM.РолиВИБ КАК РолиIDMРолиВИБ
	                      |		ПО УЗIDMРолиIDM.РольIDM = РолиIDMРолиВИБ.Ссылка
	                      |ГДЕ
	                      |	РолиIDMРолиВИБ.РольВИБ.Владелец = &База
	                      |ИТОГИ ПО
	                      |	УЗIDM");
	Запрос.УстановитьПараметр("База", База);
	ВыборкаУЗ = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаУЗ.Следующий() Цикл
		УЗОбъект = ВыборкаУЗ.УЗIDM.ПолучитьОбъект();
		Выборка = ВыборкаУЗ.Выбрать();
		Пока Выборка.Следующий() Цикл
			СтрокаТЧ = УЗОбъект.РолиIDM.Найти(Выборка.РольIDM, "РольIDM");
			Если Не СтрокаТЧ = Неопределено Тогда
				УЗОбъект.РолиIDM.Удалить(СтрокаТЧ);
			КонецЕсли;
		КонецЦикла;
		УЗОбъект.Записать();
	КонецЦикла;
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	РолиIDM.Ссылка
	                      |ИЗ
	                      |	Справочник.NSI_РолиIDM КАК РолиIDM
	                      |ГДЕ
	                      |	 РолиIDM.ОсновнаяИБ = &База");
	Запрос.УстановитьПараметр("База", База);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		РольОбъект = Выборка.Ссылка.ПолучитьОбъект();
		РольОбъект.Удалить();
	КонецЦикла;
КонецПроцедуры

Процедура ЗаполнитьВсеРолиIDMСвязанныеСБазой(База) Экспорт
	Если База.ВидРолейИспользуемыйВИБ = Перечисления.NSI_ВидРолиВИБ.Роль Тогда
		ЗаполнитьРолиIDMПоРолямВИБ(База);
	ИначеЕсли База.ВидРолейИспользуемыйВИБ = Перечисления.NSI_ВидРолиВИБ.ГруппаДоступа Тогда
		ЗаполнитьРолиIDMПоГруппамДоступаВИБ(База);
	ИначеЕсли База.ВидРолейИспользуемыйВИБ = Перечисления.NSI_ВидРолиВИБ.ГруппаПользователей Тогда
		ЗаполнитьРолиIDMПоГруппамПользователейВИБ(База);
	КонецЕсли;
КонецПроцедуры

Процедура ЗаполнитьРолиIDMПоРолямВИБ(База)
	ЗапросУжеСуществующихРолей = Новый Запрос("ВЫБРАТЬ
	                                          |	РолиIDMРолиВИБ.Ссылка КАК РольИДМ,
	                                          |	РолиВИБ.Ссылка КАК РольВИБ
											  |ИЗ
	                                          |	Справочник.NSI_РолиВИБ КАК РолиВИБ
	                                          |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.NSI_РолиIDM.РолиВИБ КАК РолиIDMРолиВИБ
	                                          |		ПО (РолиIDMРолиВИБ.РольВИБ = РолиВИБ.Ссылка)
	                                          |ГДЕ
	                                          |	РолиВИБ.Владелец = &База
	                                          |ИТОГИ
	                                          |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ РольИДМ)
	                                          |ПО
	                                          |	РольВИБ");
	ЗапросУжеСуществующихРолей.УстановитьПараметр("База", База);
	ВыборкаУжеСуществующихРолей = ЗапросУжеСуществующихРолей.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаУжеСуществующихРолей.Следующий() Цикл
		Если ВыборкаУжеСуществующихРолей.РольИДМ >= 1 Тогда
			Выборка = ВыборкаУжеСуществующихРолей.Выбрать();
			Выборка.Следующий();
			РольВИБ = Выборка.РольВИБ;
			Если Выборка.РольИДМ = Null Тогда
				НоваяРольIDM = Справочники.NSI_РолиIDM.СоздатьЭлемент();
			Иначе
				НоваяРольIDM = Выборка.РольИДМ.ПолучитьОбъект();
			КонецЕсли;
			НоваяРольIDM.ОсновнаяИБ = База;
			НоваяРольIDM.ИмяРоли = ВыборкаУжеСуществующихРолей.РольВИБ.Наименование;
			НоваяСтрока = НоваяРольIDM.РолиВИБ.Добавить();
			НоваяСтрока.РольВИБ = ВыборкаУжеСуществующихРолей.РольВИБ;			
			НоваяРольIDM.АктивностьРоли = Истина;
			НоваяРольIDM.Записать();
			Пока Выборка.Следующий() Цикл
				РольИДМОбъект = Выборка.РольИДМ.ПолучитьОбъект();
				Если РольИДМОбъект.РолиВИБ.Количество()>1 Тогда
					СтрокаРоли = РольИДМОбъект.РолиВИБ.Найти(Выборка.РольВИБ, "РольВИБ");
					Если Не СтрокаРоли=Неопределено Тогда
						РольИДМОбъект.РолиВИБ.Удалить(СтрокаРоли);
					КонецЕсли;
					РольИДМОбъект.Записать();
				Иначе
					РольИДМОбъект.Удалить();
				КонецЕсли;
			КонецЦикла;
		Иначе
			НоваяРольIDM = Справочники.NSI_РолиIDM.СоздатьЭлемент();
			НоваяРольIDM.ОсновнаяИБ = База;
			НоваяРольIDM.ИмяРоли = ВыборкаУжеСуществующихРолей.РольВИБ.Наименование;
			НоваяРольIDM.АктивностьРоли = Истина;
			НоваяСтрока = НоваяРольIDM.РолиВИБ.Добавить();
			НоваяСтрока.РольВИБ = ВыборкаУжеСуществующихРолей.РольВИБ;			
			НоваяРольIDM.Записать();
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура ЗаполнитьРолиIDMПоГруппамДоступаВИБ(База)
	ЗапросУжеСуществующихРолей = Новый Запрос("ВЫБРАТЬ
	                                          |	РолиIDMРолиВИБ.Ссылка КАК РольИДМ,
	                                          |	ГруппыДоступаВИБ.Ссылка КАК РольВИБ
	                                          |ИЗ
	                                          |	Справочник.NSI_ГруппыДоступаВИБ КАК ГруппыДоступаВИБ
	                                          |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.NSI_РолиIDM.РолиВИБ КАК РолиIDMРолиВИБ
	                                          |		ПО (РолиIDMРолиВИБ.РольВИБ = ГруппыДоступаВИБ.Ссылка)
	                                          |ГДЕ
	                                          |	ГруппыДоступаВИБ.Владелец = &База
	                                          |	И НЕ ГруппыДоступаВИБ.ЭтоГруппа
	                                          |ИТОГИ
	                                          |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ РольИДМ)
	                                          |ПО
	                                          |	РольВИБ");
	ЗапросУжеСуществующихРолей.УстановитьПараметр("База", База);
	ВыборкаУжеСуществующихРолей = ЗапросУжеСуществующихРолей.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаУжеСуществующихРолей.Следующий() Цикл
		Если ВыборкаУжеСуществующихРолей.РольИДМ >= 1 Тогда
			Выборка = ВыборкаУжеСуществующихРолей.Выбрать();
			Выборка.Следующий();
			РольВИБ = Выборка.РольВИБ;
			Если Выборка.РольИДМ = Null Тогда
				НоваяРольIDM = Справочники.NSI_РолиIDM.СоздатьЭлемент();
			Иначе
				НоваяРольIDM = Выборка.РольИДМ.ПолучитьОбъект();
			КонецЕсли;
			НоваяРольIDM.ОсновнаяИБ = База;
			НоваяРольIDM.ИмяРоли = ВыборкаУжеСуществующихРолей.РольВИБ.Наименование;
			НоваяСтрока = НоваяРольIDM.РолиВИБ.Добавить();
			НоваяСтрока.РольВИБ = ВыборкаУжеСуществующихРолей.РольВИБ;			
			НоваяРольIDM.АктивностьРоли = Истина;
			НоваяРольIDM.Записать();
			Пока Выборка.Следующий() Цикл
				РольИДМОбъект = Выборка.РольИДМ.ПолучитьОбъект();
				Если РольИДМОбъект.РолиВИБ.Количество()>1 Тогда
					СтрокаРоли = РольИДМОбъект.РолиВИБ.Найти(Выборка.РольВИБ, "РольВИБ");
					Если Не СтрокаРоли=Неопределено Тогда
						РольИДМОбъект.РолиВИБ.Удалить(СтрокаРоли);
					КонецЕсли;
					РольИДМОбъект.Записать();
				Иначе
					РольИДМОбъект.Удалить();
				КонецЕсли;
			КонецЦикла;
		Иначе
			НоваяРольIDM = Справочники.NSI_РолиIDM.СоздатьЭлемент();
			НоваяРольIDM.ОсновнаяИБ = База;
			НоваяРольIDM.ИмяРоли = ВыборкаУжеСуществующихРолей.РольВИБ.Наименование;
			НоваяРольIDM.АктивностьРоли = Истина;
			НоваяСтрока = НоваяРольIDM.РолиВИБ.Добавить();
			НоваяСтрока.РольВИБ = ВыборкаУжеСуществующихРолей.РольВИБ;			
			НоваяРольIDM.Записать();
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура ЗаполнитьРолиIDMПоГруппамПользователейВИБ(База)
	ЗапросУжеСуществующихРолей = Новый Запрос("ВЫБРАТЬ
	                                          |	РолиIDMРолиВИБ.Ссылка КАК РольИДМ,
	                                          |	ГруппыПользователейВИБ.Ссылка КАК РольВИБ
	                                          |ИЗ
	                                          |	Справочник.NSI_ГруппыПользователейВИБ КАК ГруппыПользователейВИБ
	                                          |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.NSI_РолиIDM.РолиВИБ КАК РолиIDMРолиВИБ
	                                          |		ПО (РолиIDMРолиВИБ.РольВИБ = ГруппыПользователейВИБ.Ссылка)
	                                          |ГДЕ
	                                          |	ГруппыПользователейВИБ.Владелец = &База
	                                          |ИТОГИ
	                                          |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ РольИДМ)
	                                          |ПО
	                                          |	РольВИБ");
	ЗапросУжеСуществующихРолей.УстановитьПараметр("База", База);
	ВыборкаУжеСуществующихРолей = ЗапросУжеСуществующихРолей.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаУжеСуществующихРолей.Следующий() Цикл
		Если ВыборкаУжеСуществующихРолей.РольИДМ >= 1 Тогда
			Выборка = ВыборкаУжеСуществующихРолей.Выбрать();
			Выборка.Следующий();
			РольВИБ = Выборка.РольВИБ;
			Если Выборка.РольИДМ = Null Тогда
				НоваяРольIDM = Справочники.NSI_РолиIDM.СоздатьЭлемент();
			Иначе
				НоваяРольIDM = Выборка.РольИДМ.ПолучитьОбъект();
			КонецЕсли;
			НоваяРольIDM.ОсновнаяИБ = База;
			НоваяРольIDM.ИмяРоли = ВыборкаУжеСуществующихРолей.РольВИБ.Наименование;
			НоваяСтрока = НоваяРольIDM.РолиВИБ.Добавить();
			НоваяСтрока.РольВИБ = ВыборкаУжеСуществующихРолей.РольВИБ;			
			НоваяРольIDM.АктивностьРоли = Истина;
			НоваяРольIDM.Записать();
			Пока Выборка.Следующий() Цикл
				РольИДМОбъект = Выборка.РольИДМ.ПолучитьОбъект();
				Если РольИДМОбъект.РолиВИБ.Количество()>1 Тогда
					СтрокаРоли = РольИДМОбъект.РолиВИБ.Найти(Выборка.РольВИБ, "РольВИБ");
					Если Не СтрокаРоли=Неопределено Тогда
						РольИДМОбъект.РолиВИБ.Удалить(СтрокаРоли);
					КонецЕсли;
					РольИДМОбъект.Записать();
				Иначе
					РольИДМОбъект.Удалить();
				КонецЕсли;
			КонецЦикла;
		Иначе
			НоваяРольIDM = Справочники.NSI_РолиIDM.СоздатьЭлемент();
			НоваяРольIDM.ОсновнаяИБ = База;
			НоваяРольIDM.ИмяРоли = ВыборкаУжеСуществующихРолей.РольВИБ.Наименование;
			НоваяРольIDM.АктивностьРоли = Истина;
			НоваяСтрока = НоваяРольIDM.РолиВИБ.Добавить();
			НоваяСтрока.РольВИБ = ВыборкаУжеСуществующихРолей.РольВИБ;			
			НоваяРольIDM.Записать();
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура ЗаполнитьРолиВИБ(ИмяБазы)
	База = NSI_МодульПовторногоИспользования.ПолучитьСсылкуИБПоИмениБазы(ИмяБазы);
	Connector = NSI_МодульПовторногоИспользования.ПолучитьСоединениеПоИмениБазы(ИмяБазы);
	Результат = Connector.GetNameOfRoles();	
	Если ТипЗнч(Результат) = Тип("ХранилищеЗначения") Тогда
		Результат = Результат.Получить();
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Результат) Тогда
		Сообщить("База "+ИмяБазы+": метод вернул пустой ответ");
		Возврат;
	КонецЕсли;
	СтруктураОтвета = Результат;
	Если ЗначениеЗаполнено(СтруктураОтвета.ОписаниеОшибки) Тогда
		Сообщить("База "+ИмяБазы +": ошибка - "+СтруктураОтвета.ОписаниеОшибки);
		Возврат;
	КонецЕсли;
	Если ЗначениеЗаполнено(СтруктураОтвета.СписокРолей) Тогда
		МассивИспользуемыхИДРоли = Новый Массив;
		Для Каждого СтрокаРоли Из СтруктураОтвета.СписокРолей Цикл
			Если ЗначениеЗаполнено(СтрокаРоли.ИДРоли) Тогда
				МассивИспользуемыхИДРоли.Добавить(СтрокаРоли.ИДРоли);
				ИмеющаясяРоль = Справочники.NSI_РолиВИБ.НайтиПоРеквизиту("ИДРоли", СтрокаРоли.ИДРоли);
				Если Найти(Строка(ИмеющаясяРоль), "<Объект не найден>")=1 ИЛИ Не ЗначениеЗаполнено(ИмеющаясяРоль) Тогда
					РольОбъект = Справочники.NSI_РолиВИБ.СоздатьЭлемент();  
					РольОбъект.Владелец = База;
					РольОбъект.УстановитьСсылкуНового(ИмеющаясяРоль);
				Иначе                                              
					РольОбъект = ИмеющаясяРоль.ПолучитьОбъект();
				КонецЕсли;
				ЗаполнитьЗначенияСвойств(РольОбъект, СтрокаРоли, "ИДРоли, Наименование");
				РольОбъект.Записать();
			КонецЕсли;	
		КонецЦикла;
		// Очистим более несуществующие роли ВИБ
		Запрос = Новый Запрос("ВЫБРАТЬ
		                      |	РолиВИБ.Ссылка
		                      |ИЗ
		                      |	Справочник.РолиВИБ КАК РолиВИБ
		                      |ГДЕ
		                      |	НЕ РолиВИБ.ИДРоли В (&ИДРоли)
		                      |	И РолиВИБ.Владелец = &Владелец");
		Запрос.УстановитьПараметр("ИДРоли", МассивИспользуемыхИДРоли);
		Запрос.УстановитьПараметр("Владелец", База);
		Выборка = Запрос.Выполнить().Выбрать();
		МассивДляПоиска = Новый Массив;
		Пока Выборка.Следующий() Цикл
			МассивДляПоиска.Добавить(Выборка.Ссылка);
		КонецЦикла;
		ТЗСсылок = НайтиПоСсылкам(МассивДляПоиска);
			Для Каждого СтрокаСсылки Из ТЗСсылок Цикл
				Если СтрокаСсылки[2]="" Тогда
				КонецЕсли;
			КонецЦикла;
	КонецЕсли;
КонецПроцедуры

Функция ИзменитьСписокРолейПользователейИДМ(ListOfChangeRolesAccounts, Errors) Экспорт
	СписокОшибок = Новый Массив;	
	СоответствиеАккаунтРоль = Новый Соответствие;
	Для Каждого АккаунтСИзменениямиРолей Из ListOfChangeRolesAccounts.ListOfChangeRolesByAccount Цикл
		UserID = АккаунтСИзменениямиРолей.ID_User;
		УЗ = Справочники.NSI_УЗIDM.НайтиПоРеквизиту("UserID", UserID);
		Если Не ЗначениеЗаполнено(УЗ) Тогда
			ЗаполнитьОшибки("FailUserID", "УЗ с UserID """+UserID+""" не существует", Errors);
			Продолжить;
		КонецЕсли;
		УЗОбъект = УЗ.ПолучитьОбъект();
		ОбъектИзменен = Ложь;
		Для Каждого ОписаниеИзмененияРоли Из АккаунтСИзменениямиРолей.ListOfChangeRoles Цикл
			Роль = Справочники.NSI_РолиIDM.НайтиПоРеквизиту("RoleID", ОписаниеИзмененияРоли.RoleID);
			Если Не ЗначениеЗаполнено(Роль) Тогда
				ЗаполнитьОшибки("FailRoleID", "Роли с RoleID """+ОписаниеИзмененияРоли.RoleID+""" не существует", Errors);
				Продолжить;
			КонецЕсли;
			Если ОписаниеИзмененияРоли.EditType[0]="Add" Тогда
				СтрокаРоли = УЗОбъект.РолиIDM.Найти(Роль, "РольIDM");
				Если СтрокаРоли = Неопределено Тогда
					НоваяСтрока = УЗОбъект.РолиIDM.Добавить();
					НоваяСтрока.РольIDM = Роль;
					ОбъектИзменен = Истина;
				КонецЕсли;
			ИначеЕсли ОписаниеИзмененияРоли.EditType[0]="Remove" Тогда
				СтрокаРоли = УЗОбъект.РолиIDM.Найти(Роль, "РольIDM");
				Если Не СтрокаРоли = Неопределено Тогда
					УЗОбъект.РолиIDM.Удалить(СтрокаРоли);
					ОбъектИзменен = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		Если ОбъектИзменен Тогда
			Попытка                                 
				УЗОбъект.Записать();
			Исключение
				ЗаполнитьОшибки("FailWrite", "Не удалось записать УЗ с UserID """+UserID+"""", Errors);
				Продолжить;
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;
	Возврат Истина;
КонецФункции

Функция ЗаполнитьОшибки(КодОшибки, ОписаниеОшибки, Знач Errors=Неопределено)
	Если Errors=Неопределено Тогда
		Errors = СоздатьПустойТипIDM("ListOfErrors");
	КонецЕсли;
	Error = СоздатьПустойТипIDM("Error");
	Error.Code = КодОшибки;
	Error.Description = ОписаниеОшибки;
	Errors.Error.Добавить(Error);
	Возврат Errors; 
КонецФункции  

Функция СоздатьПустойТипIDM(ИмяТипа, Errors=Неопределено)
	Попытка
		Возврат ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("idm", ИмяТипа));
	Исключение
		Errors = ЗаполнитьОшибки(3, "Не удалось сериализовать тип "+ИмяТипа);
	КонецПопытки
КонецФункции

Процедура ОбновитьРолиПоУЗИДМ(ОбъектУЗИДМ, База) Экспорт
	Для Каждого СтрокаВИБ Из ОбъектУЗИДМ.УЗВИБ Цикл
		Попытка
			БазаВИБ = СтрокаВИБ.УЗВИБ.Владелец;
			Если ЗначениеЗаполнено(База) И БазаВИБ<>База Тогда
				Продолжить;
			КонецЕсли;
			Connector = NSI_МодульПовторногоИспользования.ПолучитьСоединениеПоИмениБазы(БазаВИБ.ИмяБазы);
			СтруктураРолейХранилище = Connector.GetUserRolesAndGroup(СтрокаВИБ.УЗВИБ.Наименование, СтрокаВИБ.УЗВИБ.ИДПользователя);
			СтруктураРолей = СтруктураРолейХранилище.Получить();
			ТаблицаГруппДоступа = СтруктураРолей.ГруппыДоступа;
			Если БазаВИБ.ВидРолейИспользуемыйВИБ = Перечисления.NSI_ВидРолиВИБ.ГруппаДоступа Тогда
				СтрокиИспользуемыхГрупп = ТаблицаГруппДоступа.НайтиСтроки(Новый Структура("ИмяСправочникаГрупп", "ГруппыДоступа"));
				Для Каждого СтрокаДоступа Из СтрокиИспользуемыхГрупп Цикл
					Если СтрокаДоступа.ИмяТЧГрупп="Пользователи" Тогда
						РольВИБ = Справочники.NSI_ГруппыДоступаВИБ.НайтиПоРеквизиту("СсылкаВИБ", СтрокаДоступа.ID, , БазаВИБ);
						Если ЗначениеЗаполнено(РольВИБ) Тогда
							ЗапросРолиИДМ = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
							                       |	РолиIDMРолиВИБ.Ссылка
							                       |ИЗ
							                       |	Справочник.NSI_РолиIDM.РолиВИБ КАК РолиIDMРолиВИБ
							                       |ГДЕ
							                       |	РолиIDMРолиВИБ.РольВИБ = &РольВИБ");
							ЗапросРолиИДМ.УстановитьПараметр("РольВИБ", РольВИБ);
							Выборка = ЗапросРолиИДМ.Выполнить().Выбрать();
							Если Выборка.Следующий() Тогда
								РольИДМ = Выборка.Ссылка;
							Иначе
								НоваяРольIDM = Справочники.NSI_РолиIDM.СоздатьЭлемент();
								НоваяРольIDM.ОсновнаяИБ = БазаВИБ;
								НоваяРольIDM.ИмяРоли = РольВИБ.Наименование;
								НоваяРольIDM.АктивностьРоли = Истина;
								НоваяСтрока = НоваяРольIDM.РолиВИБ.Добавить();
								НоваяСтрока.РольВИБ = РольВИБ;			
								НоваяРольIDM.Записать();
								РольИДМ = НоваяРольIDM.Ссылка;
							КонецЕсли;
						Иначе
							Продолжить;
							// Тут необходимо создавать новую роль ВИБ, т.к. все используемые роли ВИБ болжны быть загружены в базу. + Создать роль IDM
						КонецЕсли;
						// Ищем роль в справочнике, проверка нужна, независимо от того должна быть эта роль или нет.
						МассивНайденыхСтрокСРолями = ОбъектУЗИДМ.РолиIDM.НайтиСтроки(Новый Структура("РольIDM", РольИДМ));
						Если МассивНайденыхСтрокСРолями.Количество()>1 Тогда
							Для Ц = 1 По МассивНайденыхСтрокСРолями.Количество()-1 Цикл
								ОбъектУЗИДМ.РолиIDM.Удалить(МассивНайденыхСтрокСРолями[Ц]);
							КонецЦикла;
						КонецЕсли;
						РольИДМНайдена = МассивНайденыхСтрокСРолями.Количество()>0;
						Если СтрокаДоступа.Использование Тогда
							// Если роль не нашли - добавляем.
							Если Не РольИДМНайдена Тогда
								НоваяСтрока = ОбъектУЗИДМ.РолиIDM.Добавить();
								НоваяСтрока.РольIDM = РольИДМ;
							КонецЕсли;
						Иначе
							// Если роль найдена - удаляем
							Если РольИДМНайдена Тогда
								ОбъектУЗИДМ.РолиIDM.Удалить(МассивНайденыхСтрокСРолями[0]);
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			ИначеЕсли БазаВИБ.ВидРолейИспользуемыйВИБ = Перечисления.NSI_ВидРолиВИБ.ГруппаПользователей Тогда
				СтрокиИспользуемыхГрупп = ТаблицаГруппДоступа.НайтиСтроки(Новый Структура("ИмяСправочникаГрупп", "ГруппыПользователей"));
				Для Каждого СтрокаДоступа Из СтрокиИспользуемыхГрупп Цикл
					Если СтрокаДоступа.ИмяТЧГрупп="Состав" Тогда
						РольВИБ = Справочники.NSI_ГруппыДоступаВИБ.НайтиПоРеквизиту("СсылкаВИБ", СтрокаДоступа.ID, , БазаВИБ);
						Если ЗначениеЗаполнено(РольВИБ) Тогда
							ЗапросРолиИДМ = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
							                       |	РолиIDMРолиВИБ.Ссылка
							                       |ИЗ
							                       |	Справочник.NSI_РолиIDM.РолиВИБ КАК РолиIDMРолиВИБ
							                       |ГДЕ
							                       |	РолиIDMРолиВИБ.РольВИБ = &РольВИБ");
							ЗапросРолиИДМ.УстановитьПараметр("РольВИБ", РольВИБ);
							Выборка = ЗапросРолиИДМ.Выполнить().Выбрать();
							Если Выборка.Следующий() Тогда
								РольИДМ = Выборка.Ссылка;
							Иначе
								НоваяРольIDM = Справочники.NSI_РолиIDM.СоздатьЭлемент();
								НоваяРольIDM.ОсновнаяИБ = БазаВИБ;
								НоваяРольIDM.ИмяРоли = РольВИБ.Наименование;
								НоваяРольIDM.АктивностьРоли = Истина;
								НоваяСтрока = НоваяРольIDM.РолиВИБ.Добавить();
								НоваяСтрока.РольВИБ = РольВИБ;			
								НоваяРольIDM.Записать();
								РольИДМ = НоваяРольIDM.Ссылка;
							КонецЕсли;
						Иначе
							// Тут необходимо создавать новую роль ВИБ, т.к. все используемые роли ВИБ болжны быть загружены в базу. + Создать роль IDM
						КонецЕсли;
						// Ищем роль в справочнике, проверка нужна, независимо от того должна быть эта роль или нет.
						МассивНайденыхСтрокСРолями = ОбъектУЗИДМ.NSI_РолиIDM.НайтиСтроки(Новый Структура("РольIDM", РольИДМ));
						Если МассивНайденыхСтрокСРолями.Количество()>1 Тогда
							Для Ц = 1 По МассивНайденыхСтрокСРолями.Количество()-1 Цикл
								ОбъектУЗИДМ.РолиIDM.Удалить(МассивНайденыхСтрокСРолями[Ц]);
							КонецЦикла;
						КонецЕсли;
						РольИДМНайдена = МассивНайденыхСтрокСРолями.Количество()>0;
						Если СтрокаДоступа.Использование Тогда
							// Если роль не нашли - добавляем.
							Если Не РольИДМНайдена Тогда
								НоваяСтрока = ОбъектУЗИДМ.РолиIDM.Добавить();
								НоваяСтрока.РольIDM = РольИДМ;
							КонецЕсли;
						Иначе
							// Если роль найдена - удаляем
							Если РольИДМНайдена Тогда
								ОбъектУЗИДМ.РолиIDM.Удалить(МассивНайденыхСтрокСРолями[0]);
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			ИначеЕсли БазаВИБ.ВидРолейИспользуемыйВИБ = Перечисления.NSI_ВидРолиВИБ.Роль Тогда
				// Добавить обработку по ролям пользователя
			КонецЕсли;
		Исключение
			Сообщить("Ошибка при обработке УЗ ВИБ "+СтрокаВИБ.УЗВИБ+". "+ОписаниеОшибки());
		КонецПопытки;
	КонецЦикла;
КонецПроцедуры

Процедура ОбновитьРолиУЗИДМПоБазе(База) Экспорт
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ
		                      |	NSI_УЗIDMУЗВИБ.Ссылка
		                      |ИЗ
		                      |	Справочник.NSI_УЗIDM.УЗВИБ КАК NSI_УЗIDMУЗВИБ
		                      |ГДЕ
		                      |	NSI_УЗIDMУЗВИБ.УЗВИБ.Владелец = &Владелец");
	Запрос.УстановитьПараметр("Владелец", База);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Об = Выборка.Ссылка.ПолучитьОбъект();
		ОбновитьРолиПоУЗИДМ(Об, База);
		Об.Записать();
	КонецЦикла
КонецПроцедуры
